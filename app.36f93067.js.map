{"version":3,"sources":["app/game/Player.ts","app/game/Coordinate.ts","app/game/InitialGameHelper.ts","app/game/GameState.ts","app/game/GameMoveResult.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/game/BoardService.ts","app/index.ts"],"names":[],"mappings":"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","file":"app.36f93067.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Coordinate extends PartialCoordinate {\n    colIndex: number;\n}\n\ninterface PartialCoordinate {\n    row: number;\n    col: string;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Coordinate {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function coordinatesFromIndexes(row: number, col: number): Coordinate {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function areCoordsEquals(coord1: PartialCoordinate, coord2: PartialCoordinate) {\n    return coord1.row == coord2.row && coord1.col == coord2.col;\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { BoardPosition } from './BoardPosition';\nimport { point } from './Coordinate';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): BoardPosition[] => {\n    const columns = [\n        ['a', 'd', 'g'],\n        ['b', 'd', 'f'],\n        ['c', 'd', 'e'],\n        ['a', 'b', 'c', 'e', 'f', 'g'],\n        ['c', 'd', 'e'],\n        ['b', 'd', 'f'],\n        ['a', 'd', 'g'],\n    ];\n    const board: BoardPosition[] = [];\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.push({\n                player: Player.NO_PLAYER,\n                coordinate: point(i, col),\n            });\n        });\n    }\n    return board;\n};\n","export enum GameState {\n    INITIAL,\n    SELECT_POINT_TO_MOVE,\n    MOVE_SELECTED_POINT,\n    MILL,\n    GAME_OVER,\n}\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE,\n    FIRST_MOVE_PART,\n    RESTART_MOVE,\n    CANNOT_MOVE,\n    MILL,\n    OPPONENT_DESTROYED,\n    INVALID_MILL_MOVE,\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { GameState } from './GameState';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Player } from './Player';\n\nexport class GameMoveEngine {\n    private currentMove: CurrentMove = null;\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Coordinate): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentState == GameState.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Coordinate) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Coordinate): GameMoveResult {\n        if (!this.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Coordinate): GameMoveResult {\n        const position = this.game.boardService.position(point);\n        if (!position || position.player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setState(GameState.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Coordinate): GameMoveResult {\n        const pointToMove = this.currentMove.neighbours.find(p => areCoordsEquals(p, point));\n\n        if (!pointToMove) {\n            this.currentMove = null;\n            this.game.setState(GameState.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.currentMove.point, point);\n        this.currentMove = null;\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Coordinate): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n\ninterface CurrentMove {\n    point: Coordinate;\n    neighbours: Coordinate[];\n    player: Player;\n}\n","import { nextPlayer, Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Move, MovesHistory } from './MovesHistory';\nimport { BoardService } from './BoardService';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n    private gameMoveEngine: GameMoveEngine;\n    private millPlayer?: Player = null;\n    private gameState: GameState = GameState.INITIAL;\n    private prevState: GameState = GameState.INITIAL;\n    public readonly playerPoints = { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 };\n\n    private cannotGoCoordinates = [\n        { from: { row: 4, col: 'c' }, to: { row: 4, col: 'e' } },\n        { from: { row: 3, col: 'd' }, to: { row: 5, col: 'd' } },\n    ];\n\n    public constructor(private movesHistory: MovesHistory, public boardService: BoardService) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.initialHandQueue = InitialGameHelper.initHandQueue();\n    }\n\n    public addInitialPoint(coordinate: Coordinate) {\n        if (this.initialHandQueue.length) {\n            const position = this.boardService.position(coordinate);\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(coordinate, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.initialHandQueue.length) {\n            this.currentPlayerMove = this.initialHandQueue.pop();\n            this.setState(this.initialHandQueue.length ? GameState.INITIAL : GameState.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setState(GameState.SELECT_POINT_TO_MOVE);\n            this.currentPlayerMove = nextPlayer(this.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(coordinate: Coordinate): GameMoveResult {\n        return this.gameMoveEngine.makeMove(coordinate);\n    }\n\n    public movePoint(from: Coordinate, to: Coordinate) {\n        const fromPosition = this.boardService.position(from);\n        const toPosition = this.boardService.position(to);\n\n        if (toPosition.player === Player.NO_PLAYER) {\n            toPosition.player = fromPosition.player;\n            fromPosition.player = Player.NO_PLAYER;\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedCoordinate: Coordinate): boolean {\n        const { colsInLine, rowsInLine } = this.boardService.findColsAndRowsInLine(changedCoordinate);\n\n        const checkMill = (inLineArray: BoardPosition[], coordinate: Coordinate): boolean => {\n            const inLineIndex = inLineArray.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n            for (let i = 0; i < inLineArray.length; i += 3) {\n                if (inLineIndex >= i && inLineIndex < i + 3) {\n                    const currPlayer = inLineArray[inLineIndex].player;\n                    let millCount = 0;\n                    for (let j = 0; j < 3; j++) {\n                        if (currPlayer == inLineArray[i + j].player) millCount++;\n                    }\n                    if (millCount == 3) return true;\n                }\n            }\n            return false;\n        };\n\n        const isMill = checkMill(colsInLine, changedCoordinate) || checkMill(rowsInLine, changedCoordinate);\n        this.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setState(GameState.MILL);\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.millPlayer !== null;\n    }\n\n    public forEachBoardPosition(func: (pos: BoardPosition) => void) {\n        this.boardService.forEach(func);\n    }\n\n    public isGameOver(): boolean {\n        return this.gameState === GameState.GAME_OVER;\n    }\n\n    public isNoPlayer(coordinate: Coordinate): boolean {\n        const triedPosition: BoardPosition = this.boardService.position(coordinate);\n        return triedPosition && triedPosition.player == Player.NO_PLAYER;\n    }\n\n    public isOpponentPoint(point: Coordinate): boolean {\n        const position = this.boardService.position(point);\n        return this.isOpponentPosition(position);\n    }\n\n    private isOpponentPosition(position) {\n        return position && position.player != Player.NO_PLAYER && position.player != this.currentPlayer;\n    }\n\n    public possibleMoves(coordinate: Coordinate): Coordinate[] {\n        const previousCoordinate: Coordinate = this.movesHistory.getPreviousCoordinate(this.currentPlayer, coordinate);\n        return this.findNeighbours(coordinate)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousCoordinate && areCoordsEquals(previousCoordinate, p)));\n    }\n\n    public allOpponentPositions(): BoardPosition[] {\n        return this.boardService.filter((position: BoardPosition) => this.isOpponentPosition(position));\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        if (this.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n        }\n        const { colsInLine, rowsInLine } = this.boardService.findColsAndRowsInLine(coordinate);\n        const neighbours: Coordinate[] = this.findNearestPoints(coordinate, colsInLine, rowsInLine);\n        this.filterNeighboursImpossibleToGo(coordinate, neighbours);\n\n        return neighbours;\n    }\n\n    public get currentState(): GameState {\n        return this.gameState;\n    }\n\n    public setState(state: GameState) {\n        if (this.isGameOver()) return;\n        this.prevState = this.gameState;\n        this.gameState = state;\n    }\n\n    public get currentPlayer(): Player {\n        return this.currentPlayerMove;\n    }\n\n    private findNearestPoints(\n        coordinate: Coordinate,\n        colsInLine: BoardPosition[],\n        rowsInLine: BoardPosition[],\n    ): Coordinate[] {\n        const sameColumnsIndex = colsInLine.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n        const sameRowsIndex = rowsInLine.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n\n        return [\n            colsInLine[sameColumnsIndex + 1],\n            colsInLine[sameColumnsIndex - 1],\n            rowsInLine[sameRowsIndex + 1],\n            rowsInLine[sameRowsIndex - 1],\n        ]\n            .filter(x => x)\n            .map(p => p.coordinate);\n    }\n\n    private filterNeighboursImpossibleToGo(coordinate: Coordinate, neighbours: Coordinate[]) {\n        this.cannotGoCoordinates.forEach(({ from, to }) => {\n            if (areCoordsEquals(coordinate, from)) {\n                const i = neighbours.findIndex(p => areCoordsEquals(p, to));\n                neighbours.splice(i, 1);\n            } else if (areCoordsEquals(coordinate, to)) {\n                const i = neighbours.findIndex(p => areCoordsEquals(p, from));\n                neighbours.splice(i, 1);\n            }\n        });\n    }\n\n    public findSelectableCoordinates(coordinate?: Coordinate): Coordinate[] {\n        switch (this.currentState) {\n            case GameState.INITIAL:\n                return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n            case GameState.SELECT_POINT_TO_MOVE:\n                return this.boardService.findPlayerCoordinates(this.currentPlayer);\n            case GameState.MILL:\n                return this.allOpponentPositions().map(p => p.coordinate);\n            case GameState.MOVE_SELECTED_POINT:\n                return [\n                    ...this.possibleMoves(coordinate),\n                    ...this.boardService.findPlayerCoordinates(this.currentPlayer),\n                ];\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Coordinate) {\n        const boardPosition = this.boardService.position(point);\n        this.playerPoints[boardPosition.player]--;\n        boardPosition.player = Player.NO_PLAYER;\n\n        if (Object.values(this.playerPoints).some(points => points === POINTS_TO_GAME_OVER)) {\n            this.setState(GameState.GAME_OVER);\n        }\n    }\n\n    public clearMill() {\n        this.setState(this.prevState);\n        this.millPlayer = null;\n    }\n\n    public getMovesHistory(): Move[] {\n        return this.movesHistory.getHistory();\n    }\n}\n","import { Coordinate, coordinatesFromIndexes } from '../game/Coordinate';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(coordinate: Coordinate) {\n        this.ctx.moveTo(\n            this.squareSize * coordinate.colIndex + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(coordinate: Coordinate) {\n        this.ctx.lineTo(\n            this.squareSize * coordinate.colIndex + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Coordinate, end: Coordinate) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.stroke();\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getCoordinate(pos: { x: number; y: number }): Coordinate {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return coordinatesFromIndexes(row, col);\n    }\n\n    private drawCircle(coordinate: Coordinate, radius: number) {\n        const xPosition = coordinate.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (coordinate.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { areCoordsEquals, Coordinate, point } from '../game/Coordinate';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Coordinate[];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectableCoordinates();\n    }\n\n    private onMouseClick(point: Coordinate) {\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n        this.afterUpdate(gameMoveResult);\n        this.selectablePoints = this.game.findSelectableCoordinates(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.forEachBoardPosition((board: BoardPosition) => {\n            const paintable = getPaintablePlayer(board.player);\n\n            if (board.player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(board.coordinate, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(board.coordinate, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Coordinate) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(position => {\n            this.gameCanvas.strokeCircle(position.coordinate, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            const isSelectable = this.selectablePoints.some(p => areCoordsEquals(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { Player } from '../game/Player';\nimport { GameState } from '../game/GameState';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('game-state');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly gameStateToText = {\n        [GameState.INITIAL]: 'Initial',\n        [GameState.MOVE_SELECTED_POINT]: 'Move coordinate',\n        [GameState.SELECT_POINT_TO_MOVE]: 'Select coordinate',\n        [GameState.MILL]: 'Mill',\n        [GameState.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update(gameMoveResult?: GameMoveResult) {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        this.moveTypeText.innerText = this.gameStateToText[this.game.currentState] || 'Unknown state';\n    }\n\n    private updateHistoryMoves() {\n        console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public addInitialMove(coordinate: Coordinate, player: Player) {\n        this.addMove({ to: coordinate, player });\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public getPreviousCoordinate(player: Player, coordinate: Coordinate): Coordinate | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (this.history[i].player === player)\n                return areCoordsEquals(this.history[i].to, coordinate) ? this.history[i].from : null;\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Coordinate;\n    to: Coordinate;\n    player: Player;\n}\n","import { BoardPosition } from './BoardPosition';\nimport { initBoard } from './InitialGameHelper';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class BoardService {\n    private readonly board: BoardPosition[];\n\n    public constructor() {\n        this.board = initBoard();\n    }\n\n    public position(point: Coordinate): BoardPosition {\n        return this.board.find(p => areCoordsEquals(p.coordinate, point));\n    }\n\n    public filter(predicate: (position: BoardPosition) => boolean): BoardPosition[] {\n        return this.board.filter(predicate);\n    }\n\n    public findPlayerCoordinates(player: Player): Coordinate[] {\n        return this.filter(pos => pos.player === player).map(p => p.coordinate);\n    }\n\n    public findColsAndRowsInLine(point: Coordinate): FindInLinePositionResults {\n        return this.board.reduce(\n            (acc, curr) => {\n                if (areCoordsEquals(curr.coordinate, point)) {\n                    acc.rowsInLine.push(curr);\n                    acc.colsInLine.push(curr);\n                } else if (curr.coordinate.colIndex === point.colIndex) {\n                    acc.colsInLine.push(curr);\n                } else if (curr.coordinate.row === point.row) {\n                    acc.rowsInLine.push(curr);\n                }\n                return acc;\n            },\n            { colsInLine: [], rowsInLine: [] },\n        );\n    }\n\n    public forEach(func: (pos: BoardPosition) => void) {\n        this.board.forEach(func);\n    }\n}\n\ninterface FindInLinePositionResults {\n    colsInLine: BoardPosition[];\n    rowsInLine: BoardPosition[];\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\nimport { BoardService } from './game/BoardService';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame(new MovesHistory(), new BoardService());\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n    const drawer = new GameDrawer(canvas, game, type => infoWriter.update(type));\n\n    infoWriter.update();\n})();\n"]}