{"version":3,"sources":["app/game/Player.ts","app/game/Point.ts","app/game/InitialGameHelper.ts","app/game/GameState.ts","app/game/GameMoveResult.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/index.ts"],"names":[],"mappings":"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","file":"app.6824cdb2.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Point extends PartialPoint {\n    colIndex: number;\n}\n\ninterface PartialPoint {\n    row: number;\n    col: string;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Point {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function pointFromIndexes(row: number, col: number): Point {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function arePointsEqual(point1: PartialPoint, point2: PartialPoint) {\n    return point1.row == point2.row && point1.col == point2.col;\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { BoardPosition } from './BoardPosition';\nimport { point } from './Point';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): BoardPosition[] => {\n    const columns = [\n        ['a', 'd', 'g'],\n        ['b', 'd', 'f'],\n        ['c', 'd', 'e'],\n        ['a', 'b', 'c', 'e', 'f', 'g'],\n        ['c', 'd', 'e'],\n        ['b', 'd', 'f'],\n        ['a', 'd', 'g'],\n    ];\n    const board: BoardPosition[] = [];\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.push({\n                player: Player.NO_PLAYER,\n                point: point(i, col),\n            });\n        });\n    }\n    return board;\n};\n","export enum GameState {\n    INITIAL,\n    SELECT_POINT_TO_MOVE,\n    MOVE_SELECTED_POINT,\n    MILL,\n    GAME_OVER,\n}\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE,\n    FIRST_MOVE_PART,\n    RESTART_MOVE,\n    CANNOT_MOVE,\n    MILL,\n    OPPONENT_DESTROYED,\n    INVALID_MILL_MOVE,\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { arePointsEqual, Point } from './Point';\nimport { GameState } from './GameState';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Player } from './Player';\n\nexport class GameMoveEngine {\n    private currentMove: CurrentMove = null;\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Point): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentState == GameState.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Point) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Point): GameMoveResult {\n        if (!this.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Point): GameMoveResult {\n        const position = this.game.findPosition(point);\n        if (!position || position.player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setState(GameState.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Point): GameMoveResult {\n        const pointToMove = this.currentMove.neighbours.find(p => arePointsEqual(p, point));\n\n        if (!pointToMove) {\n            this.currentMove = null;\n            this.game.setState(GameState.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.currentMove.point, point);\n        this.currentMove = null;\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Point): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n\ninterface CurrentMove {\n    point: Point;\n    neighbours: Point[];\n    player: Player;\n}\n","import { nextPlayer, Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { arePointsEqual, Point } from './Point';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Move, MovesHistory } from './MovesHistory';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n    public readonly board: BoardPosition[];\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n    private gameMoveEngine: GameMoveEngine;\n    private millPlayer?: Player = null;\n    private gameState: GameState = GameState.INITIAL;\n    private prevState: GameState = GameState.INITIAL;\n    public readonly playerPoints = { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 };\n\n    private cannotGoPoints = [\n        { from: { row: 4, col: 'c' }, to: { row: 4, col: 'e' } },\n        { from: { row: 3, col: 'd' }, to: { row: 5, col: 'd' } },\n    ];\n\n    public constructor(private movesHistory: MovesHistory) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.initialHandQueue = InitialGameHelper.initHandQueue();\n        this.board = InitialGameHelper.initBoard();\n    }\n\n    public addInitialPoint(point: Point) {\n        if (this.initialHandQueue.length) {\n            const position = this.board.find(p => arePointsEqual(p.point, point));\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(point, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.initialHandQueue.length) {\n            this.currentPlayerMove = this.initialHandQueue.pop();\n            this.setState(this.initialHandQueue.length ? GameState.INITIAL : GameState.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setState(GameState.SELECT_POINT_TO_MOVE);\n            this.currentPlayerMove = nextPlayer(this.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(point: Point): GameMoveResult {\n        return this.gameMoveEngine.makeMove(point);\n    }\n\n    public movePoint(from: Point, to: Point) {\n        const fromPosition = this.board.find(p => arePointsEqual(p.point, from));\n        const toPosition = this.board.find(p => arePointsEqual(p.point, to));\n\n        if (toPosition.player === Player.NO_PLAYER) {\n            toPosition.player = fromPosition.player;\n            fromPosition.player = Player.NO_PLAYER;\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedPoint: Point): boolean {\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(changedPoint);\n\n        const checkMill = (inLineArray: BoardPosition[], point: Point): boolean => {\n            const inLineIndex = inLineArray.findIndex(p => arePointsEqual(p.point, point));\n            for (let i = 0; i < inLineArray.length; i += 3) {\n                if (inLineIndex >= i && inLineIndex < i + 3) {\n                    const currPlayer = inLineArray[inLineIndex].player;\n                    let millCount = 0;\n                    for (let j = 0; j < 3; j++) {\n                        if (currPlayer == inLineArray[i + j].player) millCount++;\n                    }\n                    if (millCount == 3) return true;\n                }\n            }\n            return false;\n        };\n\n        const isMill = checkMill(colsInLine, changedPoint) || checkMill(rowsInLine, changedPoint);\n        this.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setState(GameState.MILL);\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.millPlayer !== null;\n    }\n\n    public isGameOver(): boolean {\n        return this.gameState === GameState.GAME_OVER;\n    }\n\n    public isNoPlayer(point: Point): boolean {\n        const triedPosition: BoardPosition = this.findPosition(point);\n        return triedPosition && triedPosition.player == Player.NO_PLAYER;\n    }\n\n    public findPosition(point: Point): BoardPosition {\n        return this.board.find(p => arePointsEqual(p.point, point));\n    }\n\n    public isOpponentPoint(point: Point): boolean {\n        const position = this.findPosition(point);\n        return this.isOpponentPosition(position);\n    }\n\n    private isOpponentPosition(position) {\n        return position && position.player != Player.NO_PLAYER && position.player != this.currentPlayer;\n    }\n\n    public possibleMoves(point: Point): Point[] {\n        const previousPoint: Point = this.movesHistory.getPreviousPoint(point);\n        return this.findNeighbours(point)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousPoint && arePointsEqual(previousPoint, p)));\n    }\n\n    public allOpponentPositions(): BoardPosition[] {\n        return this.board.filter((position: BoardPosition) => this.isOpponentPosition(position));\n    }\n\n    public findNeighbours(point: Point): Point[] {\n        if (this.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.board.filter(p => p.player === Player.NO_PLAYER).map(p => p.point);\n        }\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(point);\n        const neighbours: Point[] = this.findNearestPoints(point, colsInLine, rowsInLine);\n        this.filterNeighboursImpossibleToGo(point, neighbours);\n\n        return neighbours;\n    }\n\n    public get currentState(): GameState {\n        return this.gameState;\n    }\n\n    public setState(state: GameState) {\n        if (this.isGameOver()) return;\n        this.prevState = this.gameState;\n        this.gameState = state;\n    }\n\n    public get currentPlayer(): Player {\n        return this.currentPlayerMove;\n    }\n\n    private findColsAndRowsInLine(point: Point): FindInLinePointsResults {\n        return this.board.reduce(\n            (acc, curr) => {\n                if (arePointsEqual(curr.point, point)) {\n                    acc.rowsInLine.push(curr);\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.colIndex === point.colIndex) {\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.row === point.row) {\n                    acc.rowsInLine.push(curr);\n                }\n                return acc;\n            },\n            { colsInLine: [], rowsInLine: [] },\n        );\n    }\n\n    private findNearestPoints(point: Point, colsInLine: BoardPosition[], rowsInLine: BoardPosition[]): Point[] {\n        const sameColumnsIndex = colsInLine.findIndex(p => arePointsEqual(p.point, point));\n        const sameRowsIndex = rowsInLine.findIndex(p => arePointsEqual(p.point, point));\n\n        return [\n            colsInLine[sameColumnsIndex + 1],\n            colsInLine[sameColumnsIndex - 1],\n            rowsInLine[sameRowsIndex + 1],\n            rowsInLine[sameRowsIndex - 1],\n        ]\n            .filter(x => x)\n            .map(p => p.point);\n    }\n\n    private filterNeighboursImpossibleToGo(point: Point, neighbours: Point[]) {\n        this.cannotGoPoints.forEach(({ from, to }) => {\n            if (arePointsEqual(point, from)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, to));\n                neighbours.splice(i, 1);\n            } else if (arePointsEqual(point, to)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, from));\n                neighbours.splice(i, 1);\n            }\n        });\n    }\n\n    public findSelectablePoints(point?: Point): Point[] {\n        switch (this.currentState) {\n            case GameState.INITIAL:\n                return this.board.filter(p => p.player === Player.NO_PLAYER).map(p => p.point);\n            case GameState.SELECT_POINT_TO_MOVE:\n                return this.board.filter(p => p.player === this.currentPlayer).map(p => p.point);\n            case GameState.MILL:\n                return this.allOpponentPositions().map(p => p.point);\n            case GameState.MOVE_SELECTED_POINT:\n                return this.possibleMoves(point);\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Point) {\n        const boardPosition = this.findPosition(point);\n        this.playerPoints[boardPosition.player]--;\n        boardPosition.player = Player.NO_PLAYER;\n\n        if (Object.values(this.playerPoints).some(points => points === POINTS_TO_GAME_OVER)) {\n            this.setState(GameState.GAME_OVER);\n        }\n    }\n\n    public clearMill() {\n        this.setState(this.prevState);\n        this.millPlayer = null;\n    }\n\n    public getMovesHistory(): Move[] {\n        return this.movesHistory.getHistory();\n    }\n}\n\ninterface FindInLinePointsResults {\n    colsInLine: BoardPosition[];\n    rowsInLine: BoardPosition[];\n}\n","import { Point, pointFromIndexes } from '../game/Point';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(point: Point) {\n        this.ctx.moveTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(point: Point) {\n        this.ctx.lineTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Point, end: Point) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.stroke();\n    }\n\n    public clearCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.clip();\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getPoint(pos: { x: number; y: number }): Point {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return pointFromIndexes(row, col);\n    }\n\n    private drawCircle(point: Point, radius: number) {\n        const xPosition = point.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (point.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { arePointsEqual, Point, point } from '../game/Point';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Point[];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectablePoints();\n    }\n\n    private onMouseClick(point: Point) {\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n        this.afterUpdate(gameMoveResult);\n        this.selectablePoints = this.game.findSelectablePoints(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.board.forEach((board: BoardPosition) => {\n            const paintable = getPaintablePlayer(board.player);\n\n            if (board.player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Point) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(position => {\n            this.gameCanvas.strokeCircle(position.point, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            const isSelectable = this.selectablePoints.some(p => arePointsEqual(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { Player } from '../game/Player';\nimport { GameState } from '../game/GameState';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('game-state');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly gameStateToText = {\n        [GameState.INITIAL]: 'Initial',\n        [GameState.MOVE_SELECTED_POINT]: 'Move point',\n        [GameState.SELECT_POINT_TO_MOVE]: 'Select point',\n        [GameState.MILL]: 'Mill',\n        [GameState.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update(gameMoveResult?: GameMoveResult) {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        this.moveTypeText.innerText = this.gameStateToText[this.game.currentState] || 'Unknown state';\n    }\n\n    private updateHistoryMoves() {\n        console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { arePointsEqual, Point } from './Point';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public addInitialMove(point: Point, player: Player) {\n        this.addMove({ to: point, player });\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public getPreviousPoint(point: Point): Point | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (arePointsEqual(this.history[i].to, point)) return this.history[i].from;\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Point;\n    to: Point;\n    player: Player;\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame(new MovesHistory());\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n    const drawer = new GameDrawer(canvas, game, type => infoWriter.update(type));\n\n    infoWriter.update();\n})();\n"]}