{"version":3,"sources":["app/game/Player.ts","app/game/Point.ts","app/game/InitialGameHelper.ts","app/game/GamePhase.ts","app/game/GameMoveResult.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/index.ts"],"names":[],"mappings":";;;;;AIAA,ADAA,AHAA,ACSA,IGTY,ADAA,AHAA,ACSN,MDTN,ACSY,GETZ,AFSe,IAAI,CGTnB,SHSe,CAAe,CAAf,CAAf;ACTA,AUAA,AJAA,INAA,AUAA,AJAA,QNAA,AMAA,GNAA,AMAA,ONAA,AMAA,CNAA,AMAA,CIAA,GAAA,MVAA,CAAA,AUAA,CAAA,IJAA,CAAA,sBIAA,CAAA;ARAA,ADAA,AHAA,ACWA,CGXA,ADAA,AHAA,QCWgB,EGXJ,ADAA,AHAA,GCWZ,CAAsB,EDXtB,CCWA,CDXkB,CGAlB,AFWmC,EEXd,CFWrB,EGXA,AHW8C,EGXpB;AACtB,ADAA,ADAJ,AFAI,ACWA,AWXJ,AJOA,EJPI,ADAA,AHAA,EEAJ,AUAA,AJOM,IRPF,CAAA,ACWO,EEXP,AKOS,CLPT,EKO0C,CRP1C,CIAA,AJAA,AYAJ,CRAI,CIO8C,CIPlD,ETAI,AKO0C,CLP1C,CKOJ,CNPA,EFAI,AYAJ,CVAA,AFAI,AYAJ,GZAI,CIAA,ADAA,AHAA,CIAA,ADAA,AHAA,EEAJ,CCAI,ADAJ,AFAI,CGAA,CAAA,GAAA,KHAA,EYAJ,CAAA,CTAI,CCAA,CAAA,GAAA,CAAA,CAAA,CFAJ,CAAA,CEAI,kBAAA;AACA,ADAA,AHAA,ACUS,AOHb,EJPI,ADAA,AHAA,ECUS,GAAG,AOHT,CRPH,AQOI,CRPJ,ACUS,EEVT,AKOJ,CLPI,AFUO,AOHC,GRPR,CIAA,AJAA,CIAA,GIOQ,CLPR,AKOQ,CLPR,IHAA,CAAA,AQOQ,CAAO,ELPf,AHAA,CIAA,ADAA,AHAA,CIAA,AJAA,EGAA,CAAA,AHAA,CGAA,AKOJ,EAA6B,CLPzB,MHAA,EGAA,ECAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AACA,ADAH,ADAD,AFAI,ACSc,AWVlB,AJO+B,CLT/B,CCGI,AJAA,AQM2B,CLTnB,CDGZ,ADSkB,AWVlB,GXUqB,AOHe,CRNhC,CAAA,ACSc,AOHoB,ENNtC,CCHqB,AFYV,ECTX,AMM6B,CLTjB,AHGR,CIAA,AJAA,CIAA,GQDJ,CVCA,CCHY,ADGZ,CCHY,ASEZ,IZCI,CAAA,EYDJ,CRCI,AFAJ,AFAI,AYDJ,CRCI,ADHQ,ADGZ,AFAI,CAAA,GAAA,CGHQ,OAAA,CAAA,CCGR,CAAA,AJAA,GIAA,CAAA,CAAA,EDHQ,CCGR,AQDJ,CAAA,CTFqB,EAAT,CAAZ,SCGI;AACA,AJAH,ACQsB,AOHsB,CRT7C,CIII,AIKyC,CRTjC,CCYW,IOH4B,CRTjC,CQSmC,ERTzC,ACYmB,AOHF,EPGI,EGR7B,CAAA,AHQgC,CAAC,CDZzB,CAAA,MAAA,ECYqB,CAAe,CAAf,CGR7B,AJJQ,CIIR,EHQiD,IDZzC,CAAA,MIIR,AJJQ,CIIR,EJJc,CIId,CAAA,AJJQ,CIIR,AJJJ,GIII,aAAA;ACHJ,ADII,AFAS,ADOF,AWTX,ALHA,AEAA,ADSyD,EJJrD,AIIqD,CPGrD,CIXJ,AMEa,ACAb,ALHA,AEAA,GPKa,AMIiD,CNJjD,CMImD,EHRhE,AEDA,GFCA,AEDA,EHKI,CAAA,CQFJ,GPFA,AHIa,AUFb,ALHA,CFCA,AEDA,ELK6B,AOL7B,GAAA,CGGA,CAAA,EPFA,ADII,CCJJ,ADII,EKLJ,CAAA,CPK4C,CKL5C,CHKI,AGLJ,CHKI,GAAA,CAAA,CAAA,GAAA,GQFJ,CAAA,EREI,UKLJ,CAAA;ALMI,AFAA,AFAS,ACOZ,AOJ4B,CAA7B,CJHI,IFAM,CFAG,CAAA,GEAE,GAAG,EEAd,AFAA,CEAA,CJAS,GAAa,UIAtB,AJAuB,CIAvB,KJAsB,eIAtB,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;ACJJ,ADKI,AFAA,AFDsB,AYD1B,AHHA,ADQA,CILC,CREG,ECLJ,AEAa,AEAb,EPKU,CMGH,CAAC,CRJ+C,ESJvD,ADQA,CAAY,CNHK,AUFhB,CHHD,CJAA,ALI6D,CICzD,AFAgB,CEAhB,AFAiB,CGLrB,ELIkE,AQItD,CCRZ,ADQY,CCRZ,GJAA,AHKqB,CGLrB,AHKqB,AFDmD,CAAC,AQI7D,CAAO,GJHf,CAAA,AFAiB,CAAO,EFD2B,CQIvD,CCRA,CTIoF,ASJpF,ADQ6B,CHR7B,CAAA,CHKoB,EAAkB,CFDoD,CAAC,MICvF,AFAkC,CEAlC,AFAkC,CFDiB,EICnD,CAAA,AJDkG,CIClG,CFAkC,CAAO,CEAzC,EJDwG,CAAC,IECzF,CAAhB,GFDsB,QICtB;AACH,AOLD,AXG0B,ACK1B,AWLI,AJI2B,CJV/B,AJMa,CYAT,AJI2B,CJVnB,IHWZ,AODoC,CPCpC,CWLW,AJI2B,CIJ1B,GXKZ,AWLI,CAAY,CJIa,CPC7B,CGX0B,GAAd,CHWZ,KURA,CPHY,CAAA,cAAA,KAAA,IQMR,GRNQ,CAAA,cAAA,GAAc,EAAd,CAAZ;ACGA,AHKI,ASLJ,ACKI,AHLJ,ADO8C,EAAA,EHP9C,AIAA,EGKU,CVAD,CME2C,EIFtC,AJEwC,CNFzC,CAAC,AMEe,CIFZ,EVAA,CAAb,CUAiB,CVAD,CAAC,CGLrB,EHKwB,CGLxB,AIAA,GAAA,IJAA,CAAA,EIAA,CAAA,GGKqB,CAAA,IVAG,CAAA,MGLxB,CAAA,KIAA,CGKiB,AHLjB,CGKwC,IVAhB,AUAoB,CVAD,aUAC,CAAA,EVApB,GAAsC,CAA1D,EAA6D,CAAC,EAA9D,CUAoC,CVA8B,CUArD,CAAb;AVCI,ADMR,AWNI,ALNA,ACOsD,EAAA,ENDlD,EUAE,CJCqD,ENDlD,ADMG,AOLiD,CNDnD,EUAE,EVAR,CAAW,AUAA,OVAO,CAAC,AUAA,CVAC,AUAA,CXM5B,CAAiC,CCNF,EDM/B,AMZ+B,ENYe,CMZ1C,ELMkC,ADMtC,AMZsE,CLM/B,CDMkB,EWNtC,CAAwB,EVAjB,CAAlB,EKNJ,EAAoF,MKMrE,CAAf;AVCC,ASNO,AVYR,AWLA,ALRoF,AECxF,ADM6B,CAA7B,GHJa,AIFb,EGOU,GDPE,AVYD,GQZX,GAAA,CEAY,ACOQ,GDPU,ACOP,EDPX,CFAZ,CGO2B,AHP3B,gBGO2B,AHP3B,CGO2B,AHP3B,cGOuB,CAAmB,IAAnB,CAAnB;ADaH,AVRY,AWJT,AJDJ,IPKa,EWJH,CXIM,AOLT,CAAC,CPKU,EOLlB,CPKqB,AWJL,AJDJ,GPKY,AWJL,CXIR,GWJY,CJDX,CAAA,MAAA,CAAO,GICI,CAAA,KJDvB,EAA8B,GICX,CAAe,MAAf,EAAuB,IAAvB,EAA6B,UAAA,IAAI;AVDhD,ADKuB,AWJyB,ALTrB,AEE/B,ADMgC,EAAA,EPKL,AQX3B,GRW8B,AOLO,ENA1B,ADKqB,AMbD,ACQQ,EICiB,CLTzB,ELQ3B,CDKkC,AMbP,CNaQ,AOLT,EDRC,EEE/B,CGOkE,CAAC,CHPnE,KRWgC,AWJwB,CXIJ,AWJsB,CHP1E,CAAA,EGOwD,CAAJ,CXIM,GAAG,GAA7B,CAArB,aQXX,CAAA;AJII,AHGH,ADIkE,AWJf,ALTkB,ACQtB,CNNnC,CMMmC,CIC7B,CXIgD,AWJ/D,IJDkD,CDRgB,CCQd,CAA1B,CPK6C,EAAE,KMbP,GAAA,IFMvC,IAA3B,EAAmD,AENe;AFMf,AJO5C,AWFP,ALXwF,AEG5F,ACLA,AFU2D,EIGvD,AJHuD,CPKvD,CQVJ,ACLA,GFUgE,EAAE,GIGpD,CAAC,MAAX,EHRJ,ACLA,GDKA,ACLA,ODKA,ACLA,CDKA,ACLA,mBDKA,ACLA,CDKA,ACLA;ARaa,ADGZ,AWFA,AJJ6B,CIN9B,AJMA,MNGa,CAAA,SAAA,GAAY,QSRN,ITQ4B,ESRlB;ANGE,AHM3B,ASRI,ALPR,AIEA,IJFA,AGQa,ACNb,ERaU,GGNqB,EMFlB,CLPb,CDS+B,AHMd,EIfjB,CDS+B,AHMX,CACZ,CAAC,ASTD,CAAa,CNEU,AKP/B,CRcQ,CIhBR,CJgBc,ASTN,ALPR,AIEA,CCK0B,ETSlB,EAAW,ASTX,EDLR,CRcQ,AQdR,CRaoB,CIfpB,CJiBQ,AIjBR,CJiBS,GAAD,EAAM,GAAN,EAAW,GAAX,CAFY,EAGZ,CAAC,GAAD,AQhBR,CAAA,CRgBc,GAAN,EAAW,GAAX,CAHY,EAIZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAJY,EAKZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALY,EAMZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANY,EAOZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAPY,CAAhB;AGRQ,AHiBR,AShBC,AVOL,AOFa,MNWH,CDTV,AOFa,CPEb,AOFa,CHND,EHiBG,GAAoB,EAA/B,IGjBQ,GAA2B,CJQvC,EOFa,CHND,AJQZ,EOFkC,UAAC,IPEnC,EOFkC;AHJyB,ACP3D,AICA,AFUkC,IFXlC,AICA,KFUuE,EFXvE,CICA,EJDA,CICA,CFU8E,CAAC,GAAR,CFXvE,AEWmF,CFXnF,AICA,CAAA,IFUuE,CAArC,CDRd,EDHpB,CAAA,ICGiC,GGFjC,CAAA;ARW+C,ADK/C,AMbQ,AEOJ,ADA8B,CAArB,QPMG,EMbH,GAAL,CAAS,OEQD,CRKhB,CAA+B,EMbvB,EEOJ,CPaS,AKpBkB,CLQgB,ADK/C,AQJgB,ERIqC,EMb7C,AEOJ,EAGY,ERGhB,EAAyE,OQNrE,EAGiC;APW7B,AIxBR,ALiBI,AMbI,AES6B,IPW7B,AIxBR,AIEa,KTeF,ECOI,AKpBF,CLoBG,CAAC,CKpBT,CNaS,AMbA,CLoBG,ADPF,CCOH,CAAP,CAAe,ADPZ,EKjBX,ELiByB,CKjBzB,ACIQ,ELoBA,CAAuB,AKpBF,ENaE,CAAC,EMbxB,CNaG,EUVe,CLP1B,CJwB+B,AIxB/B,ALiBuC,GCOL,EAAG,ASjBG,CVUK,CKjB7C,ALiB8C,CKjB9C,ELiBuC,GUVe,CVUD,MAAM,CAAC,GAAxD,KKjBJ,CAAA,CAAA;AJyBY,ASjBJ,AVUP,AMbI,MLoBO,KAAK,ASjBJ,CTiBK,IAAN,CAAW,CSjBf,CAAa;ATkBL,ASlBO,ALPvB,AGUgB,IHVhB,IJyBgB,ASlBO,CFGP,CEHS,EAAE,ETkBL,CIzBtB,AGUgB,CPeQ,CSlBH,CLPrB,AGUgB,MPeQ,AOfR,CPeQ,AIzBxB,CAAA,GDOoB,EHkBI,CAAO,IGlBC,GCPhC,CAAA,CJwBuB;AGhBf,AHkBQ,ASnBkB,AVQlC,AQJgB,ACQZ,OTJJ,CCWgB,ASnBkB,AVQlC,CQJgB,CJHJ,GHkBS,AOfL,CEJwB,CNCvB,AHkBM,CSnBW,AFIlB,GJHJ,CAAU,AIGN,EPeO,ADXvB,CCWuB,EDXvB,CIPY,AKWmB,ELXvB,AHkBe,CAAM,CGlBG,AHkBT,AQPnB,ERO4B,AQPuB,GROhC,IDXvB;AINY,AHeW,ASjBF,ALNrB,AGWgB,ACOuC,IJlBvD,GJuBY,ASjBJ,EFKQ,MJHG,KAAK,ACRxB,AGWgB,GHXhB,AGWgB,IFNE,GDLlB,CAAA,CDQmB,CAAkB,CEHP,AEMd,IJHG,CAAP,UCRZ,CAAA;ADSS,AHkBA,ASpBJ,AJDG,AEDa,KPiBb,EGfA,EIFa,EFCR,EFGE,CEHP,CAAS,EFGE,EIJE,EFCb,CFGgB,AEFZ,AEFsB,IJIf,CAAU,AEFZ,IEFI,MFET,EFEO,CEFW,GFEe,EEFV,CAAC,QFES,AEFjC,CFEiC,EEFE,KAAK,EFEP,CAAU,OAAxC,AEFgC,EFEiB,CEFC,CADzD,EAEI,KAAK,UAAL,IAAmB,KAAK,CAAC,GAAN,GAAY,CAA/B,IAAoC,KAAK,UAAL,GAAkB,CAF1D;AFII,AHDmC,AIL/C,ACMK,AEGG,ACK+C,IJdjD,KGSO,MJHM,KAAK,GIGhB,CAAoB,GHTC,GAAG,AGSxB,CHTR,IDMmB,CAAqB,KAArB,CAAP;AACH,AIID,OJNO,EIMF,IJJE,YIIP,CAAsB,MAAtB;AJHI,AHSR,AOJI,ACCuB,IJZlB,GJeJ,EOJI,ACCkB,ERGlB,CAAC,CQHiB,ELNZ,AHSF,CAAb,AQH2B,ERGX,CAAC,AOJb,CJLgB,AKMO,EDDL,CPID,KOJO,CAAC,IERZ,CFQK,GAAe,IJLtB,CAA2B,CHSrB,CAAA,GGTN,CAAP,SIK6B,CAAA,IPIhB,CAAmB,UAAxC,EAAoD,CAAC,AOJhB,CAAmB,CPIxD,EAAyD,OOJrD;AJJC,AHQoD,ASXrD,AFQA,ACjBa,SDiBR,ACjBQ,CRoBR,CAAgD,ESX9C,KAAK,CFQZ,GAAkB,GERlB,CFQsB,ACjBT,CHWH,EGXuB,KHWX,GGXmB,CAAC,ODiBpB,CAAA,MCjBW,CAAwB,UDiBvC,CAAsB,MAAM,CAAC,GCjBd,CAApB,MDiB2B,CAAkB,IAAlB,CAAtB,EAA+C,KAAK,UAApD,CAAlB;AJJH,AHcA,ASjBA,AJEG,AEOA,AClBa,SDkBR,AClBQ,EHWR,GAAL,CAAS,MAAT,AGXa,CHYT,EGZwB,EDkB5B,CFNS,KGZ2B,CAAC,IHYjC,GAAkB,KAAK,CAAC,CGZA,CAAwB,MHYhD,GAAmC,KAAK,KGZhB,CAAf,IHY0B,GAAkB,CADzD,EAEI,KAAK,UAAL,IAAmB,KAAK,CAAC,GAAN,GAAY,CAA/B,IAAoC,KAAK,UAAL,GAAkB,CAF1D;ADSJ,ACLC,AEIA,AClBgB,SAAA,YAAA,SJmBU,YAA3B,EAAqD,0CIlBhD,QAAA,CAAA,MAAA,CAAO,QADK,EACM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CADN,uCAEZ,QAAA,CAAA,MAAA,CAAO,QAFK,EAEM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CAFN;AR0BjB,AIPqD,AIdpC,SRqBV,AQrBU,KRqBjB,UQrBiB,uEACZ,gBAAA,CAAA,cAAA,CAAe,IADH,EACU,MADV,0CAEZ,gBAAA,CAAA,cAAA,CAAe,WAFH,EAEiB,aAFjB,0CAGZ,gBAAA,CAAA,cAAA,CAAe,eAHH,EAGqB,YAHrB,0CAIZ,gBAAA,CAAA,cAAA,CAAe,YAJH,EAIkB,SAJlB,0CAKZ,gBAAA,CAAA,cAAA,CAAe,gBALH,EAKsB,kBALtB,0CAMZ,gBAAA,CAAA,cAAA,CAAe,iBANH,EAMuB,mBANvB,0CAOZ,gBAAA,CAAA,cAAA,CAAe,kBAPH,EAOwB,oBAPxB;ARsBpB,AQZ0D,CRT9C,mCGOe,CMHA,MNGY,EMHE;ANIlC,AMHA,ALQiD,UDL7C,CAAC,AMHA,IAAI,CNGC,AMHA,GAAG,CNGR,CAAU,GMHG,ONGb,AMHQ,AJKC,CFFY,AMHA,KNGrB,CAAL,AMHa,AJKe,EFFM,CMHC,CAAnC,CJKsC,CILA,CAAC,IAAI,CAA3C,EAA8C,CAAC,EAA/C,EAAmD;ANI/C,AMHA,AJKJ,UAAM,CAAC,CILC,EJKE,CFFC,EMHE,EJKE,KILP,CAAa,CAAb,EAAgB,CJKd,EFFC,CAAA,AEEiB,CEGX,CERT,GJKyB,CAAC,CILC,CFQN,KERzB,CNGO,AEED,CFFgB,AMHiB,EJKE,KILK,AJKA,IFF9C,CMHmD,KJKV,EILK,CAAa,AJKA,CILb,AJKlD,EILkE,IAAvB;ANI1C,AMHA,ALMsB,ACDvB,AEGA,SHFuB,CCDjB,AEGA,CFHC,GAAG,KAAK,EDCQ,GAAA,AGEH,GAAG,EFHb,GEGkB,CFHC,GDCN,AGEA,CAAU,CFHC,CAAC,GAAN,GAAY,CAA/B,IAAoC,AEGvB,CAAwB,IFHI,CEG5B,CAAvB,QFH8C,GAAkB,CAAhE;ADTI,ACWJ,AEEA,MAAA,GHbI,ECWC,EEEE,CFFP,AEEQ,CFFC,EEET,CAAY,OFFZ,CDXI,ACYA,CADJ,AGHU,EJRc,ACapB,CAFJ,EAGI,AEDJ,KHbwB,ACcf,CDde,KIQiB,CJRjB,CAAO,ECc3B,GAAkB,GDdlB,ACcqB,CAAC,QAAtB,GAAiC,CAAjC,GAAqC,KAAK,UAAL,GAAkB,CAH3D,EAII,KAAK,UAAL,IAAmB,GAAG,CAAC,GAAJ,GAAU,CAA7B,IAAkC,CAAlC,GAAsC,KAAK,UAAL,GAAkB,CAJ5D;AFFA,AMJA,ALHI,ACeP,AGRG,SJPI,EDOC,AKAA,ECJE,ENIP,CAAU,CMJV,ELHI,GAAsB,IAAtB,KDOJ,CAA0B,EKA1B,GLAA;AMHH,ALHe,AGYZ,ACLA,SJPY,EIOP,GDKG,OHZI,IIOZ,CAAoB,EDKpB,YCLA,8CJP8B,QAAA,CAAA,MAAA,CAAO,QAAzB,EAAoC,CAApC,uCAAwC,QAAA,CAAA,MAAA,CAAO,QAA/C,EAA0D,CAA1D;ADQZ,ACNI,AGWA,ACLJ,SJNI,CDMA,CKAC,EDKI,EJLA,IAAL,CAAU,GCNV,GAAiB,CACrB,EGUS,ACLT,CLAI,AIKK,CJLgB,KAArB,CAAJ,EAAiC,KIKxB,CAAe,gBAApB;AJJA,ACNF,AGWE,ACLJ,MJNE,IAAI,CIMD,CJNG,CGWC,EJLE,QKAX,MHOS,AEFA,CAAA,CJLE,CAAA,YIKF,CAAe,CJLb,CAAe,IAAtB,YIKA;AJJH,ACPS,ACcV,AEFQ,ACLX,QJPa,GAAG,ACcR,EDdU,CAAP,ACcR,CAAS,AEFI,MFEb,gBEFQ;AHZU,ACerB,AEFW,QHbU,GAAG,EAAE;ADQvB,ACRQ,OAAR,IDQK,IAAL,CAAU,iBAAV;AACA,AM7BR,ALoBsC,AGc1B,MHd0B,CKpBtC,CAAA,ALoBwC,EAAE,GDS3B,AIKE,OElCjB,GAAA,MN6Be,AIKE,CJLF,AIKE,KElCjB,SN6Be,AIKE,CJLa,AIKE,CCLG,cDKvB,CJLJ;AACH,ACVuC,AGe5B,ACLR,QJVoC,EIU9B,CJViC,EAAE,CAAP,CGerB,UCLQ,GAAG,GHOV,CEFN,CAAuB,KFEH,AEFpB,OCLgB,CHOkB,AGPlB,kBAAA,CAAmB,KAAK,IAAL,CAAU,aAA7B,CAAxB;AJV4C,ACkB5C,AEFQ,ACLR,QJX4C,GAAG,ACkB1C,AGPA,EJX4C,QCkBjD,CAAgB,KAAhB,CGPA,CHOuB,AGPA,MHOvB,GGPA,GAAmC,eAAe,CAAC,KAAnD;AJXkC,ACmBlC,AGPA,WHOK,AGPA,GHOL,CAAS,IAAT,SGPA,CAAuB,KAAvB,CAA6B,KAA7B,GAAqC,eAAe,CAAC,KAArD;AJZA,ACoBH,AEHO,ACJP,KJdwB,EAErB,MGgBS,gBAAA,CAAA,YJLiB,EIKjB,CAAe,IJLc,QIKlC;AJJJ,ACZE,AGiBM,MHjBN,IDYE,ACZE,CDYD,CCZG,GGiBK,CJLH,WAAV,EAAuB,QIKf;AJJJ,ACbM,AGkBF,QHlBE,GAAG,EAAE,CAAP,CDaG,AIKE,KJLG,OIKR,CAAkB,KAAlB,IJLG,CAAuB,KAAvB,CAAP;AACH,ACdiB,AGmBV,QHnBU,GAAG,EAAE,oBCoBP,EGNG,KHMW,QAAc,GGNM;AJd1C,ACqBR,AGNA,OJfA,ICqBK,AGNA,UHML,CAAgB,CGNhB,CAAkB,GHMlB,EAAuB,IGNvB,EHMA,CGN8B,KAAK,eAAL,CAAqB,cAArB,KAAwC,MAAtE;ALAA,ACf8B,ACsB9B,AEFI,ACJP,MJhBiC,EAAE,EAAE,CCsB7B,EFPE,AIKE,CFET,CAAS,GFPG,GEOZ,QEFS,CAAA,KJLF,CAAuB,KAAvB,CAAP,EIKS,CAAe,IAApB;AJJP,AChBuC,ACuBvC,AEFW,QHrB4B,GAAG,EAAE,CAAP,CGqBrB,sBAAL;AHrBoC,AGsBpC,QHtBoC,GAAG,EAAE,EGsBpC,qBAAL;AHtB0B,AGuB1B,yCCLc;AJlBtB,AImBA,KJrBqB,CAAjB,AIqBJ,OAAO,CAAC,GAAR,CAAY,KAAK,IAAL,CAAU,IHMP,MFPO,CEOO,IGNjB,ELDsB,AKClC,EHM2C;AFN3C,ACfA,ACsBA,AEFI,ACJP,SJhBQ,CDeC,CEOD,EEFI,KJLK,GAAG,AEOjB,CAAgB,CDtBhB,GDesB,ACfA,CCsBtB,EAAuB,AEFd,CJLQ,ACfS,AGoBjB,CJLkB,IEO3B,QFPiB,CAAuB,AIK/B,CAAe,CHpBE,CAAA,EDeT,CAAjB,MIKI,KHpBkB,CAAmB,IAAnB,CAAtB;AACA,ACsBA,AEFQ,SHpBH,ECsBA,GAAL,CAAS,IAAT,MDtBA,GAAwB,iBAAiB,CAAC,aAAlB,EAAxB;ADeA,ACdA,ACsBA,AEpBA,SHFK,CDcD,CAAC,AEQA,GDtBL,ACsBA,CAAS,EDtBI,EDcT,IAAa,CEQjB,CAAmB,CAAnB,EAAsB,CAAtB,EFRyB,AEQA,CFRC,ECdI,CAAC,CCsBD,EFRb,CEQQ,CAAS,GFRG,CCdxB,EAAb,ACsByB,CAAgB,CFRC,IAAL,AEQrC,CFR+C,CEQC,KAAK,GAAL,CAAS,GFRzD,EAA8D,CEQd,CAAgB,MAAhE;AFPI,ACdP,ACsBA,eFRc,gBAAA,CAAA,GKCK,WLDL,CAAe,WAAtB;AACH,AIKD,ACLgB,WDKX,WAAL,CAAiB,cAAjB;AACH;AJLG,AKAA,MAAA,KLAK,CKAC,CAAC,OAAP,CAAe,CLAf,GAAmB,CKAC,IAAL,CHQJ,AGRc,YAAzB,EAAuC,OAAvC,CAA+C,gBAAqB;ALA/C,AESrB,AGToE,QLA/C,GEShB,EFTqB,CES1B,CFTqB,AESZ,KFTU,IESnB,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KDvBN,ACuBW,GAAL,CAAS,GDvBH,GCuBN,CAAgB,KAAzC,EAAgD,KAAK,GAAL,CAAS,MAAT,CAAgB,MAAhE;AFT4B,ACb5B,ACuBA,AGVoE,QLAxC,ECbxB,CCuBC,CGV4C,EHUjD,CDvBS,ACuBA,GFV6B,AKA8B,ELA5B,IEUxC,CFV6C,IAAL,CAAU,CCb9C,CAAsB,GGoBP,GHpBnB,EAAkC,GDaM,AIOI,CJPoB,KAAxB,CAArB;AAAqD,ACZpE,ACuBP,AEHG,ACRoE,MDQpE,EJRwE,ICZ9D,AGoBJ,ACRmD,CDQlD,CJRuE,EAAE,EIQhF,ACRoE,CDQvD,CHpBK,CDYmE,ECZhE,CGoBrB,CJRgF,CAAU,CIQrE,CHpBK,KAAL,AGoBrB,CHpBgC,IAAX,CAAgB,UAAA,CAAC;ADYnB,ACZmB,AGqBtC,MAAA,CJTA,KISM,CAAC,IHrBmC,CGqB1C,CAAa,KHrB6B,CAAA,AGqB1C,GAAsB,MAAtB,KHrB0C,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;ADatC,ACbsC,AGsBtC,ACTI,MDSJ,ECTI,CJbiB,CAAjB,EGsBE,CJTC,AISA,ACTC,CAAC,IDST,GAAe,KCTX,CDSiB,ACTC,CDSA,CJTf,CAAA,GKAH,EAA0B,IDS9B,KJTO,AKAH,CLAkB,EKAoB,MAAM,GAAG,EAA/C,ELAJ;AACH,ACbO,AGsBJ,ACTC,MDSD,CCXA,CJXI,IGsBE,CAAC,GHtBK,CAAC,EGsBb,GAAgB,CHtBZ,GAAkB,EGsBA,CFEV,AEFW,KHtBO,ACwBW,CDxBV,MAAT,AGsBtB,KHtB0C,QAAA,CAAA,MAAA,CAAO,SAA3B,GAAuC,KAAK,iBAA5C,GAAgE,QAAQ,CAAC,MAA3F;AACA,ACwBJ,AEFH,ACTA,UHWS,GDxBG,ACwBA,GAAG,IAAI,CAAC,IDxBb,CAAkB,ACwBV,CAAW,GAAG,CDxBC,ACwBA,CAAJ,GAAQ,KAAK,IDxBhC,MCwBQ,CAAZ;ADvBI,ACwBJ,UAAM,GDxBG,ACwBA,GAAG,IAAI,CAAC,IDxBb,CAAkB,ACwBV,CAAW,GAAG,CAAC,CAAJ,GAAQ,KDxB3B,ACwBgC,CDxBC,KAAjC,EAAwC,ECwBhC,CAAZ,EDxBiD,aAA7C;AACH,ACwBD,OD7BA,MAKO,ACwBA,MDxBM,CCwBN,CAAA,GDxBW,CAAC,YCwBZ,CFZe,AEYE,GAAjB,EAAsB,EFZK,CEY3B,CAAP,QDxBkB,CAAX;ADaP,ACZH,ACwBA,UFZS,WAAW,GAAG,KAAK,WAAL,AISC,CJTgB,UAAjB,CAA4B,IAA5B,CAAiC,UAAA,CAAC;AAAA,AIUtD,WAAK,IJVqD,KIU1D,EJV0D,CAAA,cAAA,CAAe,CAAf,EAAkB,KAAlB,CAAJ;AAAA,AIWtD,OJXoB,CAApB,GIWK,QAAL;AACH,AC3DL,OAAA,CAAA,cAAA,GAAA,MH6DuB,OAAc,CG7DrC,CJqC4B,MCwBuB;AFZ3C,ACXA,ACwBA,UFbI,ACXA,ACwBE,CFbD,ICXI,ICwBM,GFbf,AEakB,EFbA,GEaK,CAAC,GDxBpB,CAAsB,ICwBR,EDxBlB,CCwBmC,CDxBD,ICwBM,UAAtB,GAAmC,KAAK,UAAL,GAAkB,CAAvE;AFZI,ACXA,ACwBJ,UAAM,GFbG,ACXA,MCwBM,GAAG,CAAC,CFbf,GAAmB,CEaC,CAAC,CDxBrB,CDWA,CEae,CDxBU,ECwBE,CAAb,EDxBgB,ECwBE,KAAK,SDxBZ,CAAsB,ACwBjC,GDxBW,ACwByB,EDxBlD,GCwBuD,UAAL,GAAkB,CAAxE;AFZI,ACXH,ACyBD,OD3BA,IC2BK,EDzBE,CCyBP,CFdW,AEcF,SAAT,OFdW,AIUC,CJVD,cAAA,CAAe,YAAtB;AACH,ACXG,ACyBJ,AELY,WFKP,EDzBI,CCyBT,CAAS,GAAT,CAAa,SAAb,EDzBI,ACyBoB,GDzBK,MCyB7B,EDzB6B,ACyBM,CDzBN,KCyB7B,EAA2C,CAA3C,EDzB6B,ACyBiB,CDzBN,GCyBU,EDzBL,ECyBS,CAAC,EAAvD,YDzB6B,CAAzB;AACH,ACyBJ;AFbG,ACXH,AGmBG,WJRK,AIQA,IJRL,AIQA,CJRU,AIQA,KAAV,CAAgB,GJRhB,CAAoB,GIQpB,CAAwB,CJRC,SIQA,EJRL,CAAiB,EIQb,EAAyB,CJRjD,EAA4C,KAA5C;AACA,AIQI,WJRC,CIQK,SAAS,CJRnB,EIQsB,CJRH,IAAnB,YIQsB,CAAA,kBAAA,CAAmB,KAAK,CAAC,MAAzB,CAAlB;;AJPJ,AISI,UJTA,EISI,GJTC,EISI,CAAC,CJTV,CAAU,IISN,KAAiB,CJTrB,CAAqB,GCXR,EDWb,CAAJ,AISyB,CAAA,CJTQ,ECXJ,GGoBJ,CAAO,SAA5B,EAAuC;AJRvC,ACXJ,AGoBQ,UAAA,GHpBD,EDWI,AISC,CAAC,EHpBD,QGoBJ,CAAgB,IJTb,CAAA,ACXJ,CAAoB,EGoBnB,CAAyB,KHpB1B,AGoB8B,CHpBD,AGoBE,IJT3B,CAAe,ACXnB,CAAP,GDWI,CISI;AJRP,ACXJ,AClDL,OAAA,CAAA,iBAAA,GAAA,iBAAA;AEsEgB,UAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB,CAA2B,KAAK,CAAC,KAAjC,EAAwC,SAAS,CAAC,MAAlD;AJRR,AISK,SAHD,EJNC,IAAL,AISW,CJTD,iBAAV;AACA,AISQ,UAAA,GJTD,EISK,CAAC,UAAL,CAAgB,EJTjB,CAAA,ACXM,KGoBL,CHpBkB,AGoBO,IHpBE,IDW5B,CAAe,AISoB,CAAC,KAAnC,UJTR;AACH,ACXG,UAAM,YAAY,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAA,CAAC;AAAA,AGoB9B,UAAA,KHpBkC,AGoB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","file":"app.af35efec.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Point extends PartialPoint {\n    colIndex: number;\n}\n\ninterface PartialPoint {\n    row: number;\n    col: string;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Point {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function pointFromIndexes(row: number, col: number): Point {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function arePointsEqual(point1: PartialPoint, point2: PartialPoint) {\n    return point1.row == point2.row && point1.col == point2.col;\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { BoardPosition } from './BoardPosition';\nimport { point } from './Point';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): BoardPosition[] => {\n    const columns = [\n        ['a', 'd', 'g'],\n        ['b', 'd', 'f'],\n        ['c', 'd', 'e'],\n        ['a', 'b', 'c', 'e', 'f', 'g'],\n        ['c', 'd', 'e'],\n        ['b', 'd', 'f'],\n        ['a', 'd', 'g'],\n    ];\n    const board: BoardPosition[] = [];\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.push({\n                player: Player.NO_PLAYER,\n                point: point(i, col),\n            });\n        });\n    }\n    return board;\n};\n","export enum GamePhase {\n    INITIAL,\n    NORMAL,\n}\n","export enum GameMoveResult {\n    SUCCESSFULL_MOVE,\n    FIRST_MOVE_PART,\n    RESTART_MOVE,\n    CANNOT_MOVE,\n    MILL,\n    OPPONENT_DESTROYED,\n    INVALID_MILL_MOVE,\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { arePointsEqual, Point } from './Point';\nimport { GamePhase } from './GamePhase';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Player } from './Player';\n\nexport class GameMoveEngine {\n    private currentMove: CurrentMove = null;\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Point): GameMoveResult {\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentPhase == GamePhase.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Point) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFULL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Point): GameMoveResult {\n        if (!this.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Point): GameMoveResult {\n        const position = this.game.findPosition(point);\n        if (!position || position.player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Point): GameMoveResult {\n        const pointToMove = this.currentMove.neighbours.find(p => arePointsEqual(p, point));\n\n        if (!pointToMove) {\n            this.currentMove = null;\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.currentMove.point, point);\n        this.currentMove = null;\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFULL_MOVE;\n    }\n\n    private makeMillMove(point: Point): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n\ninterface CurrentMove {\n    point: Point;\n    neighbours: Point[];\n    player: Player;\n}\n","import { nextPlayer, Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { arePointsEqual, Point } from './Point';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GamePhase } from './GamePhase';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Move, MovesHistory } from './MovesHistory';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n    public readonly board: BoardPosition[];\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n    private gameMoveEngine: GameMoveEngine;\n    private millPlayer?: Player = null;\n    public readonly playerPoints = { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 };\n\n    private cannotGoPoints = [\n        { from: { row: 4, col: 'c' }, to: { row: 4, col: 'e' } },\n        { from: { row: 3, col: 'd' }, to: { row: 5, col: 'd' } },\n    ];\n\n    public constructor(private movesHistory: MovesHistory) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.initialHandQueue = InitialGameHelper.initHandQueue();\n        this.board = InitialGameHelper.initBoard();\n    }\n\n    public addInitialPoint(point: Point) {\n        if (this.initialHandQueue.length) {\n            const position = this.board.find(p => arePointsEqual(p.point, point));\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(point, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.initialHandQueue.length) {\n            this.currentPlayerMove = this.initialHandQueue.pop();\n        } else {\n            this.currentPlayerMove = nextPlayer(this.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(point: Point): GameMoveResult {\n        return this.gameMoveEngine.makeMove(point);\n    }\n\n    public movePoint(from: Point, to: Point) {\n        const fromPosition = this.board.find(p => arePointsEqual(p.point, from));\n        const toPosition = this.board.find(p => arePointsEqual(p.point, to));\n\n        if (toPosition.player === Player.NO_PLAYER) {\n            toPosition.player = fromPosition.player;\n            fromPosition.player = Player.NO_PLAYER;\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedPoint: Point): boolean {\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(changedPoint);\n\n        const checkMill = (inLineArray: BoardPosition[], point: Point): boolean => {\n            const inLineIndex = inLineArray.findIndex(p => arePointsEqual(p.point, point));\n            for (let i = 0; i < inLineArray.length; i += 3) {\n                if (inLineIndex >= i && inLineIndex < i + 3) {\n                    const currPlayer = inLineArray[inLineIndex].player;\n                    let millCount = 0;\n                    for (let j = 0; j < 3; j++) {\n                        if (currPlayer == inLineArray[i + j].player) millCount++;\n                    }\n                    if (millCount == 3) return true;\n                }\n            }\n            return false;\n        };\n\n        const isMill = checkMill(colsInLine, changedPoint) || checkMill(rowsInLine, changedPoint);\n        this.millPlayer = isMill ? this.currentPlayer : null;\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.millPlayer !== null;\n    }\n\n    public isNoPlayer(point: Point): boolean {\n        const triedPosition: BoardPosition = this.findPosition(point);\n        return triedPosition && triedPosition.player == Player.NO_PLAYER;\n    }\n\n    public findPosition(point: Point): BoardPosition {\n        return this.board.find(p => arePointsEqual(p.point, point));\n    }\n\n    public isOpponentPoint(point: Point): boolean {\n        const position = this.findPosition(point);\n        return this.isOpponentPosition(position);\n    }\n\n    private isOpponentPosition(position) {\n        return position && position.player != Player.NO_PLAYER && position.player != this.currentPlayer;\n    }\n\n    public possibleMoves(point: Point): Point[] {\n        const previousPoint: Point = this.movesHistory.getPreviousPoint(this.currentPlayer);\n        return this.findNeighbours(point)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousPoint && arePointsEqual(previousPoint, p)));\n    }\n\n    public allOpponentPositions(): BoardPosition[] {\n        return this.board.filter((position: BoardPosition) => this.isOpponentPosition(position));\n    }\n\n    public findNeighbours(point: Point): Point[] {\n        if (this.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.board.filter(p => p.player === Player.NO_PLAYER).map(p => p.point);\n        }\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(point);\n        const neighbours: Point[] = this.findNearestPoints(point, colsInLine, rowsInLine);\n        this.filterNeighboursImpossibleToGo(point, neighbours);\n\n        return neighbours;\n    }\n\n    public get currentPhase(): GamePhase {\n        return this.initialHandQueue.length ? GamePhase.INITIAL : GamePhase.NORMAL;\n    }\n\n    public get currentPlayer(): Player {\n        return this.currentPlayerMove;\n    }\n\n    private findColsAndRowsInLine(point: Point): FindInLinePointsResults {\n        return this.board.reduce(\n            (acc, curr) => {\n                if (arePointsEqual(curr.point, point)) {\n                    acc.rowsInLine.push(curr);\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.colIndex === point.colIndex) {\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.row === point.row) {\n                    acc.rowsInLine.push(curr);\n                }\n                return acc;\n            },\n            { colsInLine: [], rowsInLine: [] },\n        );\n    }\n\n    private findNearestPoints(point: Point, colsInLine: BoardPosition[], rowsInLine: BoardPosition[]): Point[] {\n        const sameColumnsIndex = colsInLine.findIndex(p => arePointsEqual(p.point, point));\n        const sameRowsIndex = rowsInLine.findIndex(p => arePointsEqual(p.point, point));\n\n        return [\n            colsInLine[sameColumnsIndex + 1],\n            colsInLine[sameColumnsIndex - 1],\n            rowsInLine[sameRowsIndex + 1],\n            rowsInLine[sameRowsIndex - 1],\n        ]\n            .filter(x => x)\n            .map(p => p.point);\n    }\n\n    private filterNeighboursImpossibleToGo(point: Point, neighbours: Point[]) {\n        this.cannotGoPoints.forEach(({ from, to }) => {\n            if (arePointsEqual(point, from)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, to));\n                neighbours.splice(i, 1);\n            } else if (arePointsEqual(point, to)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, from));\n                neighbours.splice(i, 1);\n            }\n        });\n    }\n\n    public removePoint(point: Point) {\n        const boardPosition = this.findPosition(point);\n        this.playerPoints[boardPosition.player]--;\n        boardPosition.player = Player.NO_PLAYER;\n    }\n\n    public clearMill() {\n        this.millPlayer = null;\n    }\n\n    public getMovesHistory(): Move[] {\n        return this.movesHistory.getHistory();\n    }\n}\n\ninterface FindInLinePointsResults {\n    colsInLine: BoardPosition[];\n    rowsInLine: BoardPosition[];\n}\n","import { Point, pointFromIndexes } from '../game/Point';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(point: Point) {\n        this.ctx.moveTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(point: Point) {\n        this.ctx.lineTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Point, end: Point) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.stroke();\n    }\n\n    public clearCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.clip();\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getPoint(pos: { x: number; y: number }): Point {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return pointFromIndexes(row, col);\n    }\n\n    private drawCircle(point: Point, radius: number) {\n        const xPosition = point.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (point.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { Point, point } from '../game/Point';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n    }\n\n    private onMouseClick(point: Point) {\n        const gameMoveResult = this.game.tryToMakeMove(point);\n        console.log(gameMoveResult);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFULL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n        this.afterUpdate(gameMoveResult);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.board.forEach((board: BoardPosition) => {\n            const paintable = getPaintablePlayer(board.player);\n\n            if (board.player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Point) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(position => {\n            this.gameCanvas.strokeCircle(position.point, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            this.onMouseClick(point);\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { Player } from '../game/Player';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('current-move-info');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly moveTypeToLabel = {\n        [GameMoveResult.MILL]: 'Mill',\n        [GameMoveResult.CANNOT_MOVE]: 'Cannot move',\n        [GameMoveResult.FIRST_MOVE_PART]: 'First move',\n        [GameMoveResult.RESTART_MOVE]: 'Restart',\n        [GameMoveResult.SUCCESSFULL_MOVE]: 'Successfull move',\n        [GameMoveResult.INVALID_MILL_MOVE]: 'Invalid mill move',\n        [GameMoveResult.OPPONENT_DESTROYED]: 'Opponent destroyed',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update(gameMoveResult?: GameMoveResult) {\n        this.updateCurrentPlayerText();\n        this.updateMoveInfo(gameMoveResult);\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateMoveInfo(gameMoveResult?: GameMoveResult) {\n        this.moveTypeText.innerText = this.moveTypeToLabel[gameMoveResult] || 'None';\n    }\n\n    private updateHistoryMoves() {\n        console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { Point } from './Point';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public addInitialMove(point: Point, player: Player) {\n        this.addMove({ to: point, player });\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public getPreviousPoint(player: Player): Point | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (this.history[i].player === player) return this.history[i].from;\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Point;\n    to: Point;\n    player: Player;\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame(new MovesHistory());\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n    const drawer = new GameDrawer(canvas, game, type => infoWriter.update(type));\n\n    infoWriter.update();\n})();\n"]}