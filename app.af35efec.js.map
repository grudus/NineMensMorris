{"version":3,"sources":["app/game/Player.ts","app/game/Coordinate.ts","app/game/InitialGameHelper.ts","app/game/GameState.ts","app/game/GameMoveResult.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/game/BoardService.ts","app/index.ts"],"names":[],"mappings":";;;;;ACSA,AGTA,ADAA,AHAA,ICSM,AGTM,ADAA,AHAA,MCSA,ADTZ,GCSe,AETf,IFSmB,CGTnB,SHSe,CAAe,CAAf,CAAf;ACTA,AWAA,ALAA,INAA,AWAA,ALAA,QNAA,AMAA,GNAA,AMAA,ONAA,AMAA,CNAA,AMAA,CKAA,GAAA,MXAA,CAAA,AWAA,CAAA,ILAA,CAAA,sBKAA,CAAA;AZWA,AGXA,ADAA,AHAA,CIAA,ADAA,AHAA,QCWgB,EGXJ,ADAA,AHAA,GCWZ,CAAsB,EDXtB,CCWA,CDXkB,CCWiB,AEXnC,EAAqB,CFWrB,EAA8C,AGX9C,EAA0B;AHYtB,AGXA,ADAA,ADAJ,AFAI,AaAJ,ALOA,EJPI,ADAA,AHAA,EEAJ,AWAA,ALOM,IRPF,CCWO,ADXP,EGAA,AKOS,CLPT,EKO0C,CRP1C,CIAA,AJAA,AaAJ,CTAI,CIO8C,CKPlD,EVAI,AKO0C,CLP1C,CKOJ,CNPA,EFAI,AaAJ,CXAA,AFAI,AaAJ,GbAI,CIAA,ADAA,AHAA,CIAA,ADAA,AHAA,EEAJ,CCAI,ADAJ,AFAI,CGAA,CAAA,GAAA,KHAA,EaAJ,CAAA,CTAI,ADAA,CCAA,GAAA,CAAA,CAAA,EFAJ,CEAI,AFAJ,iBEAI;AHWS,AGVT,ADAA,AHAA,AQOJ,EJPI,ADAA,AHAA,ECUS,GAAG,AOHT,CRPH,AQOI,CPGK,ADVT,EGAA,AKOJ,CPGW,AEVP,AKOQ,GRPR,CIAA,AJAA,CIAA,GIOQ,CLPR,AKOQ,CLPR,IHAA,CAAA,AQOQ,CAAO,ERPf,CIAA,AJAA,CIAA,AJAA,GAAA,CQOJ,EAA6B,MLPzB,CAAA,AHAA,GGAA,CCAA,ADAA,CCAA,ADAA,GCAA,ADAA,CCAA,CAAA,GAAA,iBAAA,ADAA;AFUc,AGTd,ADAA,ADAJ,AFAI,AaDJ,ALO+B,EJN3B,ADAA,AHAA,AQM2B,EPGb,ACTlB,AWDA,GZUqB,AOHe,CRNhC,CCSc,ADTd,AQMkC,ELNlC,CFSO,AETP,EKMyB,CRNzB,CIAA,AFAJ,AFAI,CIAA,EFAJ,CWDA,CVCI,CAAA,CUDJ,GXCA,CAAA,AFAI,CAAA,EaDJ,CTCI,AJAA,AaDJ,CTCI,AJAA,CAAA,GAAA,KEAJ,CAAA,CCAI,CAAA,ECAA,CAAA,ADAA,AHAA,CGAA,CAAA,CCAA,CAAA,CAAA,ADAA,GCAA,ASDJ,CAAA,aTCI,IDAA;AFSmB,AGRnB,ADAA,AHAH,AQK4C,CRT7C,CIII,ADAA,AKKyC,CRTjC,CCYW,IOH4B,CRTjC,CQSmC,CLLjD,CFQ2B,AER3B,AHJQ,AQSiB,EPGI,EGR7B,CHQgC,AGRhC,CHQiC,CDZzB,CAAA,CGIR,CAAA,IHJQ,ECYqB,AER7B,CFQ4C,AER5C,CFQ6B,CGR7B,AJJQ,CIIR,ADAA,CAAA,CFQiD,AERjD,GAAA,CHJQ,CAAA,IGIR,ECAA,AJJQ,CIIR,EJJc,CIId,CAAA,AJJQ,CIIR,AJJJ,GIII,aAAA;AQHJ,AXWW,AIXX,ADII,ADAA,ADAS,ASLb,AEGA,ANHA,AEAA,ADSyD,EJJrD,ADAA,AKIqD,CPGrD,CWXJ,APAA,AMDA,AEGA,ANHA,AEAA,GPKa,AMIiD,CNJjD,CMImD,ELJ5D,CAAA,IEJJ,ADII,AOLJ,AJAA,CHKI,CSFJ,CRFA,AMDA,AJAA,EJKI,ADAS,AWFb,CVEI,CSJJ,CVI6B,AOL7B,EGCA,APAA,AMDA,AJAA,CFCA,AMDA,AJAA,AEAA,CIGA,CAAA,ETEI,CAAA,CQJJ,ATII,CSJJ,ATII,AMLJ,CAAA,CPK4C,CCAxC,CCAA,ADAA,CCAA,ADAA,EEJJ,AMDA,CNCA,ADII,ADAA,AQLJ,CPKI,CAAA,GAAA,AGLJ,CAAA,EMGA,CAAA,ETEI,ADAA,ESJJ,CAAA,OHDA,CAAA;ARaC,AGPG,ADAH,ADAG,AFAS,AQGgB,CLT7B,AKSA,CJHI,CDNQ,GDMF,CFAG,CAAA,GEAE,CCNM,EDMH,CCNN,CCMR,AFAA,CEAA,CJAS,GAAa,CGNd,CAAA,QCMR,AJAuB,CIAvB,ADNQ,KAAA,AHMc,OGNd,CAAA,OCMR,CAAA,CDNQ,ECMR,CAAA,ADNiB,CCMjB,CDNQ,CAAZ,CCMI,oBAAA;AQJJ,APAA,ADKI,AFAA,AFDsB,AaF1B,AJFA,ADQA,EJHI,EQLJ,APAA,AMCa,AECb,ANFa,AEAb,EPKU,CMGH,CAAC,CRJ+C,EQIvD,CAAY,CNHK,EGLjB,ALI6D,CYJ7D,ARKI,AFAgB,AOLpB,CLKI,AFAiB,CGLrB,AQEA,CDFA,AHAA,CTIkE,AQItD,CKNZ,ALMY,IHRZ,AHKqB,CULrB,APAA,AHKqB,AFDmD,ASJxE,CGAA,AZIyE,ASJzE,ADQY,CKNZ,ALMmB,CKNnB,ETGI,CAAA,AFAiB,CAAO,EFD2B,CQIvD,ERJoF,AQIvD,CHR7B,CAAA,COAA,AVKoB,CULpB,CVKsC,CFDoD,CAAC,ESJ3F,CAAA,EIEA,CTGI,AFAkC,AWHtC,CTGI,AFAkC,CFDiB,EICnD,CAAA,AJDkG,CIClG,CFAkC,CAAO,CEAzC,EJDwG,CAAC,IECzF,CAAhB,GFDsB,QICtB;AHIJ,AGHC,AJFyB,AQIK,CJV/B,AJMa,CQIkB,CJVnB,IHWZ,AODoC,CPCpC,CODsC,IPCtC,EOD6B,CPC7B,CGX0B,GAAd,CHWZ,MGXY,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ;ACGA,AHKI,AWFJ,AJHA,ADO8C,CKJ7C,CLI6C,EILjC,APFb,AIAA,GPKS,CME2C,EAAE,CNFzC,CAAC,AMEe,CKJ5B,EXEgB,CAAb,EAAgB,CAAC,CGLrB,EHKwB,CGLxB,AIAA,GAAA,IJAA,CAAA,EIAA,CAAA,QPKwB,CAAA,MGLxB,CAAA,KIAA,CAAA,KPKwB,CAAmB,gBAAnB,GAAsC,CAA1D,EAA6D,CAAC,EAA9D,EAAkE;ADOtE,ACNQ,ASNR,AEII,ANJA,ACOsD,EKHtD,ALGsD,ENDlD,GMCuD,EPK/C,ACNH,AWFF,ALGsD,CNDnD,AWFF,GAAR,CXEI,AWFQ,CXEG,OAAO,CAAC,CAAC,ESN5B,CTM+B,EKNA,ENY/B,CAAuC,AMZnC,ELMkC,AKNgC,CNYtE,ACNuC,EDMa,GAApD,CCN0B,CDMqC,ACNvD,EKNJ,EAAoF,KMIpF;AZSA,ACNC,ASPL,AEMI,ANNoF,AECxF,ADM6B,CAA7B,GHJa,AIFb,EIKU,GZOC,CYPG,EJLd,CIKiB,EJLjB,EIKqB,KJLrB,CAAA,cIKqB,CAAA,CJLrB,CAAA,gBIKiB,CAAuB,IAAI,cAAA,CAAA,YAAJ,EAAvB,EAA2C,IAAI,cAAA,CAAA,YAAJ,EAA3C,CAAb;ADIA,AXGS,AYNT,ALCJ,IPKa,EYNH,CZMM,AOLT,CAAC,CPKU,EOLlB,CPKqB,AYNL,ALCJ,GPKY,AYNL,CZMR,IOLC,CAAA,EKDe,CAAC,EDGxB,CJFQ,CAAO,SAAnB,CKDmB,CAAwB,ALCb,aKDX,CAAf;ADGA,AXGuB,ACLvB,ASPQ,AEQR,ANT2B,AEE/B,ADMgC,EAAA,EPKL,AQX3B,EIOU,CZIoB,AOLO,EPKL,ACLrB,ASPC,AJDmB,ACQQ,GDRR,ELQ3B,CDKkC,AMbP,CNaQ,AUZ3B,AEQQ,ALDU,EDRC,CICD,AEQP,CJPvB,CEDY,EEQe,AJP3B,KRWgC,CAAoB,CQXpD,CAAA,IRW0D,GAAG,CYJlC,CAAA,CZIK,CAArB,YYJY,CAAmB,AJP1C,CAAA,GIOuB,CAAnB;AZI+D,AIP/D,AHGH,ASaA,AEZG,ANVkE,ACQtB,CNNnC,CMMmC,EPKmB,EYHzD,ELF4C,CDRgB,CCQd,CAA1B,CPK6C,AYH3D,EZG6D,CYH1D,IAAI,ANV+C,GAAA,IFMvC,IAA3B,CQImB,CRJgC,AQIhC,ANV+C,UMUnD,CAAe,MAAf,EAAuB,IAAvB,EAA6B,UAAA,IAAI;ADL/B,AXQV,AIP4C,AQIH,ANVwC,AEG5F,ACLA,AFU2D,EAAA,CPKvD,CQVJ,ACLA,GFUgE,EIH3C,AJG6C,EKEV,UAAU,AJPlE,ACLA,CGYmE,EJPnE,ACLA,IEOqB,ACKmC,CAAkB,EDL/B,AHF3C,ACLA,CEQQ,AHHR,ACLA,CGYwD,CAAJ,iBJPpD,ACLA,CDKA,ACLA;AEQU,AXQT,ACHY,AWDuC,ALFtB,CAA9B,EKEmB,CAAf,EDJM,CVKG,CAAA,EULC,EAAE,KVKH,GAAY,YAAsB;AUL7B,APAa,AHM3B,AWAA,AHZJ,EGYI,EJPS,ACLb,ERYU,EUNQ,CPAa,EOAV,CCMP,AHZd,CEMuB,APAQ,AHMd,AWAF,CDNC,CFNhB,CLM+B,AHMX,CACZ,CAAC,CWDL,CRN2B,CHOvB,CQbR,CRac,AQbd,GRaQ,EAAW,GAAX,CADY,EAEZ,CAAC,GAAD,CQdR,CRcc,AQdd,GRcQ,EAAW,GAAX,CAFY,EAGZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHY,EAIZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAJY,EAKZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALY,EAMZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANY,EAOZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAPY,CAAhB;AUNsB,AXM1B,AIRY,AHiBR,AWRH,ALHY,CKPb,KXkBU,CDTV,AOFa,CIJa,AXM1B,AOFa,CHND,EOEiB,AVed,EUfgB,CVeI,EAA/B,IGjBQ,GAA2B,GGM1B,CHND,CMDO,CHOe,CPElC,GAAA,CUT6B,KHOM,MAAD,UPElC;AWNgB,APA2C,AMFnD,ADHR,AFSkC,IETlC,GEKQ,EJI+D,EGN1D,IDHb,CFS8E,CAAC,CGNvE,ADHR,CCGqB,CHMkD,CAAY,EGN3E,CAAkB,CDH1B,CAAA,CFSuE,CGN/D,AHM0B,CDRd,OAAa,SGDjC,CAAA;AEKsC,AXUtC,ACL+C,ASN1C,AJFG,AEQJ,ADD8B,CAArB,KIJyB,EAAE,CXUxB,CWV0B,CLH7B,GAAL,CAAS,OESD,ERIhB,CAAgC,CMbxB,EEQJ,CPYS,AKpBkB,CLQgB,AOE/B,CRGhB,EAA2D,CMbnD,AEQJ,EAGY,GREhB,EAAoF,MQLhF,EAGiC;AGRO,AXWxC,ACOI,AKpBA,AEU6B,IPU7B,AQrBK,IEG+B,CXWjC,EWXoC,AVkBhC,AKpBF,CLoBG,CUlBiC,AVkBhC,CUlByB,ALFlC,CNaS,AMbA,CNaC,ACOE,CAAL,CAAP,CDPG,ACOY,IDPE,CMbjB,ELoBA,CAAuB,AKpBF,ENaE,CAAC,EMbxB,CNaG,IAA4B,ACOR,GAAG,EAAG,CDPQ,CAAC,GAAP,IAAc,MAAM,CAAC,GAAxD;AWXgD,AXYnD,ACOW,AKpBP,MLoBO,EUnBwC,GAAG,AVmBtC,CAAC,CUnBuC,GVmB7C,CAAW;AUnBmB,AVoB1B,AOdA,QPcA,COdA,KPcM,COdN,CPcQ,EOdR,MPcQ,AOdR,CPcQ,IGlBJ,EHkBI,CAAO,GSnBL,CNCW,KHiBd,MSlB2B,QAAc;ACDxD,AXUR,AIPQ,AHkBQ,ASnBR,AFKQ,ACMZ,KEduC,EAEnC,AXSR,CAAA,ACWgB,COdA,CJJJ,CMDC,EFKG,EJJC,CIID,EPcU,ASnBlB,CNCI,AMDS,CNCC,AHkBM,AOdZ,GRGhB,GAAA,ASG+B,ILVnB,AKUR,ELVI,AHkBoB,AQR2B,CRQ3B,CGlBQ,IHkBR,CAAM,CAAN,CDX5B,CCWqC,GAAT;AUpBlB,APGE,AHeW,ASjBA,ALXvB,AGiBgB,ACKuC,IJtBvD,EMUU,CVkBE,CSjBW,CFMP,CGPF,ADCW,ECDT,ADCW,ALX3B,GAAA,KGiBgB,EENK,ALXrB,CAAA,AGiBgB,IFPE,MDVlB,CAAA,AGiBgB,KFPwB;AKAtB,APIT,AHkBA,ASrB8B,AJA/B,AEDa,KPiBb,GUjBU,ADCqB,CFDlB,EGAA,ALCR,EKDU,CAAP,ADC6B,AJArC,CAAS,CIAsB,GFDlB,EFCb,CACI,AEFsB,KFEjB,IEFI,MFET,GAAkB,UAAU,CAAC,QAA7B,GAAwC,KAAK,UAAL,GAAkB,CAD9D,EAEI,KAAK,UAAL,IAAmB,UAAU,CAAC,GAAX,GAAiB,CAApC,IAAyC,KAAK,UAAL,GAAkB,CAF/D;AKDkB,AVIqB,ASH1B,ALTrB,ACaK,AEIG,ACG+C,IJpBvD,GKSQ,CCDkB,CHSb,EGTgB,EAAE,GNR/B,GAAA,IGiBQ,CAAoB,EHjB5B,CAAA,GGiBQ,WHjBR,CAAA;AMQgB,APKR,AMHH,AFSG,OGXA,EHWK,CJND,KAAK,IAAL,CAAU,KIMd,CJNI,AIMkB,EJNtB,EAAwB,EIMxB;AGX8B,APM1B,AHUR,AIvBJ,AGoBQ,ACDuB,IJnB/B,EMOsC,CVgB7B,CUhB+B,CHa3B,ACDkB,CEZW,CVgB7B,CAAC,CQJiB,ELNZ,AHUF,CAAb,AQJ2B,ERIX,CAAC,AOHb,CJPgB,AKMO,CJnB/B,CGoB0B,CPGD,CIvBzB,IGoBgC,CAAC,GJPd,CAAkB,CIOX,EHpB1B,CAAA,AGoByC,CJPtB,CAAP,IHUa,CAAA,AIvBzB,CAAA,YGoByC,CAAA,IPGhB,CAAmB,GIvB5C,CAAA,CAAA,KJuBI,EAAoD,CAAC,AOHhB,CAAmB,CPGxD,EAAyD,OOHrD;AGboC,APOnC,AHSoD,AOFrD,ACjBa,OLQb,COLoC,CHc/B,ACjBQ,CRmBR,CUhBkC,AVgBc,EUhBZ,APOlC,COP2B,GPOvB,EIOX,GJPgB,AIOE,IJPP,AIOW,ACjBT,CLUQ,AEAX,EGVuB,QAAQ,CAAC,CLU/B,AEAqB,IFAK,EIOf,CAAA,MCjBW,CAAwB,CLUpB,CAAA,QIOnB,CJPmB,AIOG,CJPO,KIOD,CAAC,CJPxC,EAAiD,AKVvB,CAApB,MDiB2B,CAAkB,IAAlB,CAAtB,EAA+C,KAAK,UAApD,CAAlB;AGd4C,APQxC,AHeP,AI7BL,ACcQ,AEQA,AClBa,IJJrB,IMMoD,CHgBvC,AClBQ,EEEkC,ALQ1C,EKR4C,CLQjD,CFAW,ACdnB,ACciB,GDdjB,EDcwB,CEAhB,AGVa,CHWT,EGXwB,CJJpC,CAAA,AGsBQ,CFPS,KGX2B,CCMvB,ADNwB,ELU1B,CAAqB,CEC5B,EDfZ,CAAA,ACe8B,CFDX,CAAP,KKVwB,CAAwB,EHWpB,CAAC,QAA7B,CGXwB,CAAf,CHW+B,KAAK,UAAL,GAAkB,CAD9D,EAEI,KAAK,UAAL,IAAmB,UAAU,CAAC,GAAX,GAAiB,CAApC,IAAyC,KAAK,UAAL,GAAkB,CAF/D;AKRkC,APSjC,AMJD,AJOH,AEKG,AClBa,OLQN,EIUF,AClBQ,ILUN,AMJA,KAAK,GDNC,ICMb,AFYA,GAAwB,KAAK,IAAL,CAAU,yBAAV,EAAxB,qBCjBC,QAAA,CAAA,MAAA,CAAO,QADK,EACM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CADN,uCAEZ,QAAA,CAAA,MAAA,CAAO,QAFK,EAEM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CAFN;AECb,APUI,AHcR,ASlBC,ALXL,AGuBK,ACdgB,IJTrB,CMG2C,CAAtB,GV0BV,AQpBU,KRoBjB,CGde,KAAK,ACfxB,GAAA,CISqB,MJTrB,CAAA,UDemB,CAA2B,KAA3B,CAAP,CCfZ,CAAA,6CIUS,WAAA,CAAA,SAAA,CAAU,OADE,EACQ,SADR,0CAEZ,WAAA,CAAA,SAAA,CAAU,mBAFE,EAEoB,iBAFpB,0CAGZ,WAAA,CAAA,SAAA,CAAU,oBAHE,EAGqB,mBAHrB,0CAIZ,WAAA,CAAA,SAAA,CAAU,IAJE,EAIK,MAJL,0CAKZ,WAAA,CAAA,SAAA,CAAU,SALE,EAKU,SALV;AEAb,APOC,AHcR,AQb0D,CRR9C,QUAA,KAAL,GAAa,mBAAA,CAAA,SAAA,EAAb;AACH,APOA,ACZL,IAAM,uBAAuB,GAAG,CAAhC,ACcsB,OAAmB,KAAe;ADbxD,ACcQ,IDdF,MCcQ,CAAC,GAAG,KAAK,IDdE,GAAG,CAA5B,ECckB,GAAkB,KAAK,CAAC,IIPT,IJOf,GAAmC,CIPJ,IJOS,QIPa,EJOlB,GAAkB,CAA/D;AINA,AJOA,UAAM,CIPD,AJOE,GAAG,CIPD,CAAC,GAAG,AJOE,KIPG,KJOR,EIPG,CAAa,CJOG,AEIZ,KEXJ,AJOqB,CAAC,CEID,CEXC,CAAnC,AJO6B,EIPS,CAAC,AJOE,CAA/B,GIPiC,CAA3C,AJO8C,EIPA,CAAC,EAA/C,AJOmD,EIPA,QJOL,GAAkB,CAAhE;AINI,AJQJ,AEGA,IHlBK,MGkBC,CFHD,CIRG,EJQR,CAAS,EIRI,OAAL,AFWY,CEXC,AJQrB,CIRQ,AJSJ,CADJ,AEGuB,ACPb,CCJc,CJUpB,CAFJ,EAGI,AEAwB,EEXpB,ENIY,AIOG,CFAd,AEAwB,EEXE,INIE,AKAI,ECJrC,EACI,AJUJ,GAAkB,AEAC,CAAwB,EFAtB,CIVV,AJUW,EEAH,CAAvB,KFAI,GAAiC,CIVtB,AJUX,CIVW,EJU0B,KAAK,QIV/B,CAAgB,CJUU,GAAkB,CIVvB,AJOpC,EAII,KIX2B,AJWtB,CIXmC,CAAb,EAAgB,EAAhC,EAAoC,EJW/C,IAAmB,GAAG,CIXX,AJWY,GAAJ,CIX0C,EJWhC,CAA7B,EIXkE,EJWhC,CAAlC,GAAsC,CIXuB,CAAa,CAAb,EAAgB,AJWlC,IIXhC,GAAyE,GJW9C,CIXlC,EJWoD,CAJ5D;AFHA,AMHC,AJYJ,AGTG,ULAI,CAAC,AKAA,KLAK,IAAL,CAAU,QORH,EPQP,CAAqB,EKA1B,EER6B,CPQxB,CAAL,EAAkC;AOPlC,APQI,AIOJ,ACPA,WAAK,EERE,CHeC,CJPG,GORC,KAAL,CAAW,EFQlB,EERO,AHeP,CGfuB,EPQZ,CAAA,OORY,CAAC,MPQb,CAAe,WAAtB;AORoB,APSvB,AMJD,ALEJ,AGSQ,ACPJ,WAAK,ECJE,AFWE,EGhBmB,EDK5B,UCL4B,CAAA,CHgBnB,ACPT,CJFuB,AGSd,YHTb,CMPgC,CAAgB,ANOc,AGSjD,CGhBoC,AHgBrB,CGhBsB,UAAlB,ANOhC,EMP8D,ANO0B,EGShF,GGhBwB,CAAJ;AAAA,ADM3B,ALCuF,AGUhF,ACPJ,OEVO,CAAP,GFUK,EDOI,UCPT,MHQS,AEDA,CAAA,cAAA,CAAe,kBAApB;AGhBP,APUG,AEQA,AEDQ,ACPX,WLAQ,AEQA,GAAL,CFRA,AEQS,AEDI,CJPH,KEQV,UFRA,CAA0B,KAA1B,AIOQ;AHX4E,ACavF,AEDW;AJNR,UAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,KAArB,CAAJ,EAAiC;AAC7B,ACPmB,AGanB,SHbmB,IGad,EJNE,MCPY,GAAA,GMJb,EHiBD,CAAA,CJNE,CAAA,ICPY,EMJkC,MHiBhD,CAAe,CJNb,AKDgB,CLCD,IAAtB,SIMA;AGhBJ,APWC,ACRyD,AGclD,ACPR,SJP0D,CIOpD,GEVC,EHiBM,GGjBD,GNG8C,EMHnD,CAAW,ANGwC,CIOrC,GAAG,EEVjB,CAAkB,ALkBX,CEDN,CAAuB,GHd2B,EGclD,EGjBD,CAAP,ELkBsC,EGRd,CAAA,KHQ4B,aGR5B,CAAmB,KAAK,IAAL,CAAU,aAA7B,CAAxB;AETH,ADpBL,ALeY,ACuBJ,AEDQ,ACPR,OC9BR,CAAA,CLeY,ECuBC,AGRA,SC9Bb,CJsCQ,CAAgB,CItCxB,GLeY,EIeJ,CJfwB,AIeD,GHQvB,EAA4B,CItCpC,ELegC,CAAA,AIexB,EHQA,CGRmC,GJfX,CAAO,QAA3B,GIe8C,CAAC,KAAnD;ALCA,ACdI,ACsBJ,AGRA,SJdI,EDcC,AEQA,AGRA,GHQL,CFRA,AEQS,CFRC,GCdN,ACsBJ,GDtB0B,IAAtB,EIcJ,CAAuB,ILAvB,CKAA,CAA6B,KAA7B,GAAqC,eAAe,CAAC,KAArD;ALCA,ACdI,ACsBP,AEFO,ACNP,SJdO,IDcG,AIME,KHpBL,GAAuB,QDcpB,AIME,CJNF,AIME,EHpBkB,CAAA,SAAA,CAAU,CDc9B,AIME,CJNa,AIME,KHpBpB,OGoBA,GJNJ;AACH,ACdO,AGoBI,SHpBJ,MGoBS,GHpBT,GAAuB,WAAA,CAAA,IGoBnB,KGjBiB,ANHE,CAAU,OMGE,ANHnC;AMIJ,ANHY,AGoBJ,SHpBI,IMGL,EHiBM,GGjBD,GNHA,GMGL,CAAY,EHiBX,CAAkB,KAAlB,EGjBW,GAAG,gDNHQ,QAAA,CAAA,MAAA,CAAO,QAAzB,EAAoC,CAApC,uCAAwC,QAAA,CAAA,MAAA,CAAO,QAA/C,EAA0D,CAA1D;AMGU,ANAtB,AGkBQ,SHlBH,MMAqB,GAAG,CAAC,INA9B,EMA0B,CNAJ,IMAmB,ANAf,GCkBV,GKlBM,EFWH,OHOqB,CDlBd,CAAA,MCkB4B,QDlBhC,CAAmB,IAAnB,CAAtB;AMAsB,ANCtB,ACkBA,AGPA,OEZO,EAA0C,ANC5C,ECkBA,AGPA,CEZE,CAA8C,QLmBrD,CAAgB,CKnBqC,AFYrD,CEZsD,AFYpC,CJXlB,GAAwB,ICkBxB,CGPA,CHO4B,EGPE,IHO9B,CGPmC,CLAT,GCXe,CAAC,GDWC,OKAb,CAAqB,EJX3B,EAAxB,CIWwD,IAAL,CAAU,YAA/B,KAAgD,eAA9E;AEZsD,APatD,ACXH,ACkBG,AEDI,ACNP,ULAO,CAAC,AEOA,EEDI,CFCT,CKpB0D,ALoBjD,CKpBkD,APajD,CObkD,ILoB5D,MKpBsD,APatD,EAAuB,AIMd,CAAA,cAAA,CAAe,IAApB;AGnBkD,APclD,AEOP,AEDW,OGpBD,CAAP,OPcW,AIME,KJNG,iBAAL,AIMH,CJN0B,KAAvB,CAAP;AObP,APcI,AIMO,eAAK,qBAAL;AACA,yCCPc;ALCtB,AKAA,MAAA,OLAO,AKAA,CAAC,GAAR,CLAY,AKAA,KAAK,IAAL,CAAU,GHOX,IFPJ,CAAuB,ACZX,KDYZ,CAAP,CKAY,EAAZ,GJZyC;ADa5C,ACZG,ACmBA,AEDI,ACNP,UJZO,CCmBC,EEDI,CFCT,CDnBS,ACmBA,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,AEDS,CAAA,CHlBL,ACmBqB,CDnBC,ICmBI,EDnB9B,CCmByB,CDnBS,ACmBA,EKrBT,EHoBhB,CAAe,CFCC,CAAgB,EKrBC,GLqB1C,EAAgD,EED5C,GFCiD,GAAL,CAAS,MAAT,CAAgB,MAAhE;AKpBA,ANEI,ACmBJ,AEDQ,WFCH,CDnBK,CMFH,CLqBP,CAAS,GKrBG,ENEM,GMFX,ANEc,CMFH,ALqBlB,IDnB0B,EMFnB,CACH,SNCiB,CMDhB,ANCkC,GMDnC,EAAM,GNCW,CMDjB,ANC4C,EMD9B,QNCG,CAAjB;AMAI,ANCJ,ACmBP,AEnBG,QHAI,IMDQ,INCA,CAAC,MAAT,CMDQ,CAAA,CNCU,QAAQ,CAAC,KMDnB,CAAgB,ANCN,IMDU,CAAC,ANCS,QAAA,CAAA,CMD9B,EAAiC,GNCH,CAAO,CMDrC,CAAJ,EAA6C,KNC/B,GAAuC,KAAK,iBAA5C,GAAgE,QAAQ,CAAC,MAA3F;AMAQ,ANCR,UMDQ,GAAG,ANCN,CMDO,UAAJ,CAAe,ANCvB,CAAkB,GMDV,CAAoB,CNCL,GMDf,CFYI,GLAM,MCXlB,CDWmC;AOX3B,APYZ,ACXI,AGiBJ,ACPgB,UEXJ,APYN,CIMD,EGlBU,ANCN,CMDO,IPYF,GAAG,CIMjB,CAAiB,CGlBL,CAAe,ANCvB,CDWkB,ACXA,GMDV,CAAoB,APYf,CAAU,GOZf,GHkBZ,GHjBI,CAAiC,EDWpB,CAAuB,OCXpC,CDWa,CAAgC,ACXA,KDWhC,ACXqC,CDWtD,YCXI;AMAK,ANCR,AGiBD,OHtBA,EMCQ,EHqBH,EHjBE,EMDQ,IAAI,ANCN,IMDU,CAAC,ANCN,CAAC,EGiBnB,GAAwB,IGlBL,ALmBF,CKnBkB,AHkBN,IFCiB,AEDtB,CAAU,GGlBf,KAA6B,KAAK,CAAC,CNCpC,CAAX,MMDQ,EAAiD,CHkBxC,CAAoC,KAApC,CAAxB;AGjBY,APWZ,ACVH,ACkBG,AEDH,ACRG,MAAA,IEVY,APWR,AEQE,CFRD,CKDC,CEVS,ALmBN,AGTF,CEVS,ELmBJ,GFRR,CEQY,AGThB,CHSiB,AGTF,ELCE,COXL,CAAe,CLmBf,AGTQ,CHSG,EKnBX,CAAoB,ALmBN,AGTX,CLCU,AEQE,AGTF,CLCC,AEQH,EKnBX,CLmBmB,GFRd,EEQmB,GFRC,AKDrC,EAAuC,GLCG,EEQ9B,CAAZ,CFRqC,AKDrC,CLC+C,AKDA,aLC/C,EAA8D,CKDM;AET3D,APWL,AEQJ,AGVoE,SEXrD,CLqBT,GAAG,EKnBM,APWJ,CEQC,GKnBO,CLmBH,CAAC,EKnBM,CAAC,ELmBZ,CAAW,GAAG,CFRf,AEQgB,CFRhB,AEQY,EKnBJ,CAAgB,ALmBJ,GKnBZ,ELmBiB,GKnBO,GPWhC,CAAe,COXsB,CAAC,CLmBrC,CAAZ,CKnBe,EAAuC,IPWlD;AOVQ,APWX,AEQD,AGXoE,UERxD,EFQqC,CERlC,ALmBR,CKnBS,IFQoD,MERxD,CAAe,ALmBpB,CAAA,GKnBK,CAAoB,IAApB,cLmBL,CAAuB,GAAvB,EAA4B,GAA5B,CAAP;AKlBS,ALmBZ,AGZuE,YAAX,MAAW,iBDUjD,KHjBC,GGiBwB;AJN5C,ACVA,AGiBA,MAAA,IHjBI,CDUC,CIOC,CAAC,EHjBE,GGiBT,CAAa,GJPb,EIOA,CJPmB,EIOE,IHjBjB,CAAsB,CGiB1B,KHjBA,EAAkC;AMA1B,APUa,ACTjB,AGiBJ,ACXI,MDWJ,EJRqB,AKHjB,IDWE,CJRoB,ACTjB,AGiBF,ACXC,CAAC,CEPM,APUM,GOVb,AHkBR,CAAa,CJRM,KIQnB,CCXI,CAAkB,CDWA,EHjBlB,GAAyB,AIMzB,CDWJ,CCX8B,GJNI,MIM9B,GAAsC,MAAM,CJNnB,CAAsB,CIMA,EJNtB,AIMzB,EJNA;AMAC,APSuB,ACRxB,AGiBJ,ACXC,MDWD,CG7BO,AFgBP,CLI4B,CORxB,GHiBE,CHjBG,AGiBF,KJT+B,AIStC,EJTwC,CCRpC,AGiBW,CHjBG,GDQ2B,ECRtB,AGiBF,CAAC,CJTkB,CAAU,CEUnC,QEDf,IJTwC,ACRtB,ACkBqB,CFVyB,ACRxB,KDQA,CAArB,ACRD,CCkBmC,EDlBJ,WAAA,CAAA,SAAA,CAAU,OAAzC,GAAmD,WAAA,CAAA,SAAA,CAAU,oBAA3E;AMAE,APQkE,ACPvE,ACkBD,AEDA,ACXH,MDWG,CHpBA,CMEM,APQkE,EEWlE,EEDA,CHjBC,AGiBA,CJVuE,EAAE,EORhE,CLmBD,AEDf,CGlBkB,CPQmE,CORjF,ALmBc,AEDF,GJVgE,CAAU,EIUpE,CAAC,GFCK,CAAC,QAAX,AEDlB,GFCwC,KAAK,UAA3B,GAAwC,KAAK,UAAL,GAAkB,CAA5E;AKnBsB,APQH,ACNf,ACkBJ,AEDH,OJXG,CORsB,ELoBhB,GDlBG,KMFuB,CLoBjB,CKpBmB,CNE9B,CAAc,ACkBA,CAAC,UDlBD,ACkBW,CDlBX,ACkBY,GAAX,GAAiB,CAAlB,EDlBA,CAAU,CCkBa,KAAK,UAA5B,GAAyC,CDlBvD,ICkB4D,UAAL,GAAkB,CAA7E;AKpBI,APSJ,ACNI,ACmBJ,OKlCO,CAAP,GPqBK,AEaA,EDnBI,CCmBT,CFbA,AEaS,CFbC,QAAV,AEaA,CFbmB,KCNf,GAAyB,GDMV,CAAA,ICNU,CAAA,IDMV,CAAU,KCNA,CAAW,KAAK,QDM7C,SCN6B,CAAzB;AMDP,APQG,ACNC,ACmBD,WAAK,EFbE,CEaP,CAAS,GAAT,CAAa,SAAb,CFbO,CAAA,AEaiB,SAAxB,EAAmC,GFb5B,CAAe,EEatB,EAA2C,CAA3C,EAA8C,IAAI,IFblD,AEasD,CAAC,EAAvD;AFZH,ACNA,ACmBA,wCEHwB;AACrB,WAAK,SAAL;AACA,AC3DR,OAAA,CAAA,GD2Da,QAAL,GC3DR,GAAA,GEwCmB,MAAkC,KFxCrD;AEyCQ,AHmBH,WGnBQ,KAAL,CAAW,OAAX,CAAmB,IAAnB,KNEiB,IDMK,OAAiB,CCNA;AMD1C,APQG,ACNA,UDMM,GCNC,KAAK,GDMK,GAAG,KAAK,GCNlB,CAAoB,ODMP,CAAiB,ACN9B,CAA6B,SDMhB,CAA4B,ACNzC,CAAP,GDMoB,CAAiC,UAAA,CAAC;AAAA,ACLzD,eDK6D,YAAA,CAAA,eAAA,CAAgB,CAAhB,EAAmB,KAAnB,CAAJ;AAAA,AEtD9D,OFsD4B,AEtD5B,CFsDQ,AEtDR,iBAAA,GAAA,GEkEoB,cFlEpB;AEkEoB,mCGlBM,YAAsB;AAAA,APQxC,UAAI,CAAC,WAAL,EAAkB,MCLL,IMFsB,ENEJ,GMFS,CNEK,oBMFV,CAA2B,UAA3B,CADK;AAAA,APSpC,ACLJ,AGeA,UGlBQ,ANGF,CGeD,EJVI,EIUT,CAAU,IGnB8B,ENItB,EDKd,CCLiB,EDKE,GCLG,CDKtB,KIUJ,CAA+B,KHfV,CAAkB,EMH/B,EHkBwB,IHfX,CAA2B,AGejB,EAAyB,CGnBhB,CNInB,CAArB;AMJwC,APUpC,ACLJ,AGeI,UGnBgB,ANId,EGeI,CJVD,IAAL,CAAU,EOV0B,ANKxB,CGeG,EHfA,CGeG,EJVlB,CAAmB,CCLC,UDKD,CAAA,CCLJ,CAAkB,AGef,CAAA,GGnBF,GPSG,CAAU,ACLd,CAA2B,EAA3B,CAAnB,EMLwC,KHoBlB,CAAmB,KAAK,CAAC,EJV3C,IIUkB,CAAlB;AJTA,eAAO,gBAAA,CAAA,cAAA,CAAe,YAAtB;AOTJ,APUC,ACLD,AGeI,UGpBE,ANKF,EGeI,KAAK,CAAC,EGpBE,ANKF,CAAC,EMLkB,CHoBzB,GHfJ,CMLkC,CHoBb,GHfC,KGeD,CAAA,EHfC,CAAA,GGeD,CGpBQ,AHoBD,CGpBwB,CNK9B,CAAO,MGe7B,EGpB6B,AHoBU,CHf3C,CMLoE,CNKxB,SMLX,EAA+C,UAA/C,CAAjC;AACA,ANKI,AGeI,QHfJ,EGeI,CGpBH,IHoBO,CAAC,EHfC,CAAC,MAAX,CGeI,CAAgB,CHfA,OGehB,CAAyB,IHfG,CMLpC,ANKqC,AGeA,CGpBD,AHoBE,KHflC,KMLJ,AHoBQ,EGpBwC,UAAhD;AAEA,APSA,ACLI,QAAA,GDKC,EOTE,EPSP,CAAU,ICLM,CAAC,EMJjB,EPSA,CAAoB,CCLhB,GAAsB,CDKD,OCLC,CAAA,GDKN,CAAiB,ECLX,CAAO,EDKjC,EAA4C,KAA5C,ACLI;AMHP,APSG,ACJI,AGaI,UAAA,CJTH,ECJI,EGaG,CAAC,MJTb,GAAmB,ACJf,CAAkB,AGad,CAAgB,EJTxB,ICJI,CAA0B,GGatB,CAA2B,KAAK,CAAC,UAAjC,EAA6C,SAAS,CAAC,MAAvD;AHbwB,AGc3B,SAHD,CHX4B,IAAI,CGczB,CHdqB,IAAF;ADK9B,ACLsC,AGe9B,UJVJ,ACLkC,AGe9B,EHfgC,EAAF,CDK7B,AIUG,CHfkB,AGejB,GJVT,CAAU,MIUN,CAAgB,GJVpB,CAAqB,IIUjB,CJVJ,AIU6B,CJVjC,EAAiC,MIUS,CAAC,KAAnC;AJTJ,ACNsC,UAAA,KDM/B,CCNqC,EAAE,KAAK,QDM5C,CAAA,cAAA,CAAe,IOTS,APS/B,YOTuD,YAAwB;AACnF,APSC,ACP6B,AGgBtB,SHhBJ,CGgBI,CGlBH,IHkBO,CAAC,UAAL,CAAgB,GGlBxB,CAAyB,MHkBjB,CGlBR,AHkBmC,CGlBF,IHkBO,CAAC,UAAjC,CGlB0C,CHkBG,SAAS,CAAC,MAAvD;AGlB0C,ANGjD,AGgBI,YGnB+B,IAAc,QAAd,IAAc;AAAA,APUlD,ACNH,AGgBI,OAVD,IJAK,COVqC,EAAQ,CPUlD,CAAU,MOVgC,EAAQ,SPUlD;AACA,AIUH,aJVU,gBAAA,CAAA,cAAA,CAAe,eAAtB;AOVI,APWP,YOXW,YAAA,CAAA,eAAA,CAAgB,UAAhB,EAA4B,IAA5B,CAAJ,EAAuC;AACnC,cAAM,CAAC,GAAG,UAAU,CAAC,ENIf,OMJI,CAAqB,UAAA,CAAC,ANIG;AMJH,ANIG,mBMJC,YAAA,CAAA,ENKT,IGgBb,CHhBkB,MGgBD,EGrBK,CAAgB,CAAhB,EAAmB,ANK5B,CAAkB,CMLT,CAAJ,mBNKL,CAAwC,iBAAxC,CADQ;AMJH,ANIG,AGiBJ,UHhB/B,CMLU,CAAV,QNImC,aDQ1B,OAAiB,KCP1B,UADmC;AMHnC,APYR,ACT2C,UMHnC,APYJ,ACRgB,KDQX,IAAL,COZc,APYJ,ACT6B,CMHxB,MAAX,CAAkB,CAAlB,EAAqB,CAArB,GPYJ,CAA0B,KAA1B,CAAJ,EAAsC,CCRlB,UADuB;AMFtC,APYD,AIQJ,SGvBI,EHuBC,EJRI,EOZE,AHoBX,CAAU,CJRN,CAAU,COZC,UPYX,AIQJ,CJR0B,AIQF,CGpBT,CAAA,GPYX,AIQJ,EAA+B,OAA/B,CAAuC,EGpBxB,CAAgB,OHoBQ,GGpBxB,EAA4B,AHoBC,EGpB7B,AHoBgC,CGpBpC,EAAqC;AACxC,APYJ,ACRJ,AGgBI,QAAA,EHhBE,GDQG,COZK,AHoBN,CAAC,CGpBM,CPYX,CAAU,COZI,ANIH,GAAG,GGgBd,CAAgB,CJRhB,EOZwB,CAAC,CNIvB,OGgBF,CGpBc,AHoBe,CGpBM,ANIrB,CAAC,GGgBf,EAAoC,EAApC,EGpBmC,CAAC,CNItB,EAA+B,UAA/B,EAAkE;AMJ5C,APapC,ACRA,AGgBH,OAFD,KHdU,CDQD,IAAL,CAAU,COb8B,INKvB,GAAG,KMLoB,CAAA,GPaxC,ECR+B,CAAC,SMLQ,ANKpB,CMLoC,ANKd,CMLF,EAAmB,IAAnB,C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","file":"app.af35efec.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Coordinate extends PartialCoordinate {\n    colIndex: number;\n}\n\ninterface PartialCoordinate {\n    row: number;\n    col: string;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Coordinate {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function coordinatesFromIndexes(row: number, col: number): Coordinate {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function areCoordsEquals(coord1: PartialCoordinate, coord2: PartialCoordinate) {\n    return coord1.row == coord2.row && coord1.col == coord2.col;\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { BoardPosition } from './BoardPosition';\nimport { point } from './Coordinate';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): BoardPosition[] => {\n    const columns = [\n        ['a', 'd', 'g'],\n        ['b', 'd', 'f'],\n        ['c', 'd', 'e'],\n        ['a', 'b', 'c', 'e', 'f', 'g'],\n        ['c', 'd', 'e'],\n        ['b', 'd', 'f'],\n        ['a', 'd', 'g'],\n    ];\n    const board: BoardPosition[] = [];\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.push({\n                player: Player.NO_PLAYER,\n                coordinate: point(i, col),\n            });\n        });\n    }\n    return board;\n};\n","export enum GameState {\n    INITIAL,\n    SELECT_POINT_TO_MOVE,\n    MOVE_SELECTED_POINT,\n    MILL,\n    GAME_OVER,\n}\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE,\n    FIRST_MOVE_PART,\n    RESTART_MOVE,\n    CANNOT_MOVE,\n    MILL,\n    OPPONENT_DESTROYED,\n    INVALID_MILL_MOVE,\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { GameState } from './GameState';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Player } from './Player';\n\nexport class GameMoveEngine {\n    private currentMove: CurrentMove = null;\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Coordinate): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentState == GameState.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Coordinate) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Coordinate): GameMoveResult {\n        if (!this.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Coordinate): GameMoveResult {\n        const position = this.game.boardService.position(point);\n        if (!position || position.player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setState(GameState.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Coordinate): GameMoveResult {\n        const pointToMove = this.currentMove.neighbours.find(p => areCoordsEquals(p, point));\n\n        if (!pointToMove) {\n            this.currentMove = null;\n            this.game.setState(GameState.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.currentMove.point, point);\n        this.currentMove = null;\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Coordinate): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n\ninterface CurrentMove {\n    point: Coordinate;\n    neighbours: Coordinate[];\n    player: Player;\n}\n","import { nextPlayer, Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Move, MovesHistory } from './MovesHistory';\nimport { BoardService } from './BoardService';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n    private gameMoveEngine: GameMoveEngine;\n    private millPlayer?: Player = null;\n    private gameState: GameState = GameState.INITIAL;\n    private prevState: GameState = GameState.INITIAL;\n    public readonly playerPoints = { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 };\n\n    public constructor(private movesHistory: MovesHistory, public boardService: BoardService) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.initialHandQueue = InitialGameHelper.initHandQueue();\n    }\n\n    public addInitialPoint(coordinate: Coordinate) {\n        if (this.initialHandQueue.length) {\n            const position = this.boardService.position(coordinate);\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(coordinate, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.initialHandQueue.length) {\n            this.currentPlayerMove = this.initialHandQueue.pop();\n            this.setState(this.initialHandQueue.length ? GameState.INITIAL : GameState.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setState(GameState.SELECT_POINT_TO_MOVE);\n            this.currentPlayerMove = nextPlayer(this.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(coordinate: Coordinate): GameMoveResult {\n        return this.gameMoveEngine.makeMove(coordinate);\n    }\n\n    public movePoint(from: Coordinate, to: Coordinate) {\n        const fromPosition = this.boardService.position(from);\n        const toPosition = this.boardService.position(to);\n\n        if (toPosition.player === Player.NO_PLAYER) {\n            toPosition.player = fromPosition.player;\n            fromPosition.player = Player.NO_PLAYER;\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedCoordinate: Coordinate): boolean {\n        const { colsInLine, rowsInLine } = this.boardService.findColsAndRowsInLine(changedCoordinate);\n\n        const checkMill = (inLineArray: BoardPosition[], coordinate: Coordinate): boolean => {\n            const inLineIndex = inLineArray.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n            for (let i = 0; i < inLineArray.length; i += 3) {\n                if (inLineIndex >= i && inLineIndex < i + 3) {\n                    const currPlayer = inLineArray[inLineIndex].player;\n                    let millCount = 0;\n                    for (let j = 0; j < 3; j++) {\n                        if (currPlayer == inLineArray[i + j].player) millCount++;\n                    }\n                    if (millCount == 3) return true;\n                }\n            }\n            return false;\n        };\n\n        const isMill = checkMill(colsInLine, changedCoordinate) || checkMill(rowsInLine, changedCoordinate);\n        this.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setState(GameState.MILL);\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.millPlayer !== null;\n    }\n\n    public forEachBoardPosition(func: (pos: BoardPosition) => void) {\n        this.boardService.forEach(func);\n    }\n\n    public isGameOver(): boolean {\n        return this.gameState === GameState.GAME_OVER;\n    }\n\n    public isNoPlayer(coordinate: Coordinate): boolean {\n        const triedPosition: BoardPosition = this.boardService.position(coordinate);\n        return triedPosition && triedPosition.player == Player.NO_PLAYER;\n    }\n\n    public isOpponentPoint(point: Coordinate): boolean {\n        const position = this.boardService.position(point);\n        return this.isOpponentPosition(position);\n    }\n\n    private isOpponentPosition(position) {\n        return position && position.player != Player.NO_PLAYER && position.player != this.currentPlayer;\n    }\n\n    public possibleMoves(coordinate: Coordinate): Coordinate[] {\n        const previousCoordinate: Coordinate = this.movesHistory.getPreviousCoordinate(this.currentPlayer, coordinate);\n        return this.findNeighbours(coordinate)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousCoordinate && areCoordsEquals(previousCoordinate, p)));\n    }\n\n    public allOpponentPositions(): BoardPosition[] {\n        return this.boardService.filter((position: BoardPosition) => this.isOpponentPosition(position));\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        if (this.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n        }\n        return this.boardService.findNeighbours(coordinate);\n    }\n\n    public get currentState(): GameState {\n        return this.gameState;\n    }\n\n    public setState(state: GameState) {\n        if (this.isGameOver()) return;\n        this.prevState = this.gameState;\n        this.gameState = state;\n    }\n\n    public get currentPlayer(): Player {\n        return this.currentPlayerMove;\n    }\n\n    public findSelectableCoordinates(coordinate?: Coordinate): Coordinate[] {\n        switch (this.currentState) {\n            case GameState.INITIAL:\n                return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n            case GameState.SELECT_POINT_TO_MOVE:\n                return this.boardService.findPlayerCoordinates(this.currentPlayer);\n            case GameState.MILL:\n                return this.allOpponentPositions().map(p => p.coordinate);\n            case GameState.MOVE_SELECTED_POINT:\n                return [\n                    ...this.possibleMoves(coordinate),\n                    ...this.boardService.findPlayerCoordinates(this.currentPlayer),\n                ];\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Coordinate) {\n        const boardPosition = this.boardService.position(point);\n        this.playerPoints[boardPosition.player]--;\n        boardPosition.player = Player.NO_PLAYER;\n\n        if (Object.values(this.playerPoints).some(points => points === POINTS_TO_GAME_OVER)) {\n            this.setState(GameState.GAME_OVER);\n        }\n    }\n\n    public clearMill() {\n        this.setState(this.prevState);\n        this.millPlayer = null;\n    }\n\n    public getMovesHistory(): Move[] {\n        return this.movesHistory.getHistory();\n    }\n}\n","import { Coordinate, coordinatesFromIndexes } from '../game/Coordinate';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(coordinate: Coordinate) {\n        this.ctx.moveTo(\n            this.squareSize * coordinate.colIndex + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(coordinate: Coordinate) {\n        this.ctx.lineTo(\n            this.squareSize * coordinate.colIndex + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Coordinate, end: Coordinate) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.stroke();\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getCoordinate(pos: { x: number; y: number }): Coordinate {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return coordinatesFromIndexes(row, col);\n    }\n\n    private drawCircle(coordinate: Coordinate, radius: number) {\n        const xPosition = coordinate.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (coordinate.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { areCoordsEquals, Coordinate, point } from '../game/Coordinate';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Coordinate[];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectableCoordinates();\n    }\n\n    private onMouseClick(point: Coordinate) {\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n        this.afterUpdate(gameMoveResult);\n        this.selectablePoints = this.game.findSelectableCoordinates(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.forEachBoardPosition((board: BoardPosition) => {\n            const paintable = getPaintablePlayer(board.player);\n\n            if (board.player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(board.coordinate, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(board.coordinate, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Coordinate) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(position => {\n            this.gameCanvas.strokeCircle(position.coordinate, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            const isSelectable = this.selectablePoints.some(p => areCoordsEquals(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { Player } from '../game/Player';\nimport { GameState } from '../game/GameState';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('game-state');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly gameStateToText = {\n        [GameState.INITIAL]: 'Initial',\n        [GameState.MOVE_SELECTED_POINT]: 'Move coordinate',\n        [GameState.SELECT_POINT_TO_MOVE]: 'Select coordinate',\n        [GameState.MILL]: 'Mill',\n        [GameState.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update(gameMoveResult?: GameMoveResult) {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        this.moveTypeText.innerText = this.gameStateToText[this.game.currentState] || 'Unknown state';\n    }\n\n    private updateHistoryMoves() {\n        console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public addInitialMove(coordinate: Coordinate, player: Player) {\n        this.addMove({ to: coordinate, player });\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public getPreviousCoordinate(player: Player, coordinate: Coordinate): Coordinate | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (this.history[i].player === player)\n                return areCoordsEquals(this.history[i].to, coordinate) ? this.history[i].from : null;\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Coordinate;\n    to: Coordinate;\n    player: Player;\n}\n","import { BoardPosition } from './BoardPosition';\nimport { initBoard } from './InitialGameHelper';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class BoardService {\n    private readonly board: BoardPosition[];\n\n    private readonly cannotGoCoordinates = [\n        { from: { row: 4, col: 'c' }, to: { row: 4, col: 'e' } },\n        { from: { row: 3, col: 'd' }, to: { row: 5, col: 'd' } },\n    ];\n\n    public constructor() {\n        this.board = initBoard();\n    }\n\n    public position(point: Coordinate): BoardPosition {\n        return this.board.find(p => areCoordsEquals(p.coordinate, point));\n    }\n\n    public filter(predicate: (position: BoardPosition) => boolean): BoardPosition[] {\n        return this.board.filter(predicate);\n    }\n\n    public findPlayerCoordinates(player: Player): Coordinate[] {\n        return this.filter(pos => pos.player === player).map(p => p.coordinate);\n    }\n\n    public findColsAndRowsInLine(point: Coordinate): FindInLinePositionResults {\n        return this.board.reduce(\n            (acc, curr) => {\n                if (areCoordsEquals(curr.coordinate, point)) {\n                    acc.rowsInLine.push(curr);\n                    acc.colsInLine.push(curr);\n                } else if (curr.coordinate.colIndex === point.colIndex) {\n                    acc.colsInLine.push(curr);\n                } else if (curr.coordinate.row === point.row) {\n                    acc.rowsInLine.push(curr);\n                }\n                return acc;\n            },\n            { colsInLine: [], rowsInLine: [] },\n        );\n    }\n\n    public forEach(func: (pos: BoardPosition) => void) {\n        this.board.forEach(func);\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(coordinate);\n        const neighbours: Coordinate[] = this.findNearestPoints(coordinate, colsInLine, rowsInLine);\n        this.filterNeighboursImpossibleToGo(coordinate, neighbours);\n\n        return neighbours;\n    }\n\n    private filterNeighboursImpossibleToGo(coordinate: Coordinate, neighbours: Coordinate[]) {\n        this.cannotGoCoordinates.forEach(({ from, to }) => {\n            if (areCoordsEquals(coordinate, from)) {\n                const i = neighbours.findIndex(p => areCoordsEquals(p, to));\n                neighbours.splice(i, 1);\n            } else if (areCoordsEquals(coordinate, to)) {\n                const i = neighbours.findIndex(p => areCoordsEquals(p, from));\n                neighbours.splice(i, 1);\n            }\n        });\n    }\n\n    private findNearestPoints(\n        coordinate: Coordinate,\n        colsInLine: BoardPosition[],\n        rowsInLine: BoardPosition[],\n    ): Coordinate[] {\n        const sameColumnsIndex = colsInLine.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n        const sameRowsIndex = rowsInLine.findIndex(p => areCoordsEquals(p.coordinate, coordinate));\n\n        return [\n            colsInLine[sameColumnsIndex + 1],\n            colsInLine[sameColumnsIndex - 1],\n            rowsInLine[sameRowsIndex + 1],\n            rowsInLine[sameRowsIndex - 1],\n        ]\n            .filter(x => x)\n            .map(p => p.coordinate);\n    }\n}\n\ninterface FindInLinePositionResults {\n    colsInLine: BoardPosition[];\n    rowsInLine: BoardPosition[];\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\nimport { BoardService } from './game/BoardService';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame(new MovesHistory(), new BoardService());\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n    const drawer = new GameDrawer(canvas, game, type => infoWriter.update(type));\n\n    infoWriter.update();\n})();\n"]}