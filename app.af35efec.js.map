{"version":3,"sources":["app/game/Player.ts","app/game/Coordinate.ts","app/game/InitialGameHelper.ts","app/game/GameMoveResult.ts","app/game/GamePhase.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/game/BoardService.ts","app/tree/Tree.ts","app/ai/NodeBuilder.ts","app/ai/AlphaBetaAlgorithm.ts","app/ai/heuristics/MillInNextMoveHeuristic.ts","app/index.ts","../../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","window","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"app.af35efec.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1 = 'PLAYER_1',\n    PLAYER_2 = 'PLAYER_2',\n    NO_PLAYER = 'NO_PLAYER',\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Coordinate {\n    row: number;\n    col: number;\n}\n\nexport function coord(row: number, col: number): Coordinate {\n    return { row, col };\n}\n\nexport function areCoordsEquals(coord1: Coordinate, coord2: Coordinate) {\n    return coord1.row == coord2.row && coord1.col == coord2.col;\n}\n\nexport function hash(point: Coordinate): number {\n    return (point.row << 10) + point.col;\n}\n\nexport function fromHash(hash: number): Coordinate {\n    const col = hash % 1024;\n    const row = (hash - col) >> 10;\n    return coord(row, col);\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { hash, coord } from './Coordinate';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): Map<number, Player> => {\n    const columns = [[1, 4, 7], [2, 4, 6], [3, 4, 5], [1, 2, 3, 5, 6, 7], [3, 4, 5], [2, 4, 6], [1, 4, 7]];\n    const board = new Map<number, Player>();\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.set(hash(coord(i, col)), Player.NO_PLAYER);\n        });\n    }\n    return board;\n};\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE = 'SUCCESSFUL_MOVE',\n    FIRST_MOVE_PART = 'FIRST_MOVE_PART',\n    RESTART_MOVE = 'RESTART_MOVE',\n    CANNOT_MOVE = 'CANNOT_MOVE',\n    MILL = 'MILL',\n    OPPONENT_DESTROYED = 'OPPONENT_DESTROYED',\n    INVALID_MILL_MOVE = 'INVALID_MILL_MOVE',\n}\n\nexport const NEXT_PLAYER_RESULTS = [GameMoveResult.SUCCESSFUL_MOVE, GameMoveResult.OPPONENT_DESTROYED];\n","export enum GamePhase {\n    INITIAL = 'INITIAL',\n    SELECT_POINT_TO_MOVE = 'SELECT_POINT_TO_MOVE',\n    MOVE_SELECTED_POINT = 'MOVE_SELECTED_POINT',\n    MILL = 'MILL',\n    GAME_OVER = 'GAME_OVER',\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { GameMoveResult } from './GameMoveResult';\nimport { GamePhase } from './GamePhase';\n\nexport class GameMoveEngine {\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Coordinate): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentPhase == GamePhase.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Coordinate) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Coordinate): GameMoveResult {\n        if (!this.game.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Coordinate): GameMoveResult {\n        const player = this.game.boardService.playerAt(point);\n        if (!player || player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.game.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setPhase(GamePhase.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Coordinate): GameMoveResult {\n        const pointToMove = this.game.currentMove.neighbours.find(p => areCoordsEquals(p, point));\n\n        if (!pointToMove) {\n            this.game.currentMove = null;\n            this.game.setPhase(GamePhase.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.game.currentMove.point, point);\n        this.game.currentMove = null;\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Coordinate): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n","import { nextPlayer, Player } from './Player';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { MovesHistory } from './MovesHistory';\nimport { BoardService } from './BoardService';\nimport { GamePhase } from './GamePhase';\nimport { CurrentMove } from './CurrentMove';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n\n    private gameMoveEngine: GameMoveEngine;\n    private state: GameState = this.resetState();\n\n    public constructor(private movesHistory: MovesHistory, public boardService: BoardService) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.boardService.resetBoard(this.state.board);\n    }\n\n    public resetState(state?: GameState): GameState {\n        const newState = state || {\n            initialHandQueue: InitialGameHelper.initHandQueue(),\n            millPlayer: null,\n            gamePhase: GamePhase.INITIAL,\n            prevPhase: GamePhase.INITIAL,\n            playerPoints: { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 },\n            currentPlayerMove: Player.PLAYER_1,\n            board: InitialGameHelper.initBoard(),\n            history: [],\n            destroyedOpponents: { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 },\n            currentMove: null,\n            winner: null,\n        };\n        this.state = this.clone(newState);\n        this.boardService.resetBoard(this.state.board);\n        this.movesHistory.resetHistory(this.state.history);\n        return newState;\n    }\n\n    public getState(): GameState {\n        return this.clone(this.state);\n    }\n\n    private clone(obj) {\n        if (obj === null || typeof obj !== 'object') return obj;\n        if (obj instanceof Map) {\n            return new Map(obj);\n        }\n        const temp = obj.constructor(); // changed\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                obj['isActiveClone'] = null;\n                temp[key] = this.clone(obj[key]);\n                delete obj['isActiveClone'];\n            }\n        }\n        return temp;\n    }\n\n    public addInitialPoint(coordinate: Coordinate) {\n        if (this.state.initialHandQueue.length) {\n            const player = this.boardService.playerAt(coordinate);\n            const newPlayer = player === Player.NO_PLAYER ? this.state.currentPlayerMove : player;\n            this.boardService.setPlayer(coordinate, newPlayer);\n            this.state.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(coordinate, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.state.initialHandQueue.length) {\n            this.state.currentPlayerMove = this.state.initialHandQueue.pop();\n            this.setPhase(this.state.initialHandQueue.length ? GamePhase.INITIAL : GamePhase.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setPhase(GamePhase.SELECT_POINT_TO_MOVE);\n            this.state.currentPlayerMove = nextPlayer(this.state.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(coordinate: Coordinate): GameMoveResult {\n        return this.gameMoveEngine.makeMove(coordinate);\n    }\n\n    public movePoint(from: Coordinate, to: Coordinate) {\n        const fromPlayer = this.boardService.playerAt(from);\n        const toPlayer = this.boardService.playerAt(to);\n\n        if (toPlayer === Player.NO_PLAYER) {\n            this.boardService.setPlayer(to, fromPlayer);\n            this.boardService.setPlayer(from, Player.NO_PLAYER);\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedCoordinate: Coordinate): boolean {\n        const isMill = this.boardService.isCoordinatePartOfMill(changedCoordinate);\n        this.state.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setPhase(GamePhase.MILL);\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.state.millPlayer !== null;\n    }\n\n    public forEachBoardPosition(func: (coordinate: Coordinate, player: Player) => void) {\n        this.boardService.forEach(func);\n    }\n\n    public isGameOver(): boolean {\n        return this.state.gamePhase === GamePhase.GAME_OVER;\n    }\n\n    public isNoPlayer(coordinate: Coordinate): boolean {\n        return this.boardService.playerAt(coordinate) === Player.NO_PLAYER;\n    }\n\n    public isOpponentPoint(point: Coordinate): boolean {\n        const player = this.boardService.playerAt(point);\n        return this.isOpponentPosition(player);\n    }\n\n    private isOpponentPosition(player: Player | null) {\n        return player && player != Player.NO_PLAYER && player != this.currentPlayer;\n    }\n\n    public possibleMoves(coordinate: Coordinate): Coordinate[] {\n        const previousCoordinate: Coordinate = this.movesHistory.getPreviousCoordinate(this.currentPlayer, coordinate);\n        return this.findNeighbours(coordinate)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousCoordinate && areCoordsEquals(previousCoordinate, p)));\n    }\n\n    public allOpponentPositions(): Coordinate[] {\n        return this.boardService.filterForCoordinates((player: Player) => this.isOpponentPosition(player));\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        if (this.state.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n        }\n        return this.boardService.findNeighbours(coordinate);\n    }\n\n    public isFlyingActive(): boolean {\n        return Object.values(this.state.playerPoints).some(points => points === POINTS_TO_ENABLE_FLYING);\n    }\n\n    public get currentPhase(): GamePhase {\n        return this.state.gamePhase;\n    }\n\n    public setPhase(phase: GamePhase) {\n        if (this.isGameOver()) return;\n        if (phase !== GamePhase.MOVE_SELECTED_POINT) this.state.prevPhase = this.state.gamePhase;\n        this.state.gamePhase = phase;\n    }\n\n    public get currentPlayer(): Player {\n        return this.state.currentPlayerMove;\n    }\n\n    public findSelectableCoordinates(coordinate?: Coordinate): Coordinate[] {\n        switch (this.currentPhase) {\n            case GamePhase.INITIAL:\n                return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n            case GamePhase.SELECT_POINT_TO_MOVE:\n                const selectable = this.boardService.findPlayerCoordinates(this.currentPlayer);\n                if (!selectable.length) {\n                    this.setPhase(GamePhase.GAME_OVER);\n                    this.state.winner = nextPlayer(this.currentPlayer);\n                }\n                return selectable;\n            case GamePhase.MILL:\n                return this.allOpponentPositions();\n            case GamePhase.MOVE_SELECTED_POINT:\n                return this.possibleMoves(coordinate);\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Coordinate) {\n        const playerToRemove = this.boardService.playerAt(point);\n        this.state.playerPoints[playerToRemove]--;\n        this.state.destroyedOpponents[this.currentPlayer]++;\n        this.boardService.setPlayer(point, Player.NO_PLAYER);\n\n        if (!this.state.initialHandQueue.length && this.state.playerPoints[playerToRemove] <= POINTS_TO_GAME_OVER) {\n            console.log('GAME OVER');\n            this.state.winner = nextPlayer(playerToRemove);\n            this.setPhase(GamePhase.GAME_OVER);\n        }\n    }\n\n    public clearMill() {\n        this.setPhase(this.state.prevPhase);\n        this.state.millPlayer = null;\n    }\n\n    public set currentMove(move: CurrentMove) {\n        this.state.currentMove = move;\n    }\n\n    public get currentMove(): CurrentMove {\n        return this.state.currentMove;\n    }\n}\n","import { Coordinate, coord } from '../game/Coordinate';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(coordinate: Coordinate) {\n        this.ctx.moveTo(\n            this.squareSize * (coordinate.col - 1) + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(coordinate: Coordinate) {\n        this.ctx.lineTo(\n            this.squareSize * (coordinate.col - 1) + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Coordinate, end: Coordinate) {\n        const x = this.squareSize * (start.col - 1) + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * (end.col - 1) - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.stroke();\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getCoordinate(pos: { x: number; y: number }): Coordinate {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return coord(row + 1, col + 1);\n    }\n\n    private drawCircle(coordinate: Coordinate, radius: number) {\n        const xPosition = (coordinate.col - 1) * this.squareSize + this.squareSize / 2;\n        const yPosition = (coordinate.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate, coord } from '../game/Coordinate';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Coordinate[];\n    private humanPlayers = [Player.PLAYER_1];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectableCoordinates();\n    }\n\n    private onMouseClick(point: Coordinate) {\n        if (!this.humanPlayers.includes(this.game.currentPlayer)) {\n            console.log('NOW IS COMPUTER TURN!');\n            return;\n        }\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                setTimeout(() => {\n                    this.afterUpdate(gameMoveResult, () => this.resetCanvasAndDrawGame());\n                });\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n\n        this.selectablePoints = this.game.findSelectableCoordinates(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.forEachBoardPosition((coordinate, player) => {\n            const paintable = getPaintablePlayer(player);\n\n            if (player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(coordinate, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(coordinate, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Coordinate) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(coordinate => {\n            this.gameCanvas.strokeCircle(coordinate, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(coord(1, 1), coord(7, 7));\n        this.gameCanvas.strokeRect(coord(2, 2), coord(6, 6));\n        this.gameCanvas.strokeRect(coord(3, 3), coord(5, 5));\n\n        this.gameCanvas.moveTo(coord(1, 4));\n        this.gameCanvas.lineTo(coord(3, 4));\n\n        this.gameCanvas.moveTo(coord(5, 4));\n        this.gameCanvas.lineTo(coord(7, 4));\n\n        this.gameCanvas.moveTo(coord(4, 1));\n        this.gameCanvas.lineTo(coord(4, 3));\n\n        this.gameCanvas.moveTo(coord(4, 5));\n        this.gameCanvas.lineTo(coord(4, 7));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            const isSelectable = this.selectablePoints.some(p => areCoordsEquals(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { Player } from '../game/Player';\nimport { GamePhase } from '../game/GamePhase';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('game-state');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly gamePhaseToText = {\n        [GamePhase.INITIAL]: 'Initial',\n        [GamePhase.MOVE_SELECTED_POINT]: 'Move coordinate',\n        [GamePhase.SELECT_POINT_TO_MOVE]: 'Select coordinate',\n        [GamePhase.MILL]: 'Mill',\n        [GamePhase.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update() {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        this.moveTypeText.innerText = this.gamePhaseToText[this.game.currentPhase] || 'Unknown phase';\n    }\n\n    private updateHistoryMoves() {\n        // console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.getState().playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public resetHistory(history: Move[]) {\n        this.history = history;\n    }\n\n    public addInitialMove(coordinate: Coordinate, player: Player) {\n        this.addMove({ to: coordinate, player });\n    }\n\n    public getPreviousCoordinate(player: Player, coordinate: Coordinate): Coordinate | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (this.history[i].player === player) {\n                return areCoordsEquals(this.history[i].to, coordinate) ? this.history[i].from : null;\n            }\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Coordinate;\n    to: Coordinate;\n    player: Player;\n}\n","import { initBoard } from './InitialGameHelper';\nimport { coord, Coordinate, fromHash, hash } from './Coordinate';\nimport { Player } from './Player';\n\nexport class BoardService {\n    private readonly neighbours: Map<number, Coordinate[]> = this.initNeighbours();\n    public readonly millCheckPositions: Map<number, Coordinate[][]> = this.initMillCheckPositions();\n\n    public constructor(private board: Map<number, Player> = initBoard()) {}\n\n    public resetBoard(board = initBoard()) {\n        this.board = board;\n    }\n\n    public playerAt(coordinate: Coordinate): Player | null {\n        return this.playerAtHash(hash(coordinate));\n    }\n\n    public playerAtHash(hash: number): Player | null {\n        return this.board.get(hash);\n    }\n\n    public setPlayer(coordinate: Coordinate, player: Player) {\n        this.board.set(hash(coordinate), player);\n    }\n\n    public filterForCoordinates(predicate: (player: Player) => boolean): Coordinate[] {\n        const result = [];\n        this.forEach((coord, player) => {\n            if (predicate(player)) result.push(coord);\n        });\n        return result;\n    }\n\n    public findPlayerCoordinates(player: Player): Coordinate[] {\n        return this.filterForCoordinates(_player => _player === player);\n    }\n\n    public isCoordinatePartOfMill(coordinate: Coordinate): boolean {\n        const coordPlayer: Player = this.playerAt(coordinate);\n        const millCoordsToCheck: Coordinate[][] = this.millCheckPositions.get(hash(coordinate));\n\n        return millCoordsToCheck.some(coords => coords.every(_coord => this.playerAt(_coord) === coordPlayer));\n    }\n\n    public forEach(func: (coordinate: Coordinate, player: Player) => void) {\n        this.board.forEach((player, hash) => {\n            func(fromHash(hash), player);\n        });\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        return this.neighbours.get(hash(coordinate));\n    }\n\n    private initNeighbours(): Map<number, Coordinate[]> {\n        return new Map([\n            [hash(coord(1, 1)), [coord(1, 4), coord(4, 1)]],\n            [hash(coord(1, 4)), [coord(1, 1), coord(1, 7), coord(2, 4)]],\n            [hash(coord(1, 7)), [coord(1, 4), coord(4, 7)]],\n            [hash(coord(2, 2)), [coord(2, 4), coord(4, 2)]],\n            [hash(coord(2, 4)), [coord(1, 4), coord(2, 6), coord(3, 4), coord(2, 2)]],\n            [hash(coord(2, 6)), [coord(2, 4), coord(4, 6)]],\n            [hash(coord(3, 3)), [coord(3, 4), coord(4, 3)]],\n            [hash(coord(3, 4)), [coord(3, 3), coord(2, 4), coord(3, 5)]],\n            [hash(coord(3, 5)), [coord(3, 4), coord(4, 5)]],\n            [hash(coord(4, 1)), [coord(1, 1), coord(4, 2), coord(7, 1)]],\n            [hash(coord(4, 2)), [coord(4, 1), coord(2, 2), coord(6, 2), coord(4, 3)]],\n            [hash(coord(4, 3)), [coord(4, 2), coord(3, 3), coord(5, 3)]],\n            [hash(coord(4, 5)), [coord(3, 5), coord(5, 5), coord(4, 6)]],\n            [hash(coord(4, 6)), [coord(4, 5), coord(2, 6), coord(4, 7), coord(6, 6)]],\n            [hash(coord(4, 7)), [coord(4, 6), coord(1, 7), coord(7, 7)]],\n            [hash(coord(5, 3)), [coord(4, 3), coord(5, 4)]],\n            [hash(coord(5, 4)), [coord(5, 3), coord(5, 5), coord(6, 4)]],\n            [hash(coord(5, 5)), [coord(5, 4), coord(4, 5)]],\n            [hash(coord(6, 2)), [coord(4, 2), coord(6, 4)]],\n            [hash(coord(6, 4)), [coord(6, 2), coord(5, 4), coord(6, 6), coord(7, 4)]],\n            [hash(coord(6, 6)), [coord(6, 4), coord(4, 6)]],\n            [hash(coord(7, 1)), [coord(4, 1), coord(7, 4)]],\n            [hash(coord(7, 4)), [coord(7, 1), coord(6, 4), coord(7, 7)]],\n            [hash(coord(7, 7)), [coord(7, 4), coord(4, 7)]],\n        ]);\n    }\n\n    private initMillCheckPositions(): Map<number, Coordinate[][]> {\n        return new Map([\n            [hash(coord(1, 1)), [[coord(4, 1), coord(7, 1)], [coord(1, 4), coord(1, 7)]]],\n            [hash(coord(1, 4)), [[coord(2, 4), coord(3, 4)], [coord(1, 1), coord(1, 7)]]],\n            [hash(coord(1, 7)), [[coord(4, 7), coord(7, 7)], [coord(1, 1), coord(1, 4)]]],\n            [hash(coord(2, 2)), [[coord(2, 4), coord(2, 6)], [coord(4, 2), coord(6, 2)]]],\n            [hash(coord(2, 4)), [[coord(1, 4), coord(3, 4)], [coord(2, 2), coord(2, 6)]]],\n            [hash(coord(2, 6)), [[coord(2, 2), coord(2, 4)], [coord(4, 6), coord(6, 6)]]],\n            [hash(coord(3, 3)), [[coord(3, 4), coord(3, 5)], [coord(4, 3), coord(5, 3)]]],\n            [hash(coord(3, 4)), [[coord(1, 4), coord(2, 4)], [coord(3, 3), coord(3, 5)]]],\n            [hash(coord(3, 5)), [[coord(3, 3), coord(3, 4)], [coord(4, 5), coord(5, 5)]]],\n            [hash(coord(4, 1)), [[coord(4, 2), coord(4, 3)], [coord(1, 1), coord(7, 1)]]],\n            [hash(coord(4, 2)), [[coord(2, 2), coord(6, 2)], [coord(4, 1), coord(4, 3)]]],\n            [hash(coord(4, 3)), [[coord(3, 3), coord(5, 3)], [coord(4, 1), coord(4, 2)]]],\n            [hash(coord(4, 5)), [[coord(3, 5), coord(5, 5)], [coord(4, 6), coord(4, 7)]]],\n            [hash(coord(4, 6)), [[coord(2, 6), coord(6, 6)], [coord(4, 5), coord(4, 7)]]],\n            [hash(coord(4, 7)), [[coord(1, 7), coord(7, 7)], [coord(4, 5), coord(4, 6)]]],\n            [hash(coord(5, 3)), [[coord(3, 3), coord(4, 3)], [coord(5, 4), coord(5, 5)]]],\n            [hash(coord(5, 4)), [[coord(5, 3), coord(5, 5)], [coord(6, 4), coord(7, 4)]]],\n            [hash(coord(5, 5)), [[coord(5, 3), coord(5, 4)], [coord(2, 6), coord(4, 6)]]],\n            [hash(coord(6, 2)), [[coord(2, 2), coord(4, 2)], [coord(6, 4), coord(6, 6)]]],\n            [hash(coord(6, 4)), [[coord(6, 2), coord(6, 6)], [coord(5, 4), coord(7, 4)]]],\n            [hash(coord(6, 6)), [[coord(2, 6), coord(4, 6)], [coord(6, 2), coord(6, 4)]]],\n            [hash(coord(7, 1)), [[coord(1, 1), coord(4, 1)], [coord(7, 4), coord(7, 7)]]],\n            [hash(coord(7, 4)), [[coord(7, 1), coord(7, 7)], [coord(6, 4), coord(5, 4)]]],\n            [hash(coord(7, 7)), [[coord(7, 1), coord(7, 4)], [coord(1, 7), coord(4, 7)]]],\n        ]);\n    }\n}\n","export class TreeNode<T> {\n    private children: TreeNode<T>[] = [];\n\n    public constructor(public value: T, public parent?: TreeNode<T>) {}\n\n    public addChild(node: TreeNode<T>) {\n        node.parent = this;\n        this.children.push(node);\n    }\n\n    public getChildren(): TreeNode<T>[] {\n        return this.children;\n    }\n\n    public setChildren(children: TreeNode<T>[]) {\n        this.children = children;\n    }\n}\n\nexport class Tree<T> {\n    public root?: TreeNode<T>;\n\n    public constructor(root: T) {\n        this.root = new TreeNode<T>(root, null);\n    }\n}\n","import { TreeNode } from '../tree/Tree';\nimport { GameNodeValue } from '../tree/GameNodeValue';\nimport { Coordinate } from '../game/Coordinate';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { NineMensMorrisGame } from '../game/NineMensMorrisGame';\n\nexport function buildNodesToSearch(\n    game: NineMensMorrisGame,\n    parentNode: TreeNode<GameNodeValue>,\n): TreeNode<GameNodeValue>[] {\n    const state = game.getState();\n    const nodesToSearch: TreeNode<GameNodeValue>[] = [];\n\n    const addToSearch = (movesToValidState: Coordinate[]) => {\n        nodesToSearch.push(new TreeNode({ movesToValidState, evaluation: null }, parentNode));\n    };\n\n    game.findSelectableCoordinates().forEach(coord => {\n        game.resetState(state);\n        const result = game.tryToMakeMove(coord);\n\n        if (result === GameMoveResult.MILL) {\n            game.findSelectableCoordinates(coord).forEach(millCoord => {\n                addToSearch([coord, millCoord]);\n            });\n        } else if (result === GameMoveResult.FIRST_MOVE_PART) {\n            const coordinatesForFinalMove = game.findSelectableCoordinates(coord);\n            const stateAfterFirstMove = game.getState();\n\n            coordinatesForFinalMove.forEach(finalMoveCoordinate => {\n                game.resetState(stateAfterFirstMove);\n                const finalMoveResult = game.tryToMakeMove(finalMoveCoordinate);\n\n                if (finalMoveResult === GameMoveResult.MILL) {\n                    game.findSelectableCoordinates(finalMoveCoordinate).forEach(millCoord => {\n                        addToSearch([coord, finalMoveCoordinate, millCoord]);\n                    });\n                } else {\n                    addToSearch([coord, finalMoveCoordinate]);\n                }\n            });\n        } else {\n            addToSearch([coord]);\n        }\n    });\n\n    game.resetState(state);\n    parentNode.setChildren(nodesToSearch);\n    return nodesToSearch;\n}\n","import { GameHeuristic } from './heuristics/GameHeuristic';\nimport { nextPlayer, Player } from '../game/Player';\nimport { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { Tree, TreeNode } from '../tree/Tree';\nimport { GameNodeValue } from '../tree/GameNodeValue';\nimport { GameState } from '../game/GameState';\nimport { GamePhase } from '../game/GamePhase';\nimport { GameAlgorithm } from './GameAlgorithm';\nimport { buildNodesToSearch } from './NodeBuilder';\n\ntype BetterEvaluation = (a: number, b: number) => number;\ntype BetterAlpha = (alpha: number, evaluation: number) => number;\ntype BetterBeta = (beta: number, evaluation: number) => number;\n\nexport class AlphaBetaAlgorithm implements GameAlgorithm {\n    public constructor(private heuristic: GameHeuristic, private game: NineMensMorrisGame) {}\n\n    public buildGameTree(maximizingPlayer: Player): Tree<GameNodeValue> {\n        const initialState = this.game.getState();\n        const depth = this.findOptimalDepth(initialState);\n\n        const tree = new Tree<GameNodeValue>({ evaluation: 0, movesToValidState: null });\n        this.alphaBeta(initialState, maximizingPlayer, maximizingPlayer, -Infinity, Infinity, depth, tree.root);\n        this.game.resetState(initialState);\n        return tree;\n    }\n\n    private alphaBeta(\n        state: GameState,\n        currentPlayer: Player,\n        maximizingPlayer: Player,\n        alpha: number,\n        beta: number,\n        depth: number,\n        parentNode: TreeNode<GameNodeValue>,\n    ): number {\n        this.game.resetState(state);\n\n        if (depth === 0 || this.game.isGameOver()) {\n            return this.heuristic.calculateBoard(state, Player.PLAYER_2);\n        }\n\n        const _alphaOrBeta = (\n            initialEvaluation: number,\n            betterEvaluation: BetterEvaluation,\n            nextAlpha: BetterAlpha,\n            nextBeta: BetterBeta,\n        ): number => {\n            let bestEvaluation = initialEvaluation;\n\n            const nodesToSearch = buildNodesToSearch(this.game, parentNode);\n\n            for (const node of nodesToSearch) {\n                this.game.resetState(state);\n\n                node.value.movesToValidState.forEach(coord => {\n                    this.game.tryToMakeMove(coord);\n                });\n\n                const evaluation = this.alphaBeta(\n                    this.game.getState(),\n                    nextPlayer(currentPlayer),\n                    maximizingPlayer,\n                    alpha,\n                    beta,\n                    depth - 1,\n                    node,\n                );\n\n                node.value.evaluation = evaluation;\n                bestEvaluation = betterEvaluation(bestEvaluation, evaluation);\n                alpha = nextAlpha(alpha, evaluation);\n                beta = nextBeta(beta, evaluation);\n\n                if (beta <= alpha) {\n                    break;\n                }\n            }\n\n            return bestEvaluation;\n        };\n\n        if (currentPlayer === maximizingPlayer) {\n            return _alphaOrBeta(-Infinity, Math.max, Math.max, _beta => _beta);\n        } else {\n            return _alphaOrBeta(Infinity, Math.min, _alpha => _alpha, Math.max);\n        }\n    }\n\n    private findOptimalDepth(state: GameState): number {\n        if (state.gamePhase === GamePhase.INITIAL) {\n            return 3;\n        }\n        if (this.game.isFlyingActive()) {\n            return 3;\n        }\n        return 4;\n    }\n}\n","import { GameHeuristic } from './GameHeuristic';\nimport { GameState } from '../../game/GameState';\nimport { nextPlayer, Player } from '../../game/Player';\nimport { BoardService } from '../../game/BoardService';\nimport { GamePhase } from '../../game/GamePhase';\nimport { Coordinate } from '../../game/Coordinate';\n\nexport class MillInNextMoveHeuristic implements GameHeuristic {\n    public constructor(private boardService: BoardService, private millPointsFactor = 3) {}\n\n    public calculateBoard(state: GameState, player: Player): number {\n        if (state.gamePhase === GamePhase.GAME_OVER) {\n            return state.winner === player ? 10_000 : -10_000;\n        }\n        const opponentPlayer = nextPlayer(player);\n        const millPoints =\n            this.millPointsFactor * (state.destroyedOpponents[player] - state.destroyedOpponents[nextPlayer(player)]);\n\n        const millCheckPositions: [number, Coordinate[][]][] = [...this.boardService.millCheckPositions.entries()];\n\n        let additionalPoints = 0;\n\n        for (const [coordinateHash, millCheckCoords] of millCheckPositions) {\n            const player = this.boardService.playerAtHash(coordinateHash);\n\n            if (player !== Player.NO_PLAYER) continue;\n\n            const millCheckPlayers: Player[] = [].concat(...millCheckCoords).map(_c => this.boardService.playerAt(_c));\n\n            const mensPerPlayer = [player, ...millCheckPlayers].reduce((acc, curr) => {\n                acc[curr] = acc[curr] ? acc[curr] + 1 : 1;\n                return acc;\n            }, {});\n\n            if (mensPerPlayer[Player.NO_PLAYER] === 2) {\n                if (mensPerPlayer[player] === 3) additionalPoints++;\n                else if (mensPerPlayer[opponentPlayer] === 3) additionalPoints--;\n            }\n        }\n\n        return millPoints + additionalPoints;\n    }\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\nimport { BoardService } from './game/BoardService';\nimport { Player } from './game/Player';\nimport { GameMoveResult, NEXT_PLAYER_RESULTS } from './game/GameMoveResult';\nimport { Coordinate } from './game/Coordinate';\nimport { AlphaBetaAlgorithm } from './ai/AlphaBetaAlgorithm';\nimport { GameAlgorithm } from './ai/GameAlgorithm';\nimport { MillInNextMoveHeuristic } from './ai/heuristics/MillInNextMoveHeuristic';\n\nfunction makeComputerMove(algorithm: GameAlgorithm, game: NineMensMorrisGame) {\n    const tree = algorithm.buildGameTree(Player.PLAYER_2);\n\n    console.log(tree.root.getChildren());\n\n    const bestEvaluation = tree.root\n        .getChildren()\n        .map(node => node.value.evaluation)\n        .reduce((acc, cur) => (acc >= cur ? acc : cur));\n\n    const bestMoves = tree.root\n        .getChildren()\n        .map(node => node.value)\n        .filter(a => a.evaluation === bestEvaluation);\n\n    const move = bestMoves[Math.floor(Math.random() * bestMoves.length)];\n\n    console.log(move);\n\n    move.movesToValidState.forEach((a: Coordinate) => {\n        game.tryToMakeMove(a);\n    });\n}\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const boardService = new BoardService();\n    const game = new NineMensMorrisGame(new MovesHistory(), boardService);\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n\n    const minMaxAlgorithm = new AlphaBetaAlgorithm(new MillInNextMoveHeuristic(boardService), game);\n\n    const drawer = new GameDrawer(canvas, game, (result: GameMoveResult, redrawFunc) => {\n        infoWriter.update();\n        if (NEXT_PLAYER_RESULTS.includes(result)) {\n            setTimeout(() => {\n                makeComputerMove(minMaxAlgorithm, game);\n                infoWriter.update();\n                redrawFunc();\n            }, 10);\n        }\n    });\n\n    infoWriter.update();\n})();\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}