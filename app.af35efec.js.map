{"version":3,"sources":["app/game/Player.ts","app/game/Point.ts","app/game/InitialGameHelper.ts","app/game/GameState.ts","app/game/GameMoveResult.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/index.ts","../../../../../usr/local/lib/node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["OVERLAY_ID","OldModule","module","bundle","Module","moduleName","call","hot","data","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","push","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","type","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","id","every","generated","js","console","clear","hmrApply","v","hmrAcceptRun","window","reload","close","onclose","log","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","Array","isArray","length","concat","Function","deps","cached","cache","some","cb"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAY,MAAZ;;AAAA,CAAA,UAAY,MAAZ,EAAkB;AACd,EAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,MAAA,CAAA,MAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACH,CAJD,EAAY,MAAM,GAAN,OAAA,CAAA,MAAA,KAAA,OAAA,CAAA,MAAA,GAAM,EAAN,CAAZ;;AAMa,OAAA,CAAA,UAAA,GAAa,UAAC,MAAD;AAAA,SAA6B,MAAM,KAAK,MAAM,CAAC,QAAlB,GAA6B,MAAM,CAAC,QAApC,GAA+C,MAAM,CAAC,QAAnF;AAAA,CAAb;;;;;;;ACGb,IAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,CAAf,CAAf;;AAEA,SAAgB,KAAhB,CAAsB,GAAtB,EAAmC,GAAnC,EAA8C;AAC1C,SAAO;AAAE,IAAA,GAAG,EAAH,GAAF;AAAO,IAAA,GAAG,EAAH,GAAP;AAAY,IAAA,QAAQ,EAAE,GAAG,CAAC,UAAJ,CAAe,CAAf,IAAoB;AAA1C,GAAP;AACH;;AAFD,OAAA,CAAA,KAAA,GAAA,KAAA;;AAIA,SAAgB,gBAAhB,CAAiC,GAAjC,EAA8C,GAA9C,EAAyD;AACrD,SAAO;AAAE,IAAA,GAAG,EAAE,GAAG,GAAG,CAAb;AAAgB,IAAA,GAAG,EAAE,MAAM,CAAC,YAAP,CAAoB,MAAM,GAAG,GAA7B,CAArB;AAAwD,IAAA,QAAQ,EAAE;AAAlE,GAAP;AACH;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAIA,SAAgB,cAAhB,CAA+B,MAA/B,EAAqD,MAArD,EAAyE;AACrE,SAAO,MAAM,CAAC,GAAP,IAAc,MAAM,CAAC,GAArB,IAA4B,MAAM,CAAC,GAAP,IAAc,MAAM,CAAC,GAAxD;AACH;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;;;;;;;;ACnBA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEa,OAAA,CAAA,aAAA,GAAgB,YAAe;AACxC,MAAM,KAAK,GAAG,EAAd;AACA,MAAM,OAAO,GAAG,CAAC,QAAA,CAAA,MAAA,CAAO,QAAR,EAAkB,QAAA,CAAA,MAAA,CAAO,QAAzB,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,oBAAA,CAAA,kBAAA,CAAmB,gBAAnB,GAAsC,CAA1D,EAA6D,CAAC,EAA9D,EAAkE;AAC9D,IAAA,KAAK,CAAC,IAAN,CAAW,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,MAAb,CAAlB;AACH;;AACD,SAAO,KAAP;AACH,CAPY;;AASA,OAAA,CAAA,SAAA,GAAY,YAAsB;AAC3C,MAAM,OAAO,GAAG,CACZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADY,EAEZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFY,EAGZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHY,EAIZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAJY,EAKZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALY,EAMZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANY,EAOZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAPY,CAAhB;AASA,MAAM,KAAK,GAAoB,EAA/B;;AAV2C,6BAYlC,CAZkC;AAavC,IAAA,OAAO,CAAC,CAAC,GAAG,CAAL,CAAP,CAAe,OAAf,CAAuB,UAAA,GAAG,EAAG;AACzB,MAAA,KAAK,CAAC,IAAN,CAAW;AACP,QAAA,MAAM,EAAE,QAAA,CAAA,MAAA,CAAO,SADR;AAEP,QAAA,KAAK,EAAE,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT;AAFA,OAAX;AAIH,KALD;AAbuC;;AAY3C,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,oBAAA,CAAA,kBAAA,CAAmB,UAAxC,EAAoD,CAAC,EAArD,EAAyD;AAAA,UAAhD,CAAgD;AAOxD;;AACD,SAAO,KAAP;AACH,CArBY;;;;;;;ACdb,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACjB,EAAA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACH,CAND,EAAY,SAAS,GAAT,OAAA,CAAA,SAAA,KAAA,OAAA,CAAA,SAAA,GAAS,EAAT,CAAZ;;;;;;;ACAA,IAAY,cAAZ;;AAAA,CAAA,UAAY,cAAZ,EAA0B;AACtB,EAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,cAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA,GAAA,aAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,oBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,oBAAA;AACA,EAAA,cAAA,CAAA,cAAA,CAAA,mBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,mBAAA;AACH,CARD,EAAY,cAAc,GAAd,OAAA,CAAA,cAAA,KAAA,OAAA,CAAA,cAAA,GAAc,EAAd,CAAZ;;;;;;;;;;;;;;ACCA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;IAGa;;;AAGT,0BAA2B,IAA3B,EAAmD;AAAA;;AAAxB,SAAA,IAAA,GAAA,IAAA;AAFnB,SAAA,WAAA,GAA2B,IAA3B;AAE+C;;;;6BAEvC,OAAY;AACxB,UAAI,KAAK,IAAL,CAAU,UAAV,EAAJ,EAA4B;AACxB;AACH;;AACD,UAAI,KAAK,IAAL,CAAU,MAAV,EAAJ,EAAwB;AACpB,eAAO,KAAK,YAAL,CAAkB,KAAlB,CAAP;AACH,OAFD,MAEO,IAAI,KAAK,IAAL,CAAU,YAAV,IAA0B,WAAA,CAAA,SAAA,CAAU,OAAxC,EAAiD;AACpD,eAAO,KAAK,eAAL,CAAqB,KAArB,CAAP;AACH,OAFM,MAEA;AACH,eAAO,KAAK,qBAAL,CAA2B,KAA3B,CAAP;AACH;AACJ;;;oCAEuB,OAAY;AAChC,UAAI,CAAC,KAAK,IAAL,CAAU,UAAV,CAAqB,KAArB,CAAL,EAAkC;AAC9B,eAAO,gBAAA,CAAA,cAAA,CAAe,WAAtB;AACH;;AAED,WAAK,IAAL,CAAU,eAAV,CAA0B,KAA1B;;AAEA,UAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,KAArB,CAAJ,EAAiC;AAC7B,eAAO,gBAAA,CAAA,cAAA,CAAe,IAAtB;AACH;;AACD,WAAK,IAAL,CAAU,iBAAV;AACA,aAAO,gBAAA,CAAA,cAAA,CAAe,eAAtB;AACH;;;0CAE6B,OAAY;AACtC,UAAI,CAAC,KAAK,WAAV,EAAuB;AACnB,eAAO,KAAK,iBAAL,CAAuB,KAAvB,CAAP;AACH;;AACD,aAAO,KAAK,iBAAL,CAAuB,KAAvB,CAAP;AACH;;;sCAEyB,OAAY;AAClC,UAAM,QAAQ,GAAG,KAAK,IAAL,CAAU,YAAV,CAAuB,KAAvB,CAAjB;;AACA,UAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,KAAK,IAAL,CAAU,aAA/C,EAA8D;AAC1D,eAAO,gBAAA,CAAA,cAAA,CAAe,WAAtB;AACH;;AACD,WAAK,WAAL,GAAmB;AAAE,QAAA,KAAK,EAAL,KAAF;AAAS,QAAA,UAAU,EAAE,KAAK,IAAL,CAAU,aAAV,CAAwB,KAAxB,CAArB;AAAqD,QAAA,MAAM,EAAE,KAAK,IAAL,CAAU;AAAvE,OAAnB;AACA,WAAK,IAAL,CAAU,QAAV,CAAmB,WAAA,CAAA,SAAA,CAAU,mBAA7B;AACA,aAAO,gBAAA,CAAA,cAAA,CAAe,eAAtB;AACH;;;sCAEyB,OAAY;AAClC,UAAM,WAAW,GAAG,KAAK,WAAL,CAAiB,UAAjB,CAA4B,IAA5B,CAAiC,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAf,EAAkB,KAAlB,CAAJ;AAAA,OAAlC,CAApB;;AAEA,UAAI,CAAC,WAAL,EAAkB;AACd,aAAK,WAAL,GAAmB,IAAnB;AACA,aAAK,IAAL,CAAU,QAAV,CAAmB,WAAA,CAAA,SAAA,CAAU,oBAA7B;AACA,eAAO,gBAAA,CAAA,cAAA,CAAe,YAAtB;AACH;;AAED,WAAK,IAAL,CAAU,SAAV,CAAoB,KAAK,WAAL,CAAiB,KAArC,EAA4C,KAA5C;AACA,WAAK,WAAL,GAAmB,IAAnB;;AACA,UAAI,KAAK,IAAL,CAAU,UAAV,CAAqB,KAArB,CAAJ,EAAiC;AAC7B,eAAO,gBAAA,CAAA,cAAA,CAAe,IAAtB;AACH;;AACD,WAAK,IAAL,CAAU,iBAAV;AACA,aAAO,gBAAA,CAAA,cAAA,CAAe,eAAtB;AACH;;;iCAEoB,OAAY;AAC7B,UAAI,KAAK,IAAL,CAAU,eAAV,CAA0B,KAA1B,CAAJ,EAAsC;AAClC,aAAK,IAAL,CAAU,WAAV,CAAsB,KAAtB;AACA,aAAK,IAAL,CAAU,SAAV;AACA,aAAK,IAAL,CAAU,iBAAV;AACA,eAAO,gBAAA,CAAA,cAAA,CAAe,kBAAtB;AACH;;AACD,aAAO,gBAAA,CAAA,cAAA,CAAe,iBAAtB;AACH;;;;;;AA3EL,OAAA,CAAA,cAAA,GAAA,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,YAAA,CAAA,OAAA,CAAA,qBAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAIA,IAAM,uBAAuB,GAAG,CAAhC;AACA,IAAM,mBAAmB,GAAG,CAA5B;;IAEa;;;AAkBT,8BAA2B,YAA3B,EAAqD;AAAA;;AAAA;;AAA1B,SAAA,YAAA,GAAA,YAAA;AAZnB,SAAA,iBAAA,GAAoB,QAAA,CAAA,MAAA,CAAO,QAA3B;AAEA,SAAA,UAAA,GAAsB,IAAtB;AACA,SAAA,SAAA,GAAuB,WAAA,CAAA,SAAA,CAAU,OAAjC;AACA,SAAA,SAAA,GAAuB,WAAA,CAAA,SAAA,CAAU,OAAjC;AACQ,SAAA,YAAA,iEAAkB,QAAA,CAAA,MAAA,CAAO,QAAzB,EAAoC,CAApC,uCAAwC,QAAA,CAAA,MAAA,CAAO,QAA/C,EAA0D,CAA1D;AAER,SAAA,cAAA,GAAiB,CACrB;AAAE,MAAA,IAAI,EAAE;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE;AAAf,OAAR;AAA8B,MAAA,EAAE,EAAE;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE;AAAf;AAAlC,KADqB,EAErB;AAAE,MAAA,IAAI,EAAE;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE;AAAf,OAAR;AAA8B,MAAA,EAAE,EAAE;AAAE,QAAA,GAAG,EAAE,CAAP;AAAU,QAAA,GAAG,EAAE;AAAf;AAAlC,KAFqB,CAAjB;AAMJ,SAAK,cAAL,GAAsB,IAAI,gBAAA,CAAA,cAAJ,CAAmB,IAAnB,CAAtB;AACA,SAAK,gBAAL,GAAwB,iBAAiB,CAAC,aAAlB,EAAxB;AACA,SAAK,KAAL,GAAa,iBAAiB,CAAC,SAAlB,EAAb;AACH;;;;oCAEsB,OAAY;AAC/B,UAAI,KAAK,gBAAL,CAAsB,MAA1B,EAAkC;AAC9B,YAAM,QAAQ,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAA,CAAC;AAAA,iBAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;AAAA,SAAjB,CAAjB;AACA,QAAA,QAAQ,CAAC,MAAT,GAAkB,QAAQ,CAAC,MAAT,KAAoB,QAAA,CAAA,MAAA,CAAO,SAA3B,GAAuC,KAAK,iBAA5C,GAAgE,QAAQ,CAAC,MAA3F;AACA,aAAK,YAAL,CAAkB,KAAK,aAAvB;AACA,aAAK,YAAL,CAAkB,cAAlB,CAAiC,KAAjC,EAAwC,KAAK,aAA7C;AACH,OALD,MAKO,MAAM,KAAK,CAAC,8BAAD,CAAX;AACV;;;wCAEuB;AACpB,UAAI,KAAK,gBAAL,CAAsB,MAA1B,EAAkC;AAC9B,aAAK,iBAAL,GAAyB,KAAK,gBAAL,CAAsB,GAAtB,EAAzB;AACA,aAAK,QAAL,CAAc,KAAK,gBAAL,CAAsB,MAAtB,GAA+B,WAAA,CAAA,SAAA,CAAU,OAAzC,GAAmD,WAAA,CAAA,SAAA,CAAU,oBAA3E;AACH,OAHD,MAGO;AACH,aAAK,QAAL,CAAc,WAAA,CAAA,SAAA,CAAU,oBAAxB;AACA,aAAK,iBAAL,GAAyB,QAAA,CAAA,UAAA,CAAW,KAAK,iBAAhB,CAAzB;AACH;AACJ;;;kCAEoB,OAAY;AAC7B,aAAO,KAAK,cAAL,CAAoB,QAApB,CAA6B,KAA7B,CAAP;AACH;;;8BAEgB,MAAa,IAAS;AACnC,UAAM,YAAY,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,IAAxB,CAAJ;AAAA,OAAjB,CAArB;AACA,UAAM,UAAU,GAAG,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,EAAxB,CAAJ;AAAA,OAAjB,CAAnB;;AAEA,UAAI,UAAU,CAAC,MAAX,KAAsB,QAAA,CAAA,MAAA,CAAO,SAAjC,EAA4C;AACxC,QAAA,UAAU,CAAC,MAAX,GAAoB,YAAY,CAAC,MAAjC;AACA,QAAA,YAAY,CAAC,MAAb,GAAsB,QAAA,CAAA,MAAA,CAAO,SAA7B;AAEA,aAAK,YAAL,CAAkB,OAAlB,CAA0B;AAAE,UAAA,IAAI,EAAJ,IAAF;AAAQ,UAAA,EAAE,EAAF,EAAR;AAAY,UAAA,MAAM,EAAE,KAAK;AAAzB,SAA1B;AACH;AACJ;;;+BAEiB,cAAmB;AAAA,kCACE,KAAK,qBAAL,CAA2B,YAA3B,CADF;AAAA,UACzB,UADyB,yBACzB,UADyB;AAAA,UACb,UADa,yBACb,UADa;;AAGjC,UAAM,SAAS,GAAG,SAAZ,SAAY,CAAC,WAAD,EAA+B,KAA/B,EAAwD;AACtE,YAAM,WAAW,GAAG,WAAW,CAAC,SAAZ,CAAsB,UAAA,CAAC;AAAA,iBAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;AAAA,SAAvB,CAApB;;AACA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,IAAI,CAA7C,EAAgD;AAC5C,cAAI,WAAW,IAAI,CAAf,IAAoB,WAAW,GAAG,CAAC,GAAG,CAA1C,EAA6C;AACzC,gBAAM,UAAU,GAAG,WAAW,CAAC,WAAD,CAAX,CAAyB,MAA5C;AACA,gBAAI,SAAS,GAAG,CAAhB;;AACA,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AACxB,kBAAI,UAAU,IAAI,WAAW,CAAC,CAAC,GAAG,CAAL,CAAX,CAAmB,MAArC,EAA6C,SAAS;AACzD;;AACD,gBAAI,SAAS,IAAI,CAAjB,EAAoB,OAAO,IAAP;AACvB;AACJ;;AACD,eAAO,KAAP;AACH,OAbD;;AAeA,UAAM,MAAM,GAAG,SAAS,CAAC,UAAD,EAAa,YAAb,CAAT,IAAuC,SAAS,CAAC,UAAD,EAAa,YAAb,CAA/D;AACA,WAAK,UAAL,GAAkB,MAAM,GAAG,KAAK,aAAR,GAAwB,IAAhD;;AACA,UAAI,MAAJ,EAAY;AACR,aAAK,QAAL,CAAc,WAAA,CAAA,SAAA,CAAU,IAAxB;AACH;;AACD,aAAO,MAAP;AACH;;;6BAEY;AACT,aAAO,KAAK,UAAL,KAAoB,IAA3B;AACH;;;iCAEgB;AACb,aAAO,KAAK,SAAL,KAAmB,WAAA,CAAA,SAAA,CAAU,SAApC;AACH;;;+BAEiB,OAAY;AAC1B,UAAM,aAAa,GAAkB,KAAK,YAAL,CAAkB,KAAlB,CAArC;AACA,aAAO,aAAa,IAAI,aAAa,CAAC,MAAd,IAAwB,QAAA,CAAA,MAAA,CAAO,SAAvD;AACH;;;iCAEmB,OAAY;AAC5B,aAAO,KAAK,KAAL,CAAW,IAAX,CAAgB,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;AAAA,OAAjB,CAAP;AACH;;;oCAEsB,OAAY;AAC/B,UAAM,QAAQ,GAAG,KAAK,YAAL,CAAkB,KAAlB,CAAjB;AACA,aAAO,KAAK,kBAAL,CAAwB,QAAxB,CAAP;AACH;;;uCAE0B,UAAQ;AAC/B,aAAO,QAAQ,IAAI,QAAQ,CAAC,MAAT,IAAmB,QAAA,CAAA,MAAA,CAAO,SAAtC,IAAmD,QAAQ,CAAC,MAAT,IAAmB,KAAK,aAAlF;AACH;;;kCAEoB,OAAY;AAAA;;AAC7B,UAAM,aAAa,GAAU,KAAK,YAAL,CAAkB,gBAAlB,CAAmC,KAAnC,CAA7B;AACA,aAAO,KAAK,cAAL,CAAoB,KAApB,EACF,MADE,CACK,UAAA,CAAC;AAAA,eAAI,KAAI,CAAC,UAAL,CAAgB,CAAhB,CAAJ;AAAA,OADN,EAEF,MAFE,CAEK,UAAA,CAAC;AAAA,eAAI,EAAE,aAAa,IAAI,OAAA,CAAA,cAAA,CAAe,aAAf,EAA8B,CAA9B,CAAnB,CAAJ;AAAA,OAFN,CAAP;AAGH;;;2CAE0B;AAAA;;AACvB,aAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAC,QAAD;AAAA,eAA6B,MAAI,CAAC,kBAAL,CAAwB,QAAxB,CAA7B;AAAA,OAAlB,CAAP;AACH;;;mCAEqB,OAAY;AAC9B,UAAI,KAAK,YAAL,CAAkB,KAAK,aAAvB,MAA0C,uBAA9C,EAAuE;AACnE,eAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,CAAC;AAAA,iBAAI,CAAC,CAAC,MAAF,KAAa,QAAA,CAAA,MAAA,CAAO,SAAxB;AAAA,SAAnB,EAAsD,GAAtD,CAA0D,UAAA,CAAC;AAAA,iBAAI,CAAC,CAAC,KAAN;AAAA,SAA3D,CAAP;AACH;;AAH6B,mCAIK,KAAK,qBAAL,CAA2B,KAA3B,CAJL;AAAA,UAItB,UAJsB,0BAItB,UAJsB;AAAA,UAIV,UAJU,0BAIV,UAJU;;AAK9B,UAAM,UAAU,GAAY,KAAK,iBAAL,CAAuB,KAAvB,EAA8B,UAA9B,EAA0C,UAA1C,CAA5B;AACA,WAAK,8BAAL,CAAoC,KAApC,EAA2C,UAA3C;AAEA,aAAO,UAAP;AACH;;;6BAMe,OAAgB;AAC5B,UAAI,KAAK,UAAL,EAAJ,EAAuB;AACvB,WAAK,SAAL,GAAiB,KAAK,SAAtB;AACA,WAAK,SAAL,GAAiB,KAAjB;AACH;;;0CAM6B,OAAY;AACtC,aAAO,KAAK,KAAL,CAAW,MAAX,CACH,UAAC,GAAD,EAAM,IAAN,EAAc;AACV,YAAI,OAAA,CAAA,cAAA,CAAe,IAAI,CAAC,KAApB,EAA2B,KAA3B,CAAJ,EAAuC;AACnC,UAAA,GAAG,CAAC,UAAJ,CAAe,IAAf,CAAoB,IAApB;AACA,UAAA,GAAG,CAAC,UAAJ,CAAe,IAAf,CAAoB,IAApB;AACH,SAHD,MAGO,IAAI,IAAI,CAAC,KAAL,CAAW,QAAX,KAAwB,KAAK,CAAC,QAAlC,EAA4C;AAC/C,UAAA,GAAG,CAAC,UAAJ,CAAe,IAAf,CAAoB,IAApB;AACH,SAFM,MAEA,IAAI,IAAI,CAAC,KAAL,CAAW,GAAX,KAAmB,KAAK,CAAC,GAA7B,EAAkC;AACrC,UAAA,GAAG,CAAC,UAAJ,CAAe,IAAf,CAAoB,IAApB;AACH;;AACD,eAAO,GAAP;AACH,OAXE,EAYH;AAAE,QAAA,UAAU,EAAE,EAAd;AAAkB,QAAA,UAAU,EAAE;AAA9B,OAZG,CAAP;AAcH;;;sCAEyB,OAAc,YAA6B,YAA2B;AAC5F,UAAM,gBAAgB,GAAG,UAAU,CAAC,SAAX,CAAqB,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;AAAA,OAAtB,CAAzB;AACA,UAAM,aAAa,GAAG,UAAU,CAAC,SAAX,CAAqB,UAAA,CAAC;AAAA,eAAI,OAAA,CAAA,cAAA,CAAe,CAAC,CAAC,KAAjB,EAAwB,KAAxB,CAAJ;AAAA,OAAtB,CAAtB;AAEA,aAAO,CACH,UAAU,CAAC,gBAAgB,GAAG,CAApB,CADP,EAEH,UAAU,CAAC,gBAAgB,GAAG,CAApB,CAFP,EAGH,UAAU,CAAC,aAAa,GAAG,CAAjB,CAHP,EAIH,UAAU,CAAC,aAAa,GAAG,CAAjB,CAJP,EAMF,MANE,CAMK,UAAA,CAAC;AAAA,eAAI,CAAJ;AAAA,OANN,EAOF,GAPE,CAOE,UAAA,CAAC;AAAA,eAAI,CAAC,CAAC,KAAN;AAAA,OAPH,CAAP;AAQH;;;mDAEsC,OAAc,YAAmB;AACpE,WAAK,cAAL,CAAoB,OAApB,CAA4B,gBAAiB;AAAA,YAAd,IAAc,QAAd,IAAc;AAAA,YAAR,EAAQ,QAAR,EAAQ;;AACzC,YAAI,OAAA,CAAA,cAAA,CAAe,KAAf,EAAsB,IAAtB,CAAJ,EAAiC;AAC7B,cAAM,CAAC,GAAG,UAAU,CAAC,SAAX,CAAqB,UAAA,CAAC;AAAA,mBAAI,OAAA,CAAA,cAAA,CAAe,CAAf,EAAkB,EAAlB,CAAJ;AAAA,WAAtB,CAAV;AACA,UAAA,UAAU,CAAC,MAAX,CAAkB,CAAlB,EAAqB,CAArB;AACH,SAHD,MAGO,IAAI,OAAA,CAAA,cAAA,CAAe,KAAf,EAAsB,EAAtB,CAAJ,EAA+B;AAClC,cAAM,EAAC,GAAG,UAAU,CAAC,SAAX,CAAqB,UAAA,CAAC;AAAA,mBAAI,OAAA,CAAA,cAAA,CAAe,CAAf,EAAkB,IAAlB,CAAJ;AAAA,WAAtB,CAAV;;AACA,UAAA,UAAU,CAAC,MAAX,CAAkB,EAAlB,EAAqB,CAArB;AACH;AACJ,OARD;AASH;;;yCAE2B,OAAa;AAAA;;AACrC,cAAQ,KAAK,YAAb;AACI,aAAK,WAAA,CAAA,SAAA,CAAU,OAAf;AACI,iBAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,MAAF,KAAa,QAAA,CAAA,MAAA,CAAO,SAAxB;AAAA,WAAnB,EAAsD,GAAtD,CAA0D,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,KAAN;AAAA,WAA3D,CAAP;;AACJ,aAAK,WAAA,CAAA,SAAA,CAAU,oBAAf;AACI,iBAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,MAAF,KAAa,MAAI,CAAC,aAAtB;AAAA,WAAnB,EAAwD,GAAxD,CAA4D,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,KAAN;AAAA,WAA7D,CAAP;;AACJ,aAAK,WAAA,CAAA,SAAA,CAAU,IAAf;AACI,iBAAO,KAAK,oBAAL,GAA4B,GAA5B,CAAgC,UAAA,CAAC;AAAA,mBAAI,CAAC,CAAC,KAAN;AAAA,WAAjC,CAAP;;AACJ,aAAK,WAAA,CAAA,SAAA,CAAU,mBAAf;AACI,iBAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP;;AACJ;AACI,iBAAO,EAAP;AAVR;AAYH;;;gCAEkB,OAAY;AAC3B,UAAM,aAAa,GAAG,KAAK,YAAL,CAAkB,KAAlB,CAAtB;AACA,WAAK,YAAL,CAAkB,aAAa,CAAC,MAAhC;AACA,MAAA,aAAa,CAAC,MAAd,GAAuB,QAAA,CAAA,MAAA,CAAO,SAA9B;;AAEA,UAAI,MAAM,CAAC,MAAP,CAAc,KAAK,YAAnB,EAAiC,IAAjC,CAAsC,UAAA,MAAM;AAAA,eAAI,MAAM,KAAK,mBAAf;AAAA,OAA5C,CAAJ,EAAqF;AACjF,aAAK,QAAL,CAAc,WAAA,CAAA,SAAA,CAAU,SAAxB;AACH;AACJ;;;gCAEe;AACZ,WAAK,QAAL,CAAc,KAAK,SAAnB;AACA,WAAK,UAAL,GAAkB,IAAlB;AACH;;;sCAEqB;AAClB,aAAO,KAAK,YAAL,CAAkB,UAAlB,EAAP;AACH;;;wBAzFsB;AACnB,aAAO,KAAK,SAAZ;AACH;;;wBAQuB;AACpB,aAAO,KAAK,iBAAZ;AACH;;;;;;AAhJsB,kBAAA,CAAA,gBAAA,GAAmB,CAAnB;AACA,kBAAA,CAAA,UAAA,GAAa,CAAb;AAF3B,OAAA,CAAA,kBAAA,GAAA,kBAAA;;;;;;;;;;;;;;ACZA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;IAEa;;;AACT,6BAA2B,GAA3B,EAAkE,UAAlE,EAAoF;AAAA;;AAAzD,SAAA,GAAA,GAAA,GAAA;AAAuC,SAAA,UAAA,GAAA,UAAA;AAAsB;;;;6BAExE,OAAa;AACzB,WAAK,GAAL,CAAS,WAAT,GAAuB,KAAvB;AACA,WAAK,GAAL,CAAS,SAAT,GAAqB,KAArB;AACH;;;2BAEa,OAAY;AACtB,WAAK,GAAL,CAAS,MAAT,CACI,KAAK,UAAL,GAAkB,KAAK,CAAC,QAAxB,GAAmC,KAAK,UAAL,GAAkB,CADzD,EAEI,KAAK,UAAL,IAAmB,KAAK,CAAC,GAAN,GAAY,CAA/B,IAAoC,KAAK,UAAL,GAAkB,CAF1D;AAIH;;;2BAEa,OAAY;AACtB,WAAK,GAAL,CAAS,MAAT,CACI,KAAK,UAAL,GAAkB,KAAK,CAAC,QAAxB,GAAmC,KAAK,UAAL,GAAkB,CADzD,EAEI,KAAK,UAAL,IAAmB,KAAK,CAAC,GAAN,GAAY,CAA/B,IAAoC,KAAK,UAAL,GAAkB,CAF1D;AAIH;;;+BAEiB,OAAc,KAAU;AACtC,UAAM,CAAC,GAAG,KAAK,UAAL,GAAkB,KAAK,CAAC,QAAxB,GAAmC,KAAK,UAAL,GAAkB,CAA/D;AACA,UAAM,CAAC,GAAG,KAAK,UAAL,IAAmB,KAAK,CAAC,GAAN,GAAY,CAA/B,IAAoC,KAAK,UAAL,GAAkB,CAAhE;AAEA,WAAK,GAAL,CAAS,UAAT,CACI,CADJ,EAEI,CAFJ,EAGI,KAAK,UAAL,GAAkB,GAAG,CAAC,QAAtB,GAAiC,CAAjC,GAAqC,KAAK,UAAL,GAAkB,CAH3D,EAII,KAAK,UAAL,IAAmB,GAAG,CAAC,GAAJ,GAAU,CAA7B,IAAkC,CAAlC,GAAsC,KAAK,UAAL,GAAkB,CAJ5D;AAMH;;;6BAEY;AACT,WAAK,GAAL,CAAS,MAAT;AACH;;;+BAEiB,OAAc,QAAc;AAC1C,WAAK,UAAL,CAAgB,KAAhB,EAAuB,MAAvB;AACA,WAAK,GAAL,CAAS,IAAT;AACH;;;iCACmB,OAAc,QAAc;AAC5C,WAAK,UAAL,CAAgB,KAAhB,EAAuB,MAAvB;AACA,WAAK,GAAL,CAAS,MAAT;AACH;;;gCAEkB,OAAc,QAAc;AAC3C,WAAK,UAAL,CAAgB,KAAhB,EAAuB,MAAvB;AACA,WAAK,GAAL,CAAS,IAAT;AACA,WAAK,GAAL,CAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAK,GAAL,CAAS,MAAT,CAAgB,KAAzC,EAAgD,KAAK,GAAL,CAAS,MAAT,CAAgB,MAAhE;AACH;;;+BAEc;AACX,WAAK,GAAL,CAAS,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAK,GAAL,CAAS,MAAT,CAAgB,KAAzC,EAAgD,KAAK,GAAL,CAAS,MAAT,CAAgB,MAAhE;AACA,WAAK,GAAL,CAAS,SAAT;AACH;;;6BAEe,KAA6B;AACzC,UAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,CAAJ,GAAQ,KAAK,UAAxB,CAAZ;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,CAAJ,GAAQ,KAAK,UAAxB,CAAZ;AACA,aAAO,OAAA,CAAA,gBAAA,CAAiB,GAAjB,EAAsB,GAAtB,CAAP;AACH;;;+BAEkB,OAAc,QAAc;AAC3C,UAAM,SAAS,GAAG,KAAK,CAAC,QAAN,GAAiB,KAAK,UAAtB,GAAmC,KAAK,UAAL,GAAkB,CAAvE;AACA,UAAM,SAAS,GAAG,CAAC,KAAK,CAAC,GAAN,GAAY,CAAb,IAAkB,KAAK,UAAvB,GAAoC,KAAK,UAAL,GAAkB,CAAxE;AAEA,WAAK,GAAL,CAAS,SAAT;AACA,WAAK,GAAL,CAAS,GAAT,CAAa,SAAb,EAAwB,SAAxB,EAAmC,MAAnC,EAA2C,CAA3C,EAA8C,IAAI,IAAI,CAAC,EAAvD;AACH;;;;;;AAtEL,OAAA,CAAA,iBAAA,GAAA,iBAAA;;;;;;;;ACFA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAQA,IAAM,OAAO,GAAiC,IAAI,GAAJ,EAA9C;AACA,OAAO,CAAC,GAAR,CAAY,QAAA,CAAA,MAAA,CAAO,QAAnB,EAA6B;AAAE,EAAA,KAAK,EAAE,KAAT;AAAgB,EAAA,MAAM,EAAE,EAAxB;AAA4B,EAAA,KAAK,EAAE;AAAnC,CAA7B;AACA,OAAO,CAAC,GAAR,CAAY,QAAA,CAAA,MAAA,CAAO,QAAnB,EAA6B;AAAE,EAAA,KAAK,EAAE,MAAT;AAAiB,EAAA,MAAM,EAAE,EAAzB;AAA6B,EAAA,KAAK,EAAE;AAApC,CAA7B;AACA,OAAO,CAAC,GAAR,CAAY,QAAA,CAAA,MAAA,CAAO,SAAnB,EAA8B;AAAE,EAAA,KAAK,EAAE,OAAT;AAAkB,EAAA,MAAM,EAAE,CAA1B;AAA6B,EAAA,KAAK,EAAE;AAApC,CAA9B;;AAEa,OAAA,CAAA,kBAAA,GAAqB,UAAC,MAAD;AAAA,SAAqC,OAAO,CAAC,GAAR,CAAY,MAAZ,CAArC;AAAA,CAArB;;;;;;;;;;;;;;ACbb,IAAA,oBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;IAEa;;;AAMT,sBACY,MADZ,EAEY,IAFZ,EAGY,WAHZ,EAGiC;AAAA;;AAFrB,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,WAAA,GAAA,WAAA;AAPK,SAAA,UAAA,GAAa,SAAb;AASb,SAAK,cAAL,CAAoB,MAApB;AAEA,SAAK,gBAAL,CAAsB,MAAtB;AAEA,SAAK,UAAL,GAAkB,MAAM,CAAC,KAAP,GAAe,oBAAA,CAAA,kBAAA,CAAmB,UAApD;AACA,SAAK,UAAL,GAAkB,IAAI,mBAAA,CAAA,iBAAJ,CAAsB,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAtB,EAA+C,KAAK,UAApD,CAAlB;AAEA,SAAK,iBAAL;AACA,SAAK,gBAAL,GAAwB,KAAK,IAAL,CAAU,oBAAV,EAAxB;AACH;;;;iCAEoB,OAAY;AAC7B,UAAM,cAAc,GAAG,KAAK,IAAL,CAAU,aAAV,CAAwB,KAAxB,CAAvB;;AAEA,cAAQ,cAAR;AACI,aAAK,gBAAA,CAAA,cAAA,CAAe,eAApB;AACA,aAAK,gBAAA,CAAA,cAAA,CAAe,kBAApB;AACI,eAAK,sBAAL;AACA;;AACJ,aAAK,gBAAA,CAAA,cAAA,CAAe,eAApB;AACI,eAAK,iBAAL,CAAuB,KAAvB;AACA;;AACJ,aAAK,gBAAA,CAAA,cAAA,CAAe,YAApB;AACI,eAAK,sBAAL;AACA,eAAK,YAAL,CAAkB,KAAlB;AACA;;AACJ,aAAK,gBAAA,CAAA,cAAA,CAAe,IAApB;AACI,eAAK,sBAAL;AACA,eAAK,qBAAL;AACA;;AACJ,aAAK,gBAAA,CAAA,cAAA,CAAe,WAApB;AACI;AAjBR;;AAmBA,WAAK,WAAL,CAAiB,cAAjB;AACA,WAAK,gBAAL,GAAwB,KAAK,IAAL,CAAU,oBAAV,CAA+B,KAA/B,CAAxB;AACH;;;mCAEsB,QAAyB;AAC5C,MAAA,MAAM,CAAC,KAAP,CAAa,KAAb,GAAqB,MAArB;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,MAAtB;AACA,MAAA,MAAM,CAAC,KAAP,GAAe,MAAM,CAAC,WAAtB;AACA,MAAA,MAAM,CAAC,MAAP,GAAgB,MAAM,CAAC,YAAvB;AACH;;;wCAEwB;AACrB,WAAK,SAAL;AACA,WAAK,QAAL;AACH;;;+BAEe;AAAA;;AACZ,WAAK,IAAL,CAAU,KAAV,CAAgB,OAAhB,CAAwB,UAAC,KAAD,EAAyB;AAC7C,YAAM,SAAS,GAAG,iBAAA,CAAA,kBAAA,CAAmB,KAAK,CAAC,MAAzB,CAAlB;;AAEA,YAAI,KAAK,CAAC,MAAN,KAAiB,QAAA,CAAA,MAAA,CAAO,SAA5B,EAAuC;AACnC,UAAA,KAAI,CAAC,UAAL,CAAgB,QAAhB,CAAyB,KAAI,CAAC,UAA9B;;AACA,UAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB,CAA2B,KAAK,CAAC,KAAjC,EAAwC,SAAS,CAAC,MAAlD;AACH,SAHD,MAGO;AACH,UAAA,KAAI,CAAC,UAAL,CAAgB,QAAhB,CAAyB,SAAS,CAAC,KAAnC;;AACA,UAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB,CAA2B,KAAK,CAAC,KAAjC,EAAwC,SAAS,CAAC,MAAlD;AACH;AACJ,OAVD;AAWH;;;sCAEyB,OAAY;AAAA;;AAClC,WAAK,IAAL,CAAU,aAAV,CAAwB,KAAxB,EAA+B,OAA/B,CAAuC,UAAA,KAAK,EAAG;AAC3C,QAAA,MAAI,CAAC,UAAL,CAAgB,YAAhB,CAA6B,KAA7B,EAAoC,EAApC;AACH,OAFD;AAGH;;;4CAE4B;AAAA;;AACzB,WAAK,IAAL,CAAU,oBAAV,GAAiC,OAAjC,CAAyC,UAAA,QAAQ,EAAG;AAChD,QAAA,MAAI,CAAC,UAAL,CAAgB,YAAhB,CAA6B,QAAQ,CAAC,KAAtC,EAA6C,EAA7C;AACH,OAFD;AAGH;;;6CAE6B;AAC1B,WAAK,UAAL,CAAgB,QAAhB;AACA,WAAK,iBAAL;AACH;;;gCAEgB;AACb,WAAK,UAAL,CAAgB,QAAhB,CAAyB,KAAK,UAA9B;AAEA,WAAK,UAAL,CAAgB,UAAhB,CAA2B,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA3B,EAA0C,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA1C;AACA,WAAK,UAAL,CAAgB,UAAhB,CAA2B,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA3B,EAA0C,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA1C;AACA,WAAK,UAAL,CAAgB,UAAhB,CAA2B,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA3B,EAA0C,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAA1C;AAEA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AACA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AAEA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AACA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AAEA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AACA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AAEA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AACA,WAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAA,CAAA,KAAA,CAAM,CAAN,EAAS,GAAT,CAAvB;AAEA,WAAK,UAAL,CAAgB,MAAhB;AACH;;;qCAEwB,QAAyB;AAAA;;AAC9C,eAAS,WAAT,CAAqB,MAArB,EAA6B,GAA7B,EAAgC;AAC5B,YAAM,IAAI,GAAG,MAAM,CAAC,qBAAP,EAAb;AACA,eAAO;AACH,UAAA,CAAC,EAAE,GAAG,CAAC,OAAJ,GAAc,IAAI,CAAC,IADnB;AAEH,UAAA,CAAC,EAAE,GAAG,CAAC,OAAJ,GAAc,IAAI,CAAC;AAFnB,SAAP;AAIH;;AAED,MAAA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,UAAA,CAAC,EAAG;AACjC,YAAM,GAAG,GAAG,WAAW,CAAC,MAAD,EAAS,CAAT,CAAvB;;AACA,YAAM,KAAK,GAAG,MAAI,CAAC,UAAL,CAAgB,QAAhB,CAAyB,GAAzB,CAAd;;AACA,QAAA,MAAI,CAAC,YAAL,CAAkB,KAAlB;AACH,OAJD;AAMA,MAAA,MAAM,CAAC,gBAAP,CAAwB,WAAxB,EAAqC,UAAA,CAAC,EAAG;AACrC,YAAM,GAAG,GAAG,WAAW,CAAC,MAAD,EAAS,CAAT,CAAvB;;AACA,YAAM,KAAK,GAAG,MAAI,CAAC,UAAL,CAAgB,QAAhB,CAAyB,GAAzB,CAAd;;AACA,YAAM,YAAY,GAAG,MAAI,CAAC,gBAAL,CAAsB,IAAtB,CAA2B,UAAA,CAAC;AAAA,iBAAI,OAAA,CAAA,cAAA,CAAe,CAAf,EAAkB,KAAlB,CAAJ;AAAA,SAA5B,CAArB;;AACA,QAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,YAAY,GAAG,SAAH,GAAe,SAAjD;AACH,OALD;AAMH;;;;;;AAtIL,OAAA,CAAA,UAAA,GAAA,UAAA;;;;;;;;;;;;;;;;;;;;;;;;ACPA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;IAEa;;;AAgBT,0BAA2B,IAA3B,EAAmD;AAAA;;AAAA;;AAAxB,SAAA,IAAA,GAAA,IAAA;AAfV,SAAA,iBAAA,GAAoB,QAAQ,CAAC,cAAT,CAAwB,qBAAxB,CAApB;AACA,SAAA,YAAA,GAAe,QAAQ,CAAC,cAAT,CAAwB,YAAxB,CAAf;AACA,SAAA,YAAA,iEACZ,QAAA,CAAA,MAAA,CAAO,QADK,EACM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CADN,uCAEZ,QAAA,CAAA,MAAA,CAAO,QAFK,EAEM,QAAQ,CAAC,cAAT,CAAwB,iBAAxB,CAFN;AAKA,SAAA,eAAA,uEACZ,WAAA,CAAA,SAAA,CAAU,OADE,EACQ,SADR,0CAEZ,WAAA,CAAA,SAAA,CAAU,mBAFE,EAEoB,YAFpB,0CAGZ,WAAA,CAAA,SAAA,CAAU,oBAHE,EAGqB,cAHrB,0CAIZ,WAAA,CAAA,SAAA,CAAU,IAJE,EAIK,MAJL,0CAKZ,WAAA,CAAA,SAAA,CAAU,SALE,EAKU,SALV;AAQsC;;;;2BAEzC,gBAA+B;AACzC,WAAK,uBAAL;AACA,WAAK,eAAL;AACA,WAAK,kBAAL;AACA,WAAK,YAAL;AACH;;;8CAE8B;AAC3B,UAAM,eAAe,GAAG,iBAAA,CAAA,kBAAA,CAAmB,KAAK,IAAL,CAAU,aAA7B,CAAxB;AACA,WAAK,iBAAL,CAAuB,SAAvB,GAAmC,eAAe,CAAC,KAAnD;AACA,WAAK,iBAAL,CAAuB,KAAvB,CAA6B,KAA7B,GAAqC,eAAe,CAAC,KAArD;AACH;;;sCAEsB;AACnB,WAAK,YAAL,CAAkB,SAAlB,GAA8B,KAAK,eAAL,CAAqB,KAAK,IAAL,CAAU,YAA/B,KAAgD,eAA9E;AACH;;;yCAEyB;AACtB,MAAA,OAAO,CAAC,GAAR,CAAY,KAAK,IAAL,CAAU,eAAV,EAAZ;AACH;;;mCAEmB;AAAA;;AAChB,MAAA,MAAM,CAAC,OAAP,CAAe,KAAK,IAAL,CAAU,YAAzB,EAAuC,OAAvC,CAA+C,gBAAqB;AAAA;AAAA,YAAnB,MAAmB;AAAA,YAAX,MAAW;;AAChE,QAAA,KAAI,CAAC,YAAL,CAAkB,MAAlB,EAA0B,SAA1B,GAAsC,MAAM,GAAG,EAA/C;AACH,OAFD;AAGH;;;;;;AA3CL,OAAA,CAAA,cAAA,GAAA,cAAA;;;;;;;;;;;;;;ACNA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;IAGa;;;AAAb,0BAAA;AAAA;;AACY,SAAA,OAAA,GAAkB,EAAlB;AAoBX;;;;4BAlBkB,MAAU;AACrB,WAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB;AACH;;;mCAEqB,OAAc,QAAc;AAC9C,WAAK,OAAL,CAAa;AAAE,QAAA,EAAE,EAAE,KAAN;AAAa,QAAA,MAAM,EAAN;AAAb,OAAb;AACH;;;iCAEgB;AACb,aAAO,KAAK,OAAZ;AACH;;;qCAEuB,OAAY;AAChC,WAAK,IAAI,CAAC,GAAG,KAAK,OAAL,CAAa,MAAb,GAAsB,CAAnC,EAAsC,CAAC,IAAI,CAA3C,EAA8C,CAAC,EAA/C,EAAmD;AAC/C,YAAI,OAAA,CAAA,cAAA,CAAe,KAAK,OAAL,CAAa,CAAb,EAAgB,EAA/B,EAAmC,KAAnC,CAAJ,EAA+C,OAAO,KAAK,OAAL,CAAa,CAAb,EAAgB,IAAvB;AAClD;;AACD,aAAO,IAAP;AACH;;;;;;AApBL,OAAA,CAAA,YAAA,GAAA,YAAA;;;;;;;;ACHA,IAAA,oBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,cAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AAEA,CAAC,YAAA;AACG,EAAA,OAAO,CAAC,GAAR,CAAY,qCAAZ;AAEA,MAAM,IAAI,GAAG,IAAI,oBAAA,CAAA,kBAAJ,CAAuB,IAAI,cAAA,CAAA,YAAJ,EAAvB,CAAb;AACA,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAT,CAAwB,aAAxB,CAAf;AAEA,MAAM,UAAU,GAAG,IAAI,gBAAA,CAAA,cAAJ,CAAmB,IAAnB,CAAnB;AACA,MAAM,MAAM,GAAG,IAAI,YAAA,CAAA,UAAJ,CAAe,MAAf,EAAuB,IAAvB,EAA6B,UAAA,IAAI;AAAA,WAAI,UAAU,CAAC,MAAX,CAAkB,IAAlB,CAAJ;AAAA,GAAjC,CAAf;AAEA,EAAA,UAAU,CAAC,MAAX;AACH,CAVD;;;ACLA,IAAIA,UAAU,GAAG,4BAAjB;AAEA,IAAIC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcC,MAA9B;;AAEA,SAASA,MAAT,CAAgBC,UAAhB,EAA4B;AAC1BJ,EAAAA,SAAS,CAACK,IAAV,CAAe,IAAf,EAAqBD,UAArB;AACA,OAAKE,GAAL,GAAW;AACTC,IAAAA,IAAI,EAAEN,MAAM,CAACC,MAAP,CAAcM,OADX;AAETC,IAAAA,gBAAgB,EAAE,EAFT;AAGTC,IAAAA,iBAAiB,EAAE,EAHV;AAITC,IAAAA,MAAM,EAAE,UAAUC,EAAV,EAAc;AACpB,WAAKH,gBAAL,CAAsBI,IAAtB,CAA2BD,EAAE,IAAI,YAAY,CAAE,CAA/C;AACD,KANQ;AAOTE,IAAAA,OAAO,EAAE,UAAUF,EAAV,EAAc;AACrB,WAAKF,iBAAL,CAAuBG,IAAvB,CAA4BD,EAA5B;AACD;AATQ,GAAX;AAYAX,EAAAA,MAAM,CAACC,MAAP,CAAcM,OAAd,GAAwB,IAAxB;AACD;;AAEDP,MAAM,CAACC,MAAP,CAAcC,MAAd,GAAuBA,MAAvB;AACA,IAAIY,aAAJ,EAAmBC,cAAnB;AAEA,IAAIC,MAAM,GAAGhB,MAAM,CAACC,MAAP,CAAce,MAA3B;;AACA,IAAI,CAAC,CAACA,MAAD,IAAW,CAACA,MAAM,CAACC,eAApB,KAAwC,OAAOC,SAAP,KAAqB,WAAjE,EAA8E;AAC5E,MAAIC,QAAQ,GAAG,MAA4BC,QAAQ,CAACD,QAApD;AACA,MAAIE,QAAQ,GAAGD,QAAQ,CAACC,QAAT,KAAsB,QAAtB,GAAiC,KAAjC,GAAyC,IAAxD;AACA,MAAIC,EAAE,GAAG,IAAIJ,SAAJ,CAAcG,QAAQ,GAAG,KAAX,GAAmBF,QAAnB,GAA8B,GAA9B,aAA2D,GAAzE,CAAT;;AACAG,EAAAA,EAAE,CAACC,SAAH,GAAe,UAASC,KAAT,EAAgB;AAC7BV,IAAAA,aAAa,GAAG,EAAhB;AACAC,IAAAA,cAAc,GAAG,EAAjB;AAEA,QAAIT,IAAI,GAAGmB,IAAI,CAACC,KAAL,CAAWF,KAAK,CAAClB,IAAjB,CAAX;;AAEA,QAAIA,IAAI,CAACqB,IAAL,KAAc,QAAlB,EAA4B;AAC1B,UAAIC,OAAO,GAAG,KAAd;AACAtB,MAAAA,IAAI,CAACuB,MAAL,CAAYC,OAAZ,CAAoB,UAASC,KAAT,EAAgB;AAClC,YAAI,CAACA,KAAK,CAACC,KAAX,EAAkB;AAChB,cAAIC,SAAS,GAAGC,cAAc,CAACC,MAAM,CAACC,aAAR,EAAuBL,KAAK,CAACM,EAA7B,CAA9B;;AACA,cAAIJ,SAAJ,EAAe;AACbL,YAAAA,OAAO,GAAG,IAAV;AACD;AACF;AACF,OAPD,EAF0B,CAW1B;;AACAA,MAAAA,OAAO,GAAGA,OAAO,IAAItB,IAAI,CAACuB,MAAL,CAAYS,KAAZ,CAAkB,UAASP,KAAT,EAAgB;AACrD,eAAOA,KAAK,CAACJ,IAAN,KAAe,KAAf,IAAwBI,KAAK,CAACQ,SAAN,CAAgBC,EAA/C;AACD,OAFoB,CAArB;;AAIA,UAAIZ,OAAJ,EAAa;AACXa,QAAAA,OAAO,CAACC,KAAR;AAEApC,QAAAA,IAAI,CAACuB,MAAL,CAAYC,OAAZ,CAAoB,UAAUC,KAAV,EAAiB;AACnCY,UAAAA,QAAQ,CAACR,MAAM,CAACC,aAAR,EAAuBL,KAAvB,CAAR;AACD,SAFD;AAIAhB,QAAAA,cAAc,CAACe,OAAf,CAAuB,UAAUc,CAAV,EAAa;AAClCC,UAAAA,YAAY,CAACD,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAAZ;AACD,SAFD;AAGD,OAVD,MAUO;AACLE,QAAAA,MAAM,CAAC1B,QAAP,CAAgB2B,MAAhB;AACD;AACF;;AAED,QAAIzC,IAAI,CAACqB,IAAL,KAAc,QAAlB,EAA4B;AAC1BL,MAAAA,EAAE,CAAC0B,KAAH;;AACA1B,MAAAA,EAAE,CAAC2B,OAAH,GAAa,YAAY;AACvB7B,QAAAA,QAAQ,CAAC2B,MAAT;AACD,OAFD;AAGD;;AAED,QAAIzC,IAAI,CAACqB,IAAL,KAAc,gBAAlB,EAAoC;AAClCc,MAAAA,OAAO,CAACS,GAAR,CAAY,2BAAZ;AAEAC,MAAAA,kBAAkB;AACnB;;AAED,QAAI7C,IAAI,CAACqB,IAAL,KAAc,OAAlB,EAA2B;AACzBc,MAAAA,OAAO,CAACW,KAAR,CAAc,kBAAkB9C,IAAI,CAAC8C,KAAL,CAAWC,OAA7B,GAAuC,IAAvC,GAA8C/C,IAAI,CAAC8C,KAAL,CAAWE,KAAvE;AAEAH,MAAAA,kBAAkB;AAElB,UAAII,OAAO,GAAGC,kBAAkB,CAAClD,IAAD,CAAhC;AACAmD,MAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BJ,OAA1B;AACD;AACF,GA1DD;AA2DD;;AAED,SAASJ,kBAAT,GAA8B;AAC5B,MAAII,OAAO,GAAGE,QAAQ,CAACG,cAAT,CAAwB9D,UAAxB,CAAd;;AACA,MAAIyD,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACM,MAAR;AACD;AACF;;AAED,SAASL,kBAAT,CAA4BlD,IAA5B,EAAkC;AAChC,MAAIiD,OAAO,GAAGE,QAAQ,CAACK,aAAT,CAAuB,KAAvB,CAAd;AACAP,EAAAA,OAAO,CAAClB,EAAR,GAAavC,UAAb,CAFgC,CAIhC;;AACA,MAAIuD,OAAO,GAAGI,QAAQ,CAACK,aAAT,CAAuB,KAAvB,CAAd;AACA,MAAIC,UAAU,GAAGN,QAAQ,CAACK,aAAT,CAAuB,KAAvB,CAAjB;AACAT,EAAAA,OAAO,CAACW,SAAR,GAAoB1D,IAAI,CAAC8C,KAAL,CAAWC,OAA/B;AACAU,EAAAA,UAAU,CAACC,SAAX,GAAuB1D,IAAI,CAAC8C,KAAL,CAAWE,KAAlC;AAEAC,EAAAA,OAAO,CAACU,SAAR,GACE,2NACE,mFADF,GAEE,yEAFF,GAGE,qEAHF,GAG0EZ,OAAO,CAACY,SAHlF,GAG8F,QAH9F,GAIE,OAJF,GAIYF,UAAU,CAACE,SAJvB,GAImC,QAJnC,GAKA,QANF;AASA,SAAOV,OAAP;AAED;;AAED,SAASW,UAAT,CAAoBjE,MAApB,EAA4BoC,EAA5B,EAAgC;AAC9B,MAAI8B,OAAO,GAAGlE,MAAM,CAACkE,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,EAAP;AACD;;AAED,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,CAAJ,EAAOC,CAAP,EAAUC,GAAV;;AAEA,OAAKF,CAAL,IAAUF,OAAV,EAAmB;AACjB,SAAKG,CAAL,IAAUH,OAAO,CAACE,CAAD,CAAP,CAAW,CAAX,CAAV,EAAyB;AACvBE,MAAAA,GAAG,GAAGJ,OAAO,CAACE,CAAD,CAAP,CAAW,CAAX,EAAcC,CAAd,CAAN;;AACA,UAAIC,GAAG,KAAKlC,EAAR,IAAemC,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACA,GAAG,CAACG,MAAJ,GAAa,CAAd,CAAH,KAAwBrC,EAAjE,EAAsE;AACpE+B,QAAAA,OAAO,CAACxD,IAAR,CAAayD,CAAb;AACD;AACF;AACF;;AAED,MAAIpE,MAAM,CAACe,MAAX,EAAmB;AACjBoD,IAAAA,OAAO,GAAGA,OAAO,CAACO,MAAR,CAAeT,UAAU,CAACjE,MAAM,CAACe,MAAR,EAAgBqB,EAAhB,CAAzB,CAAV;AACD;;AAED,SAAO+B,OAAP;AACD;;AAED,SAASzB,QAAT,CAAkB1C,MAAlB,EAA0B8B,KAA1B,EAAiC;AAC/B,MAAIoC,OAAO,GAAGlE,MAAM,CAACkE,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,MAAIA,OAAO,CAACpC,KAAK,CAACM,EAAP,CAAP,IAAqB,CAACpC,MAAM,CAACe,MAAjC,EAAyC;AACvC,QAAIL,EAAE,GAAG,IAAIiE,QAAJ,CAAa,SAAb,EAAwB,QAAxB,EAAkC,SAAlC,EAA6C7C,KAAK,CAACQ,SAAN,CAAgBC,EAA7D,CAAT;AACAT,IAAAA,KAAK,CAACC,KAAN,GAAc,CAACmC,OAAO,CAACpC,KAAK,CAACM,EAAP,CAAtB;AACA8B,IAAAA,OAAO,CAACpC,KAAK,CAACM,EAAP,CAAP,GAAoB,CAAC1B,EAAD,EAAKoB,KAAK,CAAC8C,IAAX,CAApB;AACD,GAJD,MAIO,IAAI5E,MAAM,CAACe,MAAX,EAAmB;AACxB2B,IAAAA,QAAQ,CAAC1C,MAAM,CAACe,MAAR,EAAgBe,KAAhB,CAAR;AACD;AACF;;AAED,SAASG,cAAT,CAAwBjC,MAAxB,EAAgCoC,EAAhC,EAAoC;AAClC,MAAI8B,OAAO,GAAGlE,MAAM,CAACkE,OAArB;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,MAAI,CAACA,OAAO,CAAC9B,EAAD,CAAR,IAAgBpC,MAAM,CAACe,MAA3B,EAAmC;AACjC,WAAOkB,cAAc,CAACjC,MAAM,CAACe,MAAR,EAAgBqB,EAAhB,CAArB;AACD;;AAED,MAAIvB,aAAa,CAACuB,EAAD,CAAjB,EAAuB;AACrB;AACD;;AACDvB,EAAAA,aAAa,CAACuB,EAAD,CAAb,GAAoB,IAApB;AAEA,MAAIyC,MAAM,GAAG7E,MAAM,CAAC8E,KAAP,CAAa1C,EAAb,CAAb;AAEAtB,EAAAA,cAAc,CAACH,IAAf,CAAoB,CAACX,MAAD,EAASoC,EAAT,CAApB;;AAEA,MAAIyC,MAAM,IAAIA,MAAM,CAACzE,GAAjB,IAAwByE,MAAM,CAACzE,GAAP,CAAWG,gBAAX,CAA4BkE,MAAxD,EAAgE;AAC9D,WAAO,IAAP;AACD;;AAED,SAAOR,UAAU,CAAC/B,MAAM,CAACC,aAAR,EAAuBC,EAAvB,CAAV,CAAqC2C,IAArC,CAA0C,UAAU3C,EAAV,EAAc;AAC7D,WAAOH,cAAc,CAACC,MAAM,CAACC,aAAR,EAAuBC,EAAvB,CAArB;AACD,GAFM,CAAP;AAGD;;AAED,SAASQ,YAAT,CAAsB5C,MAAtB,EAA8BoC,EAA9B,EAAkC;AAChC,MAAIyC,MAAM,GAAG7E,MAAM,CAAC8E,KAAP,CAAa1C,EAAb,CAAb;AACApC,EAAAA,MAAM,CAACM,OAAP,GAAiB,EAAjB;;AACA,MAAIuE,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACzE,GAAP,CAAWC,IAAX,GAAkBL,MAAM,CAACM,OAAzB;AACD;;AAED,MAAIuE,MAAM,IAAIA,MAAM,CAACzE,GAAjB,IAAwByE,MAAM,CAACzE,GAAP,CAAWI,iBAAX,CAA6BiE,MAAzD,EAAiE;AAC/DI,IAAAA,MAAM,CAACzE,GAAP,CAAWI,iBAAX,CAA6BqB,OAA7B,CAAqC,UAAUmD,EAAV,EAAc;AACjDA,MAAAA,EAAE,CAAChF,MAAM,CAACM,OAAR,CAAF;AACD,KAFD;AAGD;;AAED,SAAON,MAAM,CAAC8E,KAAP,CAAa1C,EAAb,CAAP;AACApC,EAAAA,MAAM,CAACoC,EAAD,CAAN;AAEAyC,EAAAA,MAAM,GAAG7E,MAAM,CAAC8E,KAAP,CAAa1C,EAAb,CAAT;;AACA,MAAIyC,MAAM,IAAIA,MAAM,CAACzE,GAAjB,IAAwByE,MAAM,CAACzE,GAAP,CAAWG,gBAAX,CAA4BkE,MAAxD,EAAgE;AAC9DI,IAAAA,MAAM,CAACzE,GAAP,CAAWG,gBAAX,CAA4BsB,OAA5B,CAAoC,UAAUmD,EAAV,EAAc;AAChDA,MAAAA,EAAE;AACH,KAFD;;AAGA,WAAO,IAAP;AACD;AACF","file":"app.af35efec.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Point extends PartialPoint {\n    colIndex: number;\n}\n\ninterface PartialPoint {\n    row: number;\n    col: string;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Point {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function pointFromIndexes(row: number, col: number): Point {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function arePointsEqual(point1: PartialPoint, point2: PartialPoint) {\n    return point1.row == point2.row && point1.col == point2.col;\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { BoardPosition } from './BoardPosition';\nimport { point } from './Point';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): BoardPosition[] => {\n    const columns = [\n        ['a', 'd', 'g'],\n        ['b', 'd', 'f'],\n        ['c', 'd', 'e'],\n        ['a', 'b', 'c', 'e', 'f', 'g'],\n        ['c', 'd', 'e'],\n        ['b', 'd', 'f'],\n        ['a', 'd', 'g'],\n    ];\n    const board: BoardPosition[] = [];\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.push({\n                player: Player.NO_PLAYER,\n                point: point(i, col),\n            });\n        });\n    }\n    return board;\n};\n","export enum GameState {\n    INITIAL,\n    SELECT_POINT_TO_MOVE,\n    MOVE_SELECTED_POINT,\n    MILL,\n    GAME_OVER,\n}\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE,\n    FIRST_MOVE_PART,\n    RESTART_MOVE,\n    CANNOT_MOVE,\n    MILL,\n    OPPONENT_DESTROYED,\n    INVALID_MILL_MOVE,\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { arePointsEqual, Point } from './Point';\nimport { GameState } from './GameState';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Player } from './Player';\n\nexport class GameMoveEngine {\n    private currentMove: CurrentMove = null;\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Point): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentState == GameState.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Point) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Point): GameMoveResult {\n        if (!this.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Point): GameMoveResult {\n        const position = this.game.findPosition(point);\n        if (!position || position.player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setState(GameState.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Point): GameMoveResult {\n        const pointToMove = this.currentMove.neighbours.find(p => arePointsEqual(p, point));\n\n        if (!pointToMove) {\n            this.currentMove = null;\n            this.game.setState(GameState.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.currentMove.point, point);\n        this.currentMove = null;\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Point): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n\ninterface CurrentMove {\n    point: Point;\n    neighbours: Point[];\n    player: Player;\n}\n","import { nextPlayer, Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { arePointsEqual, Point } from './Point';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { Move, MovesHistory } from './MovesHistory';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n    public readonly board: BoardPosition[];\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n    private gameMoveEngine: GameMoveEngine;\n    private millPlayer?: Player = null;\n    private gameState: GameState = GameState.INITIAL;\n    private prevState: GameState = GameState.INITIAL;\n    public readonly playerPoints = { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 };\n\n    private cannotGoPoints = [\n        { from: { row: 4, col: 'c' }, to: { row: 4, col: 'e' } },\n        { from: { row: 3, col: 'd' }, to: { row: 5, col: 'd' } },\n    ];\n\n    public constructor(private movesHistory: MovesHistory) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.initialHandQueue = InitialGameHelper.initHandQueue();\n        this.board = InitialGameHelper.initBoard();\n    }\n\n    public addInitialPoint(point: Point) {\n        if (this.initialHandQueue.length) {\n            const position = this.board.find(p => arePointsEqual(p.point, point));\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(point, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.initialHandQueue.length) {\n            this.currentPlayerMove = this.initialHandQueue.pop();\n            this.setState(this.initialHandQueue.length ? GameState.INITIAL : GameState.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setState(GameState.SELECT_POINT_TO_MOVE);\n            this.currentPlayerMove = nextPlayer(this.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(point: Point): GameMoveResult {\n        return this.gameMoveEngine.makeMove(point);\n    }\n\n    public movePoint(from: Point, to: Point) {\n        const fromPosition = this.board.find(p => arePointsEqual(p.point, from));\n        const toPosition = this.board.find(p => arePointsEqual(p.point, to));\n\n        if (toPosition.player === Player.NO_PLAYER) {\n            toPosition.player = fromPosition.player;\n            fromPosition.player = Player.NO_PLAYER;\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedPoint: Point): boolean {\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(changedPoint);\n\n        const checkMill = (inLineArray: BoardPosition[], point: Point): boolean => {\n            const inLineIndex = inLineArray.findIndex(p => arePointsEqual(p.point, point));\n            for (let i = 0; i < inLineArray.length; i += 3) {\n                if (inLineIndex >= i && inLineIndex < i + 3) {\n                    const currPlayer = inLineArray[inLineIndex].player;\n                    let millCount = 0;\n                    for (let j = 0; j < 3; j++) {\n                        if (currPlayer == inLineArray[i + j].player) millCount++;\n                    }\n                    if (millCount == 3) return true;\n                }\n            }\n            return false;\n        };\n\n        const isMill = checkMill(colsInLine, changedPoint) || checkMill(rowsInLine, changedPoint);\n        this.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setState(GameState.MILL);\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.millPlayer !== null;\n    }\n\n    public isGameOver(): boolean {\n        return this.gameState === GameState.GAME_OVER;\n    }\n\n    public isNoPlayer(point: Point): boolean {\n        const triedPosition: BoardPosition = this.findPosition(point);\n        return triedPosition && triedPosition.player == Player.NO_PLAYER;\n    }\n\n    public findPosition(point: Point): BoardPosition {\n        return this.board.find(p => arePointsEqual(p.point, point));\n    }\n\n    public isOpponentPoint(point: Point): boolean {\n        const position = this.findPosition(point);\n        return this.isOpponentPosition(position);\n    }\n\n    private isOpponentPosition(position) {\n        return position && position.player != Player.NO_PLAYER && position.player != this.currentPlayer;\n    }\n\n    public possibleMoves(point: Point): Point[] {\n        const previousPoint: Point = this.movesHistory.getPreviousPoint(point);\n        return this.findNeighbours(point)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousPoint && arePointsEqual(previousPoint, p)));\n    }\n\n    public allOpponentPositions(): BoardPosition[] {\n        return this.board.filter((position: BoardPosition) => this.isOpponentPosition(position));\n    }\n\n    public findNeighbours(point: Point): Point[] {\n        if (this.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.board.filter(p => p.player === Player.NO_PLAYER).map(p => p.point);\n        }\n        const { colsInLine, rowsInLine } = this.findColsAndRowsInLine(point);\n        const neighbours: Point[] = this.findNearestPoints(point, colsInLine, rowsInLine);\n        this.filterNeighboursImpossibleToGo(point, neighbours);\n\n        return neighbours;\n    }\n\n    public get currentState(): GameState {\n        return this.gameState;\n    }\n\n    public setState(state: GameState) {\n        if (this.isGameOver()) return;\n        this.prevState = this.gameState;\n        this.gameState = state;\n    }\n\n    public get currentPlayer(): Player {\n        return this.currentPlayerMove;\n    }\n\n    private findColsAndRowsInLine(point: Point): FindInLinePointsResults {\n        return this.board.reduce(\n            (acc, curr) => {\n                if (arePointsEqual(curr.point, point)) {\n                    acc.rowsInLine.push(curr);\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.colIndex === point.colIndex) {\n                    acc.colsInLine.push(curr);\n                } else if (curr.point.row === point.row) {\n                    acc.rowsInLine.push(curr);\n                }\n                return acc;\n            },\n            { colsInLine: [], rowsInLine: [] },\n        );\n    }\n\n    private findNearestPoints(point: Point, colsInLine: BoardPosition[], rowsInLine: BoardPosition[]): Point[] {\n        const sameColumnsIndex = colsInLine.findIndex(p => arePointsEqual(p.point, point));\n        const sameRowsIndex = rowsInLine.findIndex(p => arePointsEqual(p.point, point));\n\n        return [\n            colsInLine[sameColumnsIndex + 1],\n            colsInLine[sameColumnsIndex - 1],\n            rowsInLine[sameRowsIndex + 1],\n            rowsInLine[sameRowsIndex - 1],\n        ]\n            .filter(x => x)\n            .map(p => p.point);\n    }\n\n    private filterNeighboursImpossibleToGo(point: Point, neighbours: Point[]) {\n        this.cannotGoPoints.forEach(({ from, to }) => {\n            if (arePointsEqual(point, from)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, to));\n                neighbours.splice(i, 1);\n            } else if (arePointsEqual(point, to)) {\n                const i = neighbours.findIndex(p => arePointsEqual(p, from));\n                neighbours.splice(i, 1);\n            }\n        });\n    }\n\n    public findSelectablePoints(point?: Point): Point[] {\n        switch (this.currentState) {\n            case GameState.INITIAL:\n                return this.board.filter(p => p.player === Player.NO_PLAYER).map(p => p.point);\n            case GameState.SELECT_POINT_TO_MOVE:\n                return this.board.filter(p => p.player === this.currentPlayer).map(p => p.point);\n            case GameState.MILL:\n                return this.allOpponentPositions().map(p => p.point);\n            case GameState.MOVE_SELECTED_POINT:\n                return this.possibleMoves(point);\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Point) {\n        const boardPosition = this.findPosition(point);\n        this.playerPoints[boardPosition.player]--;\n        boardPosition.player = Player.NO_PLAYER;\n\n        if (Object.values(this.playerPoints).some(points => points === POINTS_TO_GAME_OVER)) {\n            this.setState(GameState.GAME_OVER);\n        }\n    }\n\n    public clearMill() {\n        this.setState(this.prevState);\n        this.millPlayer = null;\n    }\n\n    public getMovesHistory(): Move[] {\n        return this.movesHistory.getHistory();\n    }\n}\n\ninterface FindInLinePointsResults {\n    colsInLine: BoardPosition[];\n    rowsInLine: BoardPosition[];\n}\n","import { Point, pointFromIndexes } from '../game/Point';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(point: Point) {\n        this.ctx.moveTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(point: Point) {\n        this.ctx.lineTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Point, end: Point) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.stroke();\n    }\n\n    public clearCircle(point: Point, radius: number) {\n        this.drawCircle(point, radius);\n        this.ctx.clip();\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getPoint(pos: { x: number; y: number }): Point {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return pointFromIndexes(row, col);\n    }\n\n    private drawCircle(point: Point, radius: number) {\n        const xPosition = point.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (point.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { arePointsEqual, Point, point } from '../game/Point';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Point[];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectablePoints();\n    }\n\n    private onMouseClick(point: Point) {\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.resetCanvasAndDrawGame();\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.resetCanvasAndDrawGame();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.resetCanvasAndDrawGame();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n        this.afterUpdate(gameMoveResult);\n        this.selectablePoints = this.game.findSelectablePoints(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.board.forEach((board: BoardPosition) => {\n            const paintable = getPaintablePlayer(board.player);\n\n            if (board.player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(board.point, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Point) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(position => {\n            this.gameCanvas.strokeCircle(position.point, 15);\n        });\n    }\n\n    private resetCanvasAndDrawGame() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            const isSelectable = this.selectablePoints.some(p => arePointsEqual(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { Player } from '../game/Player';\nimport { GameState } from '../game/GameState';\n\nexport class GameInfoWriter {\n    private readonly currentPlayerText = document.getElementById('current-player-text');\n    private readonly moveTypeText = document.getElementById('game-state');\n    private readonly playerPoints = {\n        [Player.PLAYER_1]: document.getElementById('player-1-points'),\n        [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    };\n\n    private readonly gameStateToText = {\n        [GameState.INITIAL]: 'Initial',\n        [GameState.MOVE_SELECTED_POINT]: 'Move point',\n        [GameState.SELECT_POINT_TO_MOVE]: 'Select point',\n        [GameState.MILL]: 'Mill',\n        [GameState.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update(gameMoveResult?: GameMoveResult) {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        this.currentPlayerText.innerText = paintablePlayer.label;\n        this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        this.moveTypeText.innerText = this.gameStateToText[this.game.currentState] || 'Unknown state';\n    }\n\n    private updateHistoryMoves() {\n        console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.playerPoints).forEach(([player, points]) => {\n            this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { arePointsEqual, Point } from './Point';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public addInitialMove(point: Point, player: Player) {\n        this.addMove({ to: point, player });\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public getPreviousPoint(point: Point): Point | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (arePointsEqual(this.history[i].to, point)) return this.history[i].from;\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Point;\n    to: Point;\n    player: Player;\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame(new MovesHistory());\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n    const drawer = new GameDrawer(canvas, game, type => infoWriter.update(type));\n\n    infoWriter.update();\n})();\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else {\n        window.location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}