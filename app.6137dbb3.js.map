{"version":3,"sources":["app/game/Player.ts","app/game/Coordinate.ts","app/game/InitialGameHelper.ts","app/game/GameMoveResult.ts","app/game/GamePhase.ts","app/game/GameMoveEngine.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/PaintablePlayer.ts","app/paint/GameDrawer.ts","app/paint/GameInfoWriter.ts","app/game/MovesHistory.ts","app/game/BoardService.ts","app/tree/Tree.ts","app/ai/NodeBuilder.ts","app/ai/AlphaBetaAlgorithm.ts","app/ai/heuristics/AlmostMillHeuristic.ts","app/ai/heuristics/PlayerRemainingPointsHeuristic.ts","app/index.ts"],"names":[],"mappings":"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A,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,IAAK,CAAC,EAAA,MAAM,EAAG,GAAI,EAAA,MAAM,EAAG,MACxE,CAAC,EAAA,KAAK,EAAA,MAAM,EAAG,IAAK,CAAC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","file":"app.6137dbb3.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1 = 'PLAYER_1',\n    PLAYER_2 = 'PLAYER_2',\n    NO_PLAYER = 'NO_PLAYER',\n}\n\nexport const nextPlayer = (player: Player): Player => (player === Player.PLAYER_1 ? Player.PLAYER_2 : Player.PLAYER_1);\n","export interface Coordinate {\n    row: number;\n    col: number;\n}\n\nexport function coord(row: number, col: number): Coordinate {\n    return { row, col };\n}\n\nexport function areCoordsEquals(coord1: Coordinate, coord2: Coordinate) {\n    return coord1.row == coord2.row && coord1.col == coord2.col;\n}\n\nexport function hash(point: Coordinate): number {\n    return (point.row << 10) + point.col;\n}\n\nexport function fromHash(hash: number): Coordinate {\n    const col = hash % 1024;\n    const row = (hash - col) >> 10;\n    return coord(row, col);\n}\n","import { Player } from './Player';\nimport { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { hash, coord } from './Coordinate';\n\nexport const initHandQueue = (): Player[] => {\n    const queue = [];\n    const players = [Player.PLAYER_1, Player.PLAYER_2];\n    for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n        queue.push(players[i % players.length]);\n    }\n    return queue;\n};\n\nexport const initBoard = (): Map<number, Player> => {\n    const columns = [[1, 4, 7], [2, 4, 6], [3, 4, 5], [1, 2, 3, 5, 6, 7], [3, 4, 5], [2, 4, 6], [1, 4, 7]];\n    const board = new Map<number, Player>();\n\n    for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n        columns[i - 1].forEach(col => {\n            board.set(hash(coord(i, col)), Player.NO_PLAYER);\n        });\n    }\n    return board;\n};\n","export enum GameMoveResult {\n    SUCCESSFUL_MOVE = 'SUCCESSFUL_MOVE',\n    FIRST_MOVE_PART = 'FIRST_MOVE_PART',\n    RESTART_MOVE = 'RESTART_MOVE',\n    CANNOT_MOVE = 'CANNOT_MOVE',\n    MILL = 'MILL',\n    OPPONENT_DESTROYED = 'OPPONENT_DESTROYED',\n    INVALID_MILL_MOVE = 'INVALID_MILL_MOVE',\n    CANNOT_MOVE_DUE_TO_GAME_END = 'CANNOT_MOVE_DUE_TO_GAME_END',\n}\n\nexport const NEXT_PLAYER_RESULTS = [GameMoveResult.SUCCESSFUL_MOVE, GameMoveResult.OPPONENT_DESTROYED];\n","export enum GamePhase {\n    INITIAL = 'INITIAL',\n    SELECT_POINT_TO_MOVE = 'SELECT_POINT_TO_MOVE',\n    MOVE_SELECTED_POINT = 'MOVE_SELECTED_POINT',\n    MILL = 'MILL',\n    GAME_OVER = 'GAME_OVER',\n}\n","import { NineMensMorrisGame } from './NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport { GameMoveResult } from './GameMoveResult';\nimport { GamePhase } from './GamePhase';\n\nexport class GameMoveEngine {\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public makeMove(point: Coordinate): GameMoveResult {\n        if (this.game.isGameOver()) {\n            return;\n        }\n        if (this.game.isMill()) {\n            return this.makeMillMove(point);\n        } else if (this.game.currentPhase == GamePhase.INITIAL) {\n            return this.makeInitialMove(point);\n        } else {\n            return this.makeMoveInNormalPhase(point);\n        }\n    }\n\n    private makeInitialMove(point: Coordinate) {\n        if (!this.game.isNoPlayer(point)) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n\n        this.game.addInitialPoint(point);\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMoveInNormalPhase(point: Coordinate): GameMoveResult {\n        if (!this.game.currentMove) {\n            return this.makeFirstMovePart(point);\n        }\n        return this.makeFinalMovePart(point);\n    }\n\n    private makeFirstMovePart(point: Coordinate): GameMoveResult {\n        const player = this.game.boardService.playerAt(point);\n        if (!player || player !== this.game.currentPlayer) {\n            return GameMoveResult.CANNOT_MOVE;\n        }\n        this.game.currentMove = { point, neighbours: this.game.possibleMoves(point), player: this.game.currentPlayer };\n        this.game.setPhase(GamePhase.MOVE_SELECTED_POINT);\n        return GameMoveResult.FIRST_MOVE_PART;\n    }\n\n    private makeFinalMovePart(point: Coordinate): GameMoveResult {\n        const pointToMove = this.game.currentMove.neighbours.find(p => areCoordsEquals(p, point));\n\n        if (!pointToMove) {\n            this.game.currentMove = null;\n            this.game.setPhase(GamePhase.SELECT_POINT_TO_MOVE);\n            return GameMoveResult.RESTART_MOVE;\n        }\n\n        this.game.movePoint(this.game.currentMove.point, point);\n        this.game.currentMove = null;\n\n        if (this.game.detectMill(point)) {\n            return GameMoveResult.MILL;\n        }\n\n        this.game.setNextPlayerMove();\n        return GameMoveResult.SUCCESSFUL_MOVE;\n    }\n\n    private makeMillMove(point: Coordinate): GameMoveResult {\n        if (this.game.isOpponentPoint(point)) {\n            this.game.removePoint(point);\n            this.game.clearMill();\n            this.game.setNextPlayerMove();\n            return GameMoveResult.OPPONENT_DESTROYED;\n        }\n        return GameMoveResult.INVALID_MILL_MOVE;\n    }\n}\n","import { nextPlayer, Player } from './Player';\nimport { areCoordsEquals, Coordinate } from './Coordinate';\nimport * as InitialGameHelper from './InitialGameHelper';\nimport { GameState } from './GameState';\nimport { GameMoveEngine } from './GameMoveEngine';\nimport { GameMoveResult } from './GameMoveResult';\nimport { MovesHistory } from './MovesHistory';\nimport { BoardService } from './BoardService';\nimport { GamePhase } from './GamePhase';\nimport { CurrentMove } from './CurrentMove';\n\nconst POINTS_TO_ENABLE_FLYING = 3;\nconst POINTS_TO_GAME_OVER = 2;\n\nexport class NineMensMorrisGame {\n    public static readonly NUMBER_OF_POINTS = 9;\n    public static readonly BOARD_SIZE = 7;\n    public static readonly MOVES_WITHOUT_MILL_TO_GAME_OVER = 30;\n\n    private gameMoveEngine: GameMoveEngine;\n    private state: GameState = this.resetState();\n\n    public constructor(private movesHistory: MovesHistory, public boardService: BoardService) {\n        this.gameMoveEngine = new GameMoveEngine(this);\n        this.boardService.resetBoard(this.state.board);\n    }\n\n    public resetState(state?: GameState): GameState {\n        const newState = state || {\n            initialHandQueue: InitialGameHelper.initHandQueue(),\n            millPlayer: null,\n            gamePhase: GamePhase.INITIAL,\n            prevPhase: GamePhase.INITIAL,\n            playerPoints: { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 },\n            currentPlayerMove: Player.PLAYER_1,\n            board: InitialGameHelper.initBoard(),\n            history: [],\n            destroyedOpponents: { [Player.PLAYER_1]: 0, [Player.PLAYER_2]: 0 },\n            currentMove: null,\n            winner: null,\n            movesWithoutMill: 0,\n        };\n        this.state = this.clone(newState);\n        this.boardService.resetBoard(this.state.board);\n        this.movesHistory.resetHistory(this.state.history);\n        return newState;\n    }\n\n    public getState(): GameState {\n        return this.clone(this.state);\n    }\n\n    private clone(obj) {\n        if (obj === null || typeof obj !== 'object') return obj;\n        if (obj instanceof Map) {\n            return new Map(obj);\n        }\n        const temp = obj.constructor(); // changed\n        for (const key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                obj['isActiveClone'] = null;\n                temp[key] = this.clone(obj[key]);\n                delete obj['isActiveClone'];\n            }\n        }\n        return temp;\n    }\n\n    public addInitialPoint(coordinate: Coordinate) {\n        if (this.state.initialHandQueue.length) {\n            const player = this.boardService.playerAt(coordinate);\n            const newPlayer = player === Player.NO_PLAYER ? this.state.currentPlayerMove : player;\n            this.boardService.setPlayer(coordinate, newPlayer);\n            this.state.playerPoints[this.currentPlayer]++;\n            this.movesHistory.addInitialMove(coordinate, this.currentPlayer);\n        } else throw Error('Initial hand queue is empty!');\n    }\n\n    public setNextPlayerMove() {\n        if (this.state.initialHandQueue.length) {\n            this.state.currentPlayerMove = this.state.initialHandQueue.pop();\n            this.setPhase(this.state.initialHandQueue.length ? GamePhase.INITIAL : GamePhase.SELECT_POINT_TO_MOVE);\n        } else {\n            this.setPhase(GamePhase.SELECT_POINT_TO_MOVE);\n            this.state.currentPlayerMove = nextPlayer(this.state.currentPlayerMove);\n        }\n    }\n\n    public tryToMakeMove(coordinate: Coordinate): GameMoveResult {\n        if (this.state.movesWithoutMill > NineMensMorrisGame.MOVES_WITHOUT_MILL_TO_GAME_OVER) {\n            this.setGameOver(nextPlayer(this.currentPlayer));\n            return GameMoveResult.CANNOT_MOVE_DUE_TO_GAME_END;\n        }\n        return this.gameMoveEngine.makeMove(coordinate);\n    }\n\n    public movePoint(from: Coordinate, to: Coordinate) {\n        const fromPlayer = this.boardService.playerAt(from);\n        const toPlayer = this.boardService.playerAt(to);\n\n        this.state.movesWithoutMill++;\n\n        if (toPlayer === Player.NO_PLAYER) {\n            this.boardService.setPlayer(to, fromPlayer);\n            this.boardService.setPlayer(from, Player.NO_PLAYER);\n\n            this.movesHistory.addMove({ from, to, player: this.currentPlayer });\n        }\n    }\n\n    public detectMill(changedCoordinate: Coordinate): boolean {\n        const isMill = this.boardService.isCoordinatePartOfMill(changedCoordinate);\n        this.state.millPlayer = isMill ? this.currentPlayer : null;\n        if (isMill) {\n            this.setPhase(GamePhase.MILL);\n            this.state.movesWithoutMill = 0;\n        }\n        return isMill;\n    }\n\n    public isMill(): boolean {\n        return this.state.millPlayer !== null;\n    }\n\n    public forEachBoardPosition(func: (coordinate: Coordinate, player: Player) => void) {\n        this.boardService.forEach(func);\n    }\n\n    public isGameOver(): boolean {\n        return this.state.gamePhase === GamePhase.GAME_OVER;\n    }\n\n    public isNoPlayer(coordinate: Coordinate): boolean {\n        return this.boardService.playerAt(coordinate) === Player.NO_PLAYER;\n    }\n\n    public isOpponentPoint(point: Coordinate): boolean {\n        const player = this.boardService.playerAt(point);\n        return this.isOpponentPosition(player);\n    }\n\n    private isOpponentPosition(player: Player | null) {\n        return player && player != Player.NO_PLAYER && player != this.currentPlayer;\n    }\n\n    public possibleMoves(coordinate: Coordinate): Coordinate[] {\n        const previousCoordinate: Coordinate = this.movesHistory.getPreviousCoordinate(this.currentPlayer, coordinate);\n        return this.findNeighbours(coordinate)\n            .filter(p => this.isNoPlayer(p))\n            .filter(p => !(previousCoordinate && areCoordsEquals(previousCoordinate, p)));\n    }\n\n    public allOpponentPositions(): Coordinate[] {\n        return this.boardService.filterForCoordinates((player: Player) => this.isOpponentPosition(player));\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        if (this.state.playerPoints[this.currentPlayer] === POINTS_TO_ENABLE_FLYING) {\n            return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n        }\n        return this.boardService.findNeighbours(coordinate);\n    }\n\n    public isFlyingActive(): boolean {\n        return Object.values(this.state.playerPoints).some(points => points === POINTS_TO_ENABLE_FLYING);\n    }\n\n    public get currentPhase(): GamePhase {\n        return this.state.gamePhase;\n    }\n\n    public setPhase(phase: GamePhase) {\n        if (this.isGameOver()) return;\n        if (phase !== GamePhase.MOVE_SELECTED_POINT) this.state.prevPhase = this.state.gamePhase;\n        this.state.gamePhase = phase;\n    }\n\n    public get currentPlayer(): Player {\n        return this.state.currentPlayerMove;\n    }\n\n    public findSelectableCoordinates(coordinate?: Coordinate): Coordinate[] {\n        switch (this.currentPhase) {\n            case GamePhase.INITIAL:\n                return this.boardService.findPlayerCoordinates(Player.NO_PLAYER);\n            case GamePhase.SELECT_POINT_TO_MOVE:\n                const selectable = this.boardService.findPlayerCoordinates(this.currentPlayer);\n                if (!selectable.length) {\n                    this.setGameOver(nextPlayer(this.currentPlayer));\n                }\n                return selectable;\n            case GamePhase.MILL:\n                return this.allOpponentPositions();\n            case GamePhase.MOVE_SELECTED_POINT:\n                return this.possibleMoves(coordinate);\n            case GamePhase.GAME_OVER:\n                return [];\n            default:\n                return [];\n        }\n    }\n\n    public removePoint(point: Coordinate) {\n        const playerToRemove = this.boardService.playerAt(point);\n        this.state.playerPoints[playerToRemove]--;\n        this.state.destroyedOpponents[this.currentPlayer]++;\n        this.boardService.setPlayer(point, Player.NO_PLAYER);\n\n        if (!this.state.initialHandQueue.length && this.state.playerPoints[playerToRemove] <= POINTS_TO_GAME_OVER) {\n            this.setGameOver(this.currentPlayer);\n        }\n    }\n\n    public clearMill() {\n        this.setPhase(this.state.prevPhase);\n        this.state.millPlayer = null;\n    }\n\n    public set currentMove(move: CurrentMove) {\n        this.state.currentMove = move;\n    }\n\n    public get currentMove(): CurrentMove {\n        return this.state.currentMove;\n    }\n\n    private setGameOver(winner: Player) {\n        this.setPhase(GamePhase.GAME_OVER);\n        this.state.winner = winner;\n    }\n}\n","import { Coordinate, coord } from '../game/Coordinate';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(coordinate: Coordinate) {\n        this.ctx.moveTo(\n            this.squareSize * (coordinate.col - 1) + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(coordinate: Coordinate) {\n        this.ctx.lineTo(\n            this.squareSize * (coordinate.col - 1) + this.squareSize / 2,\n            this.squareSize * (coordinate.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Coordinate, end: Coordinate) {\n        const x = this.squareSize * (start.col - 1) + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * (end.col - 1) - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.fill();\n    }\n    public strokeCircle(coordinate: Coordinate, radius: number) {\n        this.drawCircle(coordinate, radius);\n        this.ctx.stroke();\n    }\n\n    public clearAll() {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.beginPath();\n    }\n\n    public getCoordinate(pos: { x: number; y: number }): Coordinate {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return coord(row + 1, col + 1);\n    }\n\n    private drawCircle(coordinate: Coordinate, radius: number) {\n        const xPosition = (coordinate.col - 1) * this.squareSize + this.squareSize / 2;\n        const yPosition = (coordinate.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n    }\n}\n","import { Player } from '../game/Player';\n\nexport interface PaintablePlayer {\n    radius: number;\n    color: string;\n    label: string;\n}\n\nconst players: Map<Player, PaintablePlayer> = new Map();\nplayers.set(Player.PLAYER_1, { color: 'red', radius: 10, label: 'Player 1' });\nplayers.set(Player.PLAYER_2, { color: 'blue', radius: 10, label: 'Player 2' });\nplayers.set(Player.NO_PLAYER, { color: 'black', radius: 5, label: 'No player' });\n\nexport const getPaintablePlayer = (player: Player): PaintablePlayer => players.get(player);\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { areCoordsEquals, Coordinate, coord } from '../game/Coordinate';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { getPaintablePlayer } from './PaintablePlayer';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n    private selectablePoints: Coordinate[];\n    private humanPlayers = [Player.PLAYER_1];\n\n    public constructor(\n        private canvas: HTMLCanvasElement,\n        private game: NineMensMorrisGame,\n        private afterUpdate: Function,\n    ) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas();\n        this.selectablePoints = this.game.findSelectableCoordinates();\n    }\n\n    public onMouseClick(point: Coordinate) {\n        if (!this.humanPlayers.includes(this.game.currentPlayer)) {\n            console.log('NOW IS COMPUTER TURN!');\n            return;\n        }\n        const gameMoveResult = this.game.tryToMakeMove(point);\n\n        switch (gameMoveResult) {\n            case GameMoveResult.SUCCESSFUL_MOVE:\n            case GameMoveResult.OPPONENT_DESTROYED:\n                this.redraw();\n                setTimeout(() => {\n                    this.afterUpdate(gameMoveResult, () => this.redraw());\n                });\n                break;\n            case GameMoveResult.FIRST_MOVE_PART:\n                this.drawPossibleMoves(point);\n                break;\n            case GameMoveResult.RESTART_MOVE:\n                this.redraw();\n                this.onMouseClick(point);\n                break;\n            case GameMoveResult.MILL:\n                this.redraw();\n                this.drawPossibleMillMoves();\n                break;\n            case GameMoveResult.CANNOT_MOVE:\n                break;\n        }\n\n        this.selectablePoints = this.game.findSelectableCoordinates(point);\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas() {\n        this.drawLines();\n        this.drawDots();\n    }\n\n    private drawDots() {\n        this.game.forEachBoardPosition((coordinate, player) => {\n            const paintable = getPaintablePlayer(player);\n\n            if (player === Player.NO_PLAYER) {\n                this.gameCanvas.setColor(this.boardColor);\n                this.gameCanvas.fillCircle(coordinate, paintable.radius);\n            } else {\n                this.gameCanvas.setColor(paintable.color);\n                this.gameCanvas.fillCircle(coordinate, paintable.radius);\n            }\n        });\n    }\n\n    private drawPossibleMoves(point: Coordinate) {\n        this.game.possibleMoves(point).forEach(point => {\n            this.gameCanvas.strokeCircle(point, 15);\n        });\n    }\n\n    private drawPossibleMillMoves() {\n        this.game.allOpponentPositions().forEach(coordinate => {\n            this.gameCanvas.strokeCircle(coordinate, 15);\n        });\n    }\n\n    public redraw() {\n        this.gameCanvas.clearAll();\n        this.drawInitialCanvas();\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(coord(1, 1), coord(7, 7));\n        this.gameCanvas.strokeRect(coord(2, 2), coord(6, 6));\n        this.gameCanvas.strokeRect(coord(3, 3), coord(5, 5));\n\n        this.gameCanvas.moveTo(coord(1, 4));\n        this.gameCanvas.lineTo(coord(3, 4));\n\n        this.gameCanvas.moveTo(coord(5, 4));\n        this.gameCanvas.lineTo(coord(7, 4));\n\n        this.gameCanvas.moveTo(coord(4, 1));\n        this.gameCanvas.lineTo(coord(4, 3));\n\n        this.gameCanvas.moveTo(coord(4, 5));\n        this.gameCanvas.lineTo(coord(4, 7));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            this.onMouseClick(point);\n        });\n\n        canvas.addEventListener('mousemove', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getCoordinate(pos);\n            const isSelectable = this.selectablePoints.some(p => areCoordsEquals(p, point));\n            canvas.style.cursor = isSelectable ? 'pointer' : 'default';\n        });\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { getPaintablePlayer } from './PaintablePlayer';\nimport { Player } from '../game/Player';\nimport { GamePhase } from '../game/GamePhase';\n\nexport class GameInfoWriter {\n    // private readonly currentPlayerText = document.getElementById('current-player-text');\n    // private readonly moveTypeText = document.getElementById('game-state');\n    // private readonly playerPoints = {\n    //     [Player.PLAYER_1]: document.getElementById('player-1-points'),\n    //     [Player.PLAYER_2]: document.getElementById('player-2-points'),\n    // };\n\n    private readonly gamePhaseToText = {\n        [GamePhase.INITIAL]: 'Initial',\n        [GamePhase.MOVE_SELECTED_POINT]: 'Move coordinate',\n        [GamePhase.SELECT_POINT_TO_MOVE]: 'Select coordinate',\n        [GamePhase.MILL]: 'Mill',\n        [GamePhase.GAME_OVER]: 'The end',\n    };\n\n    public constructor(private game: NineMensMorrisGame) {}\n\n    public update() {\n        this.updateCurrentPlayerText();\n        this.updateGameState();\n        this.updateHistoryMoves();\n        this.updatePoints();\n    }\n\n    private updateCurrentPlayerText() {\n        const paintablePlayer = getPaintablePlayer(this.game.currentPlayer);\n        console.log(paintablePlayer.label);\n        // this.currentPlayerText.innerText = paintablePlayer.label;\n        // this.currentPlayerText.style.color = paintablePlayer.color;\n    }\n\n    private updateGameState() {\n        console.log('Phase: ', this.gamePhaseToText[this.game.currentPhase]);\n        // this.moveTypeText.innerText = this.gamePhaseToText[this.game.currentPhase] || 'Unknown phase';\n    }\n\n    private updateHistoryMoves() {\n        // console.log(this.game.getMovesHistory());\n    }\n\n    private updatePoints() {\n        Object.entries(this.game.getState().playerPoints).forEach(([player, points]) => {\n            console.log('Points:', player, points);\n            // this.playerPoints[player].innerText = points + '';\n        });\n    }\n}\n","import { areCoordsEquals, Coordinate } from './Coordinate';\nimport { Player } from './Player';\n\nexport class MovesHistory {\n    private history: Move[] = [];\n\n    public addMove(move: Move) {\n        this.history.push(move);\n    }\n\n    public getHistory(): Move[] {\n        return this.history;\n    }\n\n    public resetHistory(history: Move[]) {\n        this.history = history;\n    }\n\n    public addInitialMove(coordinate: Coordinate, player: Player) {\n        this.addMove({ to: coordinate, player });\n    }\n\n    public getPreviousCoordinate(player: Player, coordinate: Coordinate): Coordinate | null {\n        for (let i = this.history.length - 1; i >= 0; i--) {\n            if (this.history[i].player === player) {\n                return areCoordsEquals(this.history[i].to, coordinate) ? this.history[i].from : null;\n            }\n        }\n        return null;\n    }\n}\n\nexport interface Move {\n    from?: Coordinate;\n    to: Coordinate;\n    player: Player;\n}\n","import { initBoard } from './InitialGameHelper';\nimport { coord, Coordinate, fromHash, hash } from './Coordinate';\nimport { Player } from './Player';\n\nexport class BoardService {\n    private readonly neighbours: Map<number, Coordinate[]> = this.initNeighbours();\n    public readonly millCheckPositions: Map<number, Coordinate[][]> = this.initMillCheckPositions();\n\n    public constructor(private board: Map<number, Player> = initBoard()) {}\n\n    public resetBoard(board = initBoard()) {\n        this.board = board;\n    }\n\n    public playerAt(coordinate: Coordinate): Player | null {\n        return this.playerAtHash(hash(coordinate));\n    }\n\n    public playerAtHash(hash: number): Player | null {\n        return this.board.get(hash);\n    }\n\n    public setPlayer(coordinate: Coordinate, player: Player) {\n        this.board.set(hash(coordinate), player);\n    }\n\n    public filterForCoordinates(predicate: (player: Player) => boolean): Coordinate[] {\n        const result = [];\n        this.forEach((coord, player) => {\n            if (predicate(player)) result.push(coord);\n        });\n        return result;\n    }\n\n    public findPlayerCoordinates(player: Player): Coordinate[] {\n        return this.filterForCoordinates(_player => _player === player);\n    }\n\n    public isCoordinatePartOfMill(coordinate: Coordinate): boolean {\n        const coordPlayer: Player = this.playerAt(coordinate);\n        const millCoordsToCheck: Coordinate[][] = this.millCheckPositions.get(hash(coordinate));\n\n        return millCoordsToCheck.some(coords => coords.every(_coord => this.playerAt(_coord) === coordPlayer));\n    }\n\n    public forEach(func: (coordinate: Coordinate, player: Player) => void) {\n        this.board.forEach((player, hash) => {\n            func(fromHash(hash), player);\n        });\n    }\n\n    public findNeighbours(coordinate: Coordinate): Coordinate[] {\n        return this.neighbours.get(hash(coordinate));\n    }\n\n    private initNeighbours(): Map<number, Coordinate[]> {\n        return new Map([\n            [hash(coord(1, 1)), [coord(1, 4), coord(4, 1)]],\n            [hash(coord(1, 4)), [coord(1, 1), coord(1, 7), coord(2, 4)]],\n            [hash(coord(1, 7)), [coord(1, 4), coord(4, 7)]],\n            [hash(coord(2, 2)), [coord(2, 4), coord(4, 2)]],\n            [hash(coord(2, 4)), [coord(1, 4), coord(2, 6), coord(3, 4), coord(2, 2)]],\n            [hash(coord(2, 6)), [coord(2, 4), coord(4, 6)]],\n            [hash(coord(3, 3)), [coord(3, 4), coord(4, 3)]],\n            [hash(coord(3, 4)), [coord(3, 3), coord(2, 4), coord(3, 5)]],\n            [hash(coord(3, 5)), [coord(3, 4), coord(4, 5)]],\n            [hash(coord(4, 1)), [coord(1, 1), coord(4, 2), coord(7, 1)]],\n            [hash(coord(4, 2)), [coord(4, 1), coord(2, 2), coord(6, 2), coord(4, 3)]],\n            [hash(coord(4, 3)), [coord(4, 2), coord(3, 3), coord(5, 3)]],\n            [hash(coord(4, 5)), [coord(3, 5), coord(5, 5), coord(4, 6)]],\n            [hash(coord(4, 6)), [coord(4, 5), coord(2, 6), coord(4, 7), coord(6, 6)]],\n            [hash(coord(4, 7)), [coord(4, 6), coord(1, 7), coord(7, 7)]],\n            [hash(coord(5, 3)), [coord(4, 3), coord(5, 4)]],\n            [hash(coord(5, 4)), [coord(5, 3), coord(5, 5), coord(6, 4)]],\n            [hash(coord(5, 5)), [coord(5, 4), coord(4, 5)]],\n            [hash(coord(6, 2)), [coord(4, 2), coord(6, 4)]],\n            [hash(coord(6, 4)), [coord(6, 2), coord(5, 4), coord(6, 6), coord(7, 4)]],\n            [hash(coord(6, 6)), [coord(6, 4), coord(4, 6)]],\n            [hash(coord(7, 1)), [coord(4, 1), coord(7, 4)]],\n            [hash(coord(7, 4)), [coord(7, 1), coord(6, 4), coord(7, 7)]],\n            [hash(coord(7, 7)), [coord(7, 4), coord(4, 7)]],\n        ]);\n    }\n\n    private initMillCheckPositions(): Map<number, Coordinate[][]> {\n        return new Map([\n            [hash(coord(1, 1)), [[coord(4, 1), coord(7, 1)], [coord(1, 4), coord(1, 7)]]],\n            [hash(coord(1, 4)), [[coord(2, 4), coord(3, 4)], [coord(1, 1), coord(1, 7)]]],\n            [hash(coord(1, 7)), [[coord(4, 7), coord(7, 7)], [coord(1, 1), coord(1, 4)]]],\n            [hash(coord(2, 2)), [[coord(2, 4), coord(2, 6)], [coord(4, 2), coord(6, 2)]]],\n            [hash(coord(2, 4)), [[coord(1, 4), coord(3, 4)], [coord(2, 2), coord(2, 6)]]],\n            [hash(coord(2, 6)), [[coord(2, 2), coord(2, 4)], [coord(4, 6), coord(6, 6)]]],\n            [hash(coord(3, 3)), [[coord(3, 4), coord(3, 5)], [coord(4, 3), coord(5, 3)]]],\n            [hash(coord(3, 4)), [[coord(1, 4), coord(2, 4)], [coord(3, 3), coord(3, 5)]]],\n            [hash(coord(3, 5)), [[coord(3, 3), coord(3, 4)], [coord(4, 5), coord(5, 5)]]],\n            [hash(coord(4, 1)), [[coord(4, 2), coord(4, 3)], [coord(1, 1), coord(7, 1)]]],\n            [hash(coord(4, 2)), [[coord(2, 2), coord(6, 2)], [coord(4, 1), coord(4, 3)]]],\n            [hash(coord(4, 3)), [[coord(3, 3), coord(5, 3)], [coord(4, 1), coord(4, 2)]]],\n            [hash(coord(4, 5)), [[coord(3, 5), coord(5, 5)], [coord(4, 6), coord(4, 7)]]],\n            [hash(coord(4, 6)), [[coord(2, 6), coord(6, 6)], [coord(4, 5), coord(4, 7)]]],\n            [hash(coord(4, 7)), [[coord(1, 7), coord(7, 7)], [coord(4, 5), coord(4, 6)]]],\n            [hash(coord(5, 3)), [[coord(3, 3), coord(4, 3)], [coord(5, 4), coord(5, 5)]]],\n            [hash(coord(5, 4)), [[coord(5, 3), coord(5, 5)], [coord(6, 4), coord(7, 4)]]],\n            [hash(coord(5, 5)), [[coord(5, 3), coord(5, 4)], [coord(2, 6), coord(4, 6)]]],\n            [hash(coord(6, 2)), [[coord(2, 2), coord(4, 2)], [coord(6, 4), coord(6, 6)]]],\n            [hash(coord(6, 4)), [[coord(6, 2), coord(6, 6)], [coord(5, 4), coord(7, 4)]]],\n            [hash(coord(6, 6)), [[coord(2, 6), coord(4, 6)], [coord(6, 2), coord(6, 4)]]],\n            [hash(coord(7, 1)), [[coord(1, 1), coord(4, 1)], [coord(7, 4), coord(7, 7)]]],\n            [hash(coord(7, 4)), [[coord(7, 1), coord(7, 7)], [coord(6, 4), coord(5, 4)]]],\n            [hash(coord(7, 7)), [[coord(7, 1), coord(7, 4)], [coord(1, 7), coord(4, 7)]]],\n        ]);\n    }\n}\n","export class TreeNode<T> {\n    private children: TreeNode<T>[] = [];\n\n    public constructor(public value: T, public parent?: TreeNode<T>) {}\n\n    public addChild(node: TreeNode<T>) {\n        node.parent = this;\n        this.children.push(node);\n    }\n\n    public getChildren(): TreeNode<T>[] {\n        return this.children;\n    }\n\n    public setChildren(children: TreeNode<T>[]) {\n        this.children = children;\n    }\n}\n\nexport class Tree<T> {\n    public moves = 0;\n    public time = 0;\n    public root?: TreeNode<T>;\n\n    public constructor(root: T) {\n        this.root = new TreeNode<T>(root, null);\n    }\n}\n","import { TreeNode } from '../tree/Tree';\nimport { GameNodeValue } from '../tree/GameNodeValue';\nimport { Coordinate } from '../game/Coordinate';\nimport { GameMoveResult } from '../game/GameMoveResult';\nimport { NineMensMorrisGame } from '../game/NineMensMorrisGame';\n\nexport function buildNodesToSearch(\n    game: NineMensMorrisGame,\n    parentNode: TreeNode<GameNodeValue>,\n): TreeNode<GameNodeValue>[] {\n    const state = game.getState();\n    const nodesToSearch: TreeNode<GameNodeValue>[] = [];\n\n    const addToSearch = (movesToValidState: Coordinate[]) => {\n        nodesToSearch.push(new TreeNode({ movesToValidState, evaluation: null }, parentNode));\n    };\n\n    game.findSelectableCoordinates().forEach(coord => {\n        game.resetState(state);\n        const result = game.tryToMakeMove(coord);\n\n        if (result === GameMoveResult.MILL) {\n            game.findSelectableCoordinates(coord).forEach(millCoord => {\n                addToSearch([coord, millCoord]);\n            });\n        } else if (result === GameMoveResult.FIRST_MOVE_PART) {\n            const coordinatesForFinalMove = game.findSelectableCoordinates(coord);\n            const stateAfterFirstMove = game.getState();\n\n            coordinatesForFinalMove.forEach(finalMoveCoordinate => {\n                game.resetState(stateAfterFirstMove);\n                const finalMoveResult = game.tryToMakeMove(finalMoveCoordinate);\n\n                if (finalMoveResult === GameMoveResult.MILL) {\n                    game.findSelectableCoordinates(finalMoveCoordinate).forEach(millCoord => {\n                        addToSearch([coord, finalMoveCoordinate, millCoord]);\n                    });\n                } else {\n                    addToSearch([coord, finalMoveCoordinate]);\n                }\n            });\n        } else if (result === GameMoveResult.CANNOT_MOVE_DUE_TO_GAME_END) {\n        } else {\n            addToSearch([coord]);\n        }\n    });\n\n    game.resetState(state);\n    parentNode.setChildren(nodesToSearch);\n    return nodesToSearch;\n}\n","import { GameHeuristic } from './heuristics/GameHeuristic';\nimport { nextPlayer, Player } from '../game/Player';\nimport { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { Tree, TreeNode } from '../tree/Tree';\nimport { GameNodeValue } from '../tree/GameNodeValue';\nimport { GameState } from '../game/GameState';\nimport { GamePhase } from '../game/GamePhase';\nimport { GameAlgorithm } from './GameAlgorithm';\nimport { buildNodesToSearch } from './NodeBuilder';\n\ntype BetterEvaluation = (a: number, b: number) => number;\ntype BetterAlpha = (alpha: number, evaluation: number) => number;\ntype BetterBeta = (beta: number, evaluation: number) => number;\n\nexport class AlphaBetaAlgorithm implements GameAlgorithm {\n    private moves = 0;\n\n    public constructor(private heuristic: GameHeuristic, private game: NineMensMorrisGame) {}\n\n    public buildGameTree(maximizingPlayer: Player): Tree<GameNodeValue> {\n        this.moves = 0;\n        const initialState = this.game.getState();\n        const depth = this.findOptimalDepth(initialState);\n        const tree = new Tree<GameNodeValue>({ evaluation: 0, movesToValidState: null });\n\n        const timeStart = new Date();\n        this.alphaBeta(initialState, maximizingPlayer, maximizingPlayer, -Infinity, Infinity, depth, tree.root);\n        // @ts-ignore\n        const timeElapsed = new Date() - timeStart;\n        this.game.resetState(initialState);\n\n        tree.moves = this.moves;\n        tree.time = timeElapsed;\n        this.moves = 0;\n\n        return tree;\n    }\n\n    private alphaBeta(\n        state: GameState,\n        currentPlayer: Player,\n        maximizingPlayer: Player,\n        alpha: number,\n        beta: number,\n        depth: number,\n        parentNode: TreeNode<GameNodeValue>,\n    ): number {\n        this.game.resetState(state);\n\n        if (depth === 0 || this.game.isGameOver()) {\n            return this.heuristic.calculateBoard(state, maximizingPlayer);\n        }\n\n        this.moves++;\n\n        const _alphaOrBeta = (\n            initialEvaluation: number,\n            betterEvaluation: BetterEvaluation,\n            nextAlpha: BetterAlpha,\n            nextBeta: BetterBeta,\n        ): number => {\n            let bestEvaluation = initialEvaluation;\n\n            const nodesToSearch = buildNodesToSearch(this.game, parentNode);\n\n            for (const node of nodesToSearch) {\n                this.game.resetState(state);\n\n                node.value.movesToValidState.forEach(coord => {\n                    this.game.tryToMakeMove(coord);\n                });\n\n                const evaluation = this.alphaBeta(\n                    this.game.getState(),\n                    nextPlayer(currentPlayer),\n                    maximizingPlayer,\n                    alpha,\n                    beta,\n                    depth - 1,\n                    node,\n                );\n\n                node.value.evaluation = evaluation;\n                bestEvaluation = betterEvaluation(bestEvaluation, evaluation);\n                alpha = nextAlpha(alpha, evaluation);\n                beta = nextBeta(beta, evaluation);\n\n                if (beta <= alpha) {\n                    break;\n                }\n            }\n\n            return bestEvaluation;\n        };\n\n        if (currentPlayer === maximizingPlayer) {\n            return _alphaOrBeta(-Infinity, Math.max, Math.max, _beta => _beta);\n        } else {\n            return _alphaOrBeta(Infinity, Math.min, _alpha => _alpha, Math.max);\n        }\n    }\n\n    private findOptimalDepth(state: GameState): number {\n        if (state.gamePhase === GamePhase.INITIAL) {\n            return 3;\n        }\n        if (this.game.isFlyingActive()) {\n            return 3;\n        }\n        return 4;\n    }\n}\n","import { GameHeuristic } from './GameHeuristic';\nimport { GameState } from '../../game/GameState';\nimport { nextPlayer, Player } from '../../game/Player';\nimport { BoardService } from '../../game/BoardService';\nimport { Coordinate } from '../../game/Coordinate';\nimport { GamePhase } from '../../game/GamePhase';\n\nexport class AlmostMillHeuristic implements GameHeuristic {\n    private readonly millPointsFactor = 10;\n\n    public constructor(private boardService: BoardService) {}\n\n    public calculateBoard(state: GameState, player: Player): number {\n        if (state.gamePhase === GamePhase.GAME_OVER) {\n            return state.winner === player ? 10_000 : -10_000;\n        }\n        const millPoints =\n            this.millPointsFactor * (state.destroyedOpponents[player] - state.destroyedOpponents[nextPlayer(player)]);\n\n        let almostMillPoints = 0;\n\n        const millCheckPositions: [number, Coordinate[][]][] = [...this.boardService.millCheckPositions.entries()];\n\n        for (const [coordinateHash, millCheckCoords] of millCheckPositions) {\n            const player = this.boardService.playerAtHash(coordinateHash);\n\n            if (player !== Player.NO_PLAYER) {\n                continue;\n            }\n\n            for (const millCoords of millCheckCoords) {\n                const almostMillPlayer = millCoords.map(_c => this.boardService.playerAt(_c));\n\n                if (almostMillPlayer[0] === almostMillPlayer[1]) {\n                    almostMillPoints += almostMillPlayer[0] === player ? 1 : -1;\n                }\n            }\n        }\n        return millPoints + almostMillPoints;\n    }\n}\n","import { GameHeuristic } from './GameHeuristic';\nimport { nextPlayer, Player } from '../../game/Player';\nimport { GameState } from '../../game/GameState';\nimport { GamePhase } from '../../game/GamePhase';\n\nexport class PlayerRemainingPointsHeuristic implements GameHeuristic {\n    public calculateBoard(state: GameState, player: Player): number {\n        if (state.gamePhase === GamePhase.GAME_OVER) {\n            return state.winner === player ? 10_000 : -10_000;\n        }\n        return state.destroyedOpponents[player] - state.destroyedOpponents[nextPlayer(player)];\n    }\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\nimport { GameInfoWriter } from './paint/GameInfoWriter';\nimport { MovesHistory } from './game/MovesHistory';\nimport { BoardService } from './game/BoardService';\nimport { Player } from './game/Player';\nimport { GameMoveResult, NEXT_PLAYER_RESULTS } from './game/GameMoveResult';\nimport { Coordinate } from './game/Coordinate';\nimport { AlphaBetaAlgorithm } from './ai/AlphaBetaAlgorithm';\nimport { GameAlgorithm } from './ai/GameAlgorithm';\nimport { AlmostMillHeuristic } from './ai/heuristics/AlmostMillHeuristic';\nimport { PlayerRemainingPointsHeuristic } from './ai/heuristics/PlayerRemainingPointsHeuristic';\n\nlet intervalId = 0;\nlet totalTime = 0;\nlet totalMoves = 0;\n\nfunction endGameAndPrintResults(game: NineMensMorrisGame) {\n    let state = game.getState();\n    console.log('GAME OVER', state.gamePhase);\n    clearInterval(intervalId);\n    console.log('totalMoves,totalTime,winner,player1Points,player2Points');\n    console.log(\n        `${totalMoves},${totalTime},${state.winner},${state.playerPoints[Player.PLAYER_1]},${\n            state.playerPoints[Player.PLAYER_2]\n        }`,\n    );\n}\n\nfunction makeComputerMove(algorithm: GameAlgorithm, game: NineMensMorrisGame, player: Player) {\n    const tree = algorithm.buildGameTree(player);\n\n    if (!tree.root.getChildren().length) {\n        endGameAndPrintResults(game);\n        return;\n    }\n\n    console.log('WITHOUT MILL', game.getState().movesWithoutMill);\n\n    const bestEvaluation = tree.root\n        .getChildren()\n        .map(node => node.value.evaluation)\n        .reduce((acc, cur) => (acc >= cur ? acc : cur));\n\n    const bestMoves = tree.root\n        .getChildren()\n        .map(node => node.value)\n        .filter(a => a.evaluation === bestEvaluation);\n\n    const move = bestMoves[Math.floor(Math.random() * bestMoves.length)];\n\n    console.log('CURRENT PLAYER', player);\n    console.log(`Moves ${tree.moves}, time: ${tree.time}`);\n    console.log(move);\n\n    totalMoves += tree.moves;\n    totalTime += tree.time;\n\n    move.movesToValidState.forEach((a: Coordinate) => {\n        game.tryToMakeMove(a);\n    });\n}\n\nfunction aiBattle(\n    boardService: BoardService,\n    game: NineMensMorrisGame,\n    infoWriter: GameInfoWriter,\n    drawer: GameDrawer,\n) {\n    const algorithms = {\n        [Player.PLAYER_1]: new AlphaBetaAlgorithm(new PlayerRemainingPointsHeuristic(), game),\n        [Player.PLAYER_2]: new AlphaBetaAlgorithm(new AlmostMillHeuristic(boardService), game),\n    };\n\n    intervalId = setInterval(() => {\n        makeComputerMove(algorithms[game.currentPlayer], game, game.currentPlayer);\n        infoWriter.update();\n        drawer.redraw();\n\n        if (game.isGameOver()) {\n            endGameAndPrintResults(game);\n        }\n    }, 500);\n}\n\nfunction userComputer(canvas, game, infoWriter, minMaxAlgorithm) {\n    const drawer = new GameDrawer(canvas, game, (result: GameMoveResult, redrawFunc) => {\n        infoWriter.update();\n        if (NEXT_PLAYER_RESULTS.includes(result)) {\n            setTimeout(() => {\n                makeComputerMove(minMaxAlgorithm, game, Player.PLAYER_2);\n                infoWriter.update();\n                redrawFunc();\n            }, 10);\n        }\n    });\n}\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const boardService = new BoardService();\n    const game = new NineMensMorrisGame(new MovesHistory(), boardService);\n    // const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const infoWriter = new GameInfoWriter(game);\n\n    const minMaxAlgorithm = new AlphaBetaAlgorithm(new PlayerRemainingPointsHeuristic(), game);\n\n    // userComputer(canvas, game, infoWriter, minMaxAlgorithm);\n\n    const MockDrawer = () => {\n        return {\n            redraw: () => {},\n        };\n    };\n    aiBattle(boardService, game, infoWriter, MockDrawer());\n    infoWriter.update();\n})();\n"]}