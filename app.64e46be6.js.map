{"version":3,"sources":["app/game/Player.ts","app/game/Point.ts","app/game/NineMensMorrisGame.ts","app/paint/GameCanvasContext.ts","app/paint/GameDrawer.ts","app/index.ts"],"names":[],"mappings":"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","file":"app.64e46be6.js","sourceRoot":"..","sourcesContent":["export enum Player {\n    PLAYER_1,\n    PLAYER_2,\n    NO_PLAYER,\n}\n","export interface Point {\n    row: number;\n    col: string;\n    colIndex: number;\n}\n\nconst A_CODE = 'a'.charCodeAt(0);\n\nexport function point(row: number, col: string): Point {\n    return { row, col, colIndex: col.charCodeAt(0) - A_CODE };\n}\n\nexport function pointFromIndexes(row: number, col: number): Point {\n    return { row: row + 1, col: String.fromCharCode(A_CODE + col), colIndex: col };\n}\n\nexport function arePointsEqual(point1: Point, point2: Point) {\n    return point1.row == point2.row && point1.col == point2.col;\n}\n","import { Player } from './Player';\nimport { BoardPosition } from './BoardPosition';\nimport { arePointsEqual, Point, point } from './Point';\n\nexport class NineMensMorrisGame {\n    private static readonly NUMBER_OF_POINTS = 9;\n\n    public static readonly BOARD_SIZE = 7;\n    public readonly board: BoardPosition[];\n\n    private initialHandQueue: Player[];\n    private currentPlayerMove = Player.PLAYER_1;\n\n    public constructor() {\n        this.initialHandQueue = this.initHandQueue();\n        this.board = this.initBoard();\n    }\n\n    public makeMove(point: Point) {\n        if (this.initialHandQueue.length) {\n            const position = this.board.find(p => arePointsEqual(p.point, point));\n            position.player = position.player === Player.NO_PLAYER ? this.currentPlayerMove : position.player;\n            this.currentPlayerMove = this.initialHandQueue.pop();\n        }\n    }\n\n    public isPointValid(point: Point): boolean {\n        return this.board.some(p => arePointsEqual(p.point, point));\n    }\n\n    private initHandQueue(): Player[] {\n        const queue = [];\n        const players = [Player.PLAYER_1, Player.PLAYER_2];\n        for (let i = 0; i < NineMensMorrisGame.NUMBER_OF_POINTS * 2; i++) {\n            queue.push(players[i % players.length]);\n        }\n        return queue;\n    }\n\n    private initBoard(): BoardPosition[] {\n        const columns = [\n            ['a', 'd', 'g'],\n            ['b', 'd', 'f'],\n            ['c', 'd', 'e'],\n            ['a', 'b', 'c', 'e', 'f', 'g'],\n            ['c', 'd', 'e'],\n            ['b', 'd', 'f'],\n            ['a', 'd', 'g'],\n        ];\n        const board: BoardPosition[] = [];\n        for (let i = 1; i <= NineMensMorrisGame.BOARD_SIZE; i++) {\n            columns[i - 1].forEach(col => {\n                board.push({\n                    player: Player.NO_PLAYER,\n                    point: point(i, col),\n                });\n            });\n        }\n        return board;\n    }\n}\n","import { Point, pointFromIndexes } from '../game/Point';\n\nexport class GameCanvasContext {\n    public constructor(private ctx: CanvasRenderingContext2D, private squareSize: number) {}\n\n    public setColor(color: string) {\n        this.ctx.strokeStyle = color;\n        this.ctx.fillStyle = color;\n    }\n\n    public moveTo(point: Point) {\n        this.ctx.moveTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public lineTo(point: Point) {\n        this.ctx.lineTo(\n            this.squareSize * point.colIndex + this.squareSize / 2,\n            this.squareSize * (point.row - 1) + this.squareSize / 2,\n        );\n    }\n\n    public strokeRect(start: Point, end: Point) {\n        const x = this.squareSize * start.colIndex + this.squareSize / 2;\n        const y = this.squareSize * (start.row - 1) + this.squareSize / 2;\n\n        this.ctx.strokeRect(\n            x,\n            y,\n            this.squareSize * end.colIndex - x + this.squareSize / 2,\n            this.squareSize * (end.row - 1) - y + this.squareSize / 2,\n        );\n    }\n\n    public stroke() {\n        this.ctx.stroke();\n    }\n\n    public fillCircle(point: Point, radius: number) {\n        const xPosition = point.colIndex * this.squareSize + this.squareSize / 2;\n        const yPosition = (point.row - 1) * this.squareSize + this.squareSize / 2;\n\n        this.ctx.beginPath();\n        this.ctx.arc(xPosition, yPosition, radius, 0, 2 * Math.PI);\n        this.ctx.fill();\n    }\n\n    public getPoint(pos: { x: number; y: number }): Point {\n        const row = Math.floor(pos.y / this.squareSize);\n        const col = Math.floor(pos.x / this.squareSize);\n        return pointFromIndexes(row, col);\n    }\n}\n","import { NineMensMorrisGame } from '../game/NineMensMorrisGame';\nimport { BoardPosition } from '../game/BoardPosition';\nimport { Point, point } from '../game/Point';\nimport { GameCanvasContext } from './GameCanvasContext';\nimport { Player } from '../game/Player';\n\nexport class GameDrawer {\n    private readonly squareSize: number;\n    private readonly boardColor = '#212121';\n    private readonly gameCanvas: GameCanvasContext;\n\n    public constructor(private canvas: HTMLCanvasElement, private game: NineMensMorrisGame) {\n        this.fitToContainer(canvas);\n\n        this.addMouseListener(canvas);\n\n        this.squareSize = canvas.width / NineMensMorrisGame.BOARD_SIZE;\n        this.gameCanvas = new GameCanvasContext(canvas.getContext('2d'), this.squareSize);\n\n        this.drawInitialCanvas(canvas);\n    }\n\n    private onMouseClick(point: Point) {\n        if (this.game.isPointValid(point)) {\n            this.game.makeMove(point);\n            this.drawDots();\n        }\n    }\n\n    private fitToContainer(canvas: HTMLCanvasElement) {\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n    }\n\n    private drawInitialCanvas(canvas: HTMLCanvasElement) {\n        this.drawHelperLines(canvas);\n\n        this.drawDots();\n        this.drawLines();\n    }\n\n    private drawHelperLines(canvas: HTMLCanvasElement) {\n        const ctx: CanvasRenderingContext2D = canvas.getContext('2d');\n\n        for (let i = 0; i < NineMensMorrisGame.BOARD_SIZE; ++i) {\n            ctx.moveTo(i * this.squareSize, 0);\n            // noinspection JSSuspiciousNameCombination\n            ctx.lineTo(i * this.squareSize, canvas.width);\n        }\n\n        for (let i = 0; i < NineMensMorrisGame.BOARD_SIZE; ++i) {\n            ctx.moveTo(0, i * this.squareSize);\n            // noinspection JSSuspiciousNameCombination\n            ctx.lineTo(canvas.height, i * this.squareSize);\n        }\n        this.gameCanvas.setColor('#e0e0e0');\n        ctx.stroke();\n    }\n\n    private drawDots() {\n        const radius = 5;\n\n        this.game.board.forEach((board: BoardPosition) => {\n            switch (board.player) {\n                case Player.NO_PLAYER:\n                    this.gameCanvas.setColor(this.boardColor);\n                    this.gameCanvas.fillCircle(board.point, radius);\n                    break;\n                case Player.PLAYER_1:\n                    this.gameCanvas.setColor('blue');\n                    this.gameCanvas.fillCircle(board.point, radius * 2);\n                    break;\n                case Player.PLAYER_2:\n                    this.gameCanvas.setColor('red');\n                    this.gameCanvas.fillCircle(board.point, radius * 2);\n                    break;\n            }\n        });\n    }\n\n    private drawLines() {\n        this.gameCanvas.setColor(this.boardColor);\n\n        this.gameCanvas.strokeRect(point(1, 'a'), point(7, 'g'));\n        this.gameCanvas.strokeRect(point(2, 'b'), point(6, 'f'));\n        this.gameCanvas.strokeRect(point(3, 'c'), point(5, 'e'));\n\n        this.gameCanvas.moveTo(point(1, 'd'));\n        this.gameCanvas.lineTo(point(3, 'd'));\n\n        this.gameCanvas.moveTo(point(5, 'd'));\n        this.gameCanvas.lineTo(point(7, 'd'));\n\n        this.gameCanvas.moveTo(point(4, 'a'));\n        this.gameCanvas.lineTo(point(4, 'c'));\n\n        this.gameCanvas.moveTo(point(4, 'e'));\n        this.gameCanvas.lineTo(point(4, 'g'));\n\n        this.gameCanvas.stroke();\n    }\n\n    private addMouseListener(canvas: HTMLCanvasElement) {\n        function getMousePos(canvas, evt) {\n            const rect = canvas.getBoundingClientRect();\n            return {\n                x: evt.clientX - rect.left,\n                y: evt.clientY - rect.top,\n            };\n        }\n\n        canvas.addEventListener('click', e => {\n            const pos = getMousePos(canvas, e);\n            const point = this.gameCanvas.getPoint(pos);\n            this.onMouseClick(point);\n        });\n    }\n}\n","import { NineMensMorrisGame } from './game/NineMensMorrisGame';\nimport { GameDrawer } from './paint/GameDrawer';\n\n(function() {\n    console.log(\"HELLO IN THE NINE MEN'S MORRIS GAME\");\n\n    const game = new NineMensMorrisGame();\n    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;\n\n    const drawer = new GameDrawer(canvas, game);\n})();\n"]}